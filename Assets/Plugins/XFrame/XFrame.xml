<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XFrame</name>
    </assembly>
    <members>
        <member name="T:XFrame.Core.Binder.IChangeableValue">
            <summary>
            可更新值类型
            </summary>
        </member>
        <member name="E:XFrame.Core.Binder.IChangeableValue.OnValueChange">
            <summary>
            更新事件，当数值有更新时需要触发此事件
            </summary>
        </member>
        <member name="T:XFrame.Core.Binder.TriggerBinder`1">
            <summary>
            数值绑定器
            </summary>
            <typeparam name="T">持有的数值类型</typeparam>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.#ctor(System.Func{`0})">
            <summary>
            构造数值绑定器
            </summary>
            <param name="getHandler">获取值的委托</param>
        </member>
        <member name="P:XFrame.Core.Binder.TriggerBinder`1.Value">
            <summary>
            持有的数值
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.Trigger">
            <summary>
            触发数值更新
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.AddHandler(System.Action{`0},System.Boolean)">
            <summary>
            添加一个数值变更处理委托
            </summary>
            <param name="handler">更新时的处理委托</param>
            <param name="atonceInvoke">是否立即执行</param>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.RemoveHandler(System.Action{`0})">
            <summary>
            移除一个数值变更处理委托
            </summary>
            <param name="handler">要移除的委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.AddCondHandler(System.Func{`0,System.Boolean})">
            <summary>
            添加一个带返回值的数值变更处理委托
            </summary>
            <param name="handler">需要添加的委托，当委托返回true时，在通知完后会移除掉该委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.RemoveCondHandler(System.Func{`0,System.Boolean})">
            <summary>
            移除一个带返回值的数值变更处理委托
            </summary>
            <param name="handler">需要移除的委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.op_Implicit(XFrame.Core.Binder.TriggerBinder{`0})~`0">
            <summary>
            返回绑定的值
            </summary>
            <param name="binder">绑定的值</param>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.ToString">
            <summary>
            返回持有值的字符串
            </summary>
            <returns>持有值的字符串</returns>
        </member>
        <member name="T:XFrame.Core.Binder.ValueBinder`1">
            <summary>
            数值绑定器
            </summary>
            <typeparam name="T">持有数值类型</typeparam>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>
            构造数值绑定器
            </summary>
            <param name="getHandler">获取值委托</param>
            <param name="setHandler">设置值委托</param>
        </member>
        <member name="P:XFrame.Core.Binder.ValueBinder`1.Value">
            <summary>
            持有的数值
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.AddHandler(System.Action{`0,`0},System.Boolean)">
            <summary>
            添加一个数值变更处理委托
            </summary>
            <param name="handler">更新时的处理委托</param>
            <param name="atonceInvoke">是否立即执行</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.RemoveHandler(System.Action{`0,`0})">
            <summary>
            移除一个数值变更处理委托
            </summary>
            <param name="handler">要移除的委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.AddCondHandler(System.Func{`0,`0,System.Boolean})">
            <summary>
            添加一个带返回值的数值变更处理委托
            </summary>
            <param name="handler">需要添加的委托，当委托返回true时，在通知完后会移除掉该委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.RemoveCondHandler(System.Func{`0,`0,System.Boolean})">
            <summary>
            移除一个带返回值的数值变更处理委托
            </summary>
            <param name="handler">需要移除的委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.op_Implicit(XFrame.Core.Binder.ValueBinder{`0})~`0">
            <summary>
            返回绑定的值
            </summary>
            <param name="binder">绑定的值</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.ToString">
            <summary>
            返回持有值的字符串
            </summary>
            <returns>持有值的字符串</returns>
        </member>
        <member name="T:XFrame.Core.Binder.ValueBinder`2">
            <summary>
            数值绑定器
            </summary>
            <typeparam name="T">绑定类型</typeparam>
            <typeparam name="VT">监听绑定器类型</typeparam>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.#ctor(System.Func{`0},XFrame.Core.Binder.ValueBinder{`1})">
            <summary>
            构造数值绑定器
            </summary>
            <param name="getHandler">获取值委托</param>
            <param name="changeBinder">值改变绑定器</param>
        </member>
        <member name="P:XFrame.Core.Binder.ValueBinder`2.Value">
            <summary>
            持有的数值
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.AddHandler(System.Action{`0},System.Boolean)">
            <summary>
            添加一个数值变更处理委托
            </summary>
            <param name="handler">更新时的处理委托</param>
            <param name="atonceInvoke">是否自动执行一次</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.RemoveHandler(System.Action{`0})">
            <summary>
            移除一个数值变更处理委托
            </summary>
            <param name="handler">要移除的委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.AddCondHandler(System.Func{`0,System.Boolean})">
            <summary>
            添加一个带返回值的数值变更处理委托
            </summary>
            <param name="handler">需要添加的委托，当委托返回true时，在通知完后会移除掉该委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.RemoveCondHandler(System.Func{`0,System.Boolean})">
            <summary>
            移除一个带返回值的数值变更处理委托
            </summary>
            <param name="handler">需要移除的委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.op_Implicit(XFrame.Core.Binder.ValueBinder{`0,`1})~`0">
            <summary>
            返回绑定的值
            </summary>
            <param name="binder">绑定的值</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.ToString">
            <summary>
            返回持有值的字符串
            </summary>
            <returns>持有值的字符串</returns>
        </member>
        <member name="T:XFrame.Core.Binder.XComplete`1">
            <summary>
            带标记的完成委托
            </summary>
            <typeparam name="T">持有数据类型</typeparam>
        </member>
        <member name="P:XFrame.Core.Binder.XComplete`1.Value">
            <summary>
            持有值
            </summary>
        </member>
        <member name="P:XFrame.Core.Binder.XComplete`1.IsComplete">
            <summary>
            是否已经完成，当设置为true时会自动调用完成回调
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.XComplete`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="defaultValue">持有默认值</param>
        </member>
        <member name="M:XFrame.Core.Binder.XComplete`1.Invoke">
            <summary>
            执行完成委托
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.XComplete`1.On(System.Action)">
            <summary>
            注册完成回调
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:XFrame.Core.Binder.XComplete`1.On(System.Action{`0})">
            <summary>
            注册带有值的完成回调
            </summary>
            <param name="handler">完成回调</param>
        </member>
        <member name="T:XFrame.Core.DataProvider">
            <summary>
            简单数据提供者
            </summary>
        </member>
        <member name="M:XFrame.Core.DataProvider.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:XFrame.Core.DataProvider.HasData``1">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.HasData``1"/>
        </member>
        <member name="M:XFrame.Core.DataProvider.HasData``1(System.String)">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.HasData``1(System.String)"/>
        </member>
        <member name="M:XFrame.Core.DataProvider.GetData``1">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.GetData``1"/>
        </member>
        <member name="M:XFrame.Core.DataProvider.GetData``1(System.String)">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.GetData``1(System.String)"/>
        </member>
        <member name="M:XFrame.Core.DataProvider.SetData``1(``0)">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.SetData``1(``0)"/>
        </member>
        <member name="M:XFrame.Core.DataProvider.SetData``1(System.String,``0)">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.SetData``1(System.String,``0)"/>
        </member>
        <member name="M:XFrame.Core.DataProvider.ClearData">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.ClearData"/>
        </member>
        <member name="T:XFrame.Core.IDataProvider">
            <summary>
            数据提供者
            </summary>
        </member>
        <member name="M:XFrame.Core.IDataProvider.HasData``1">
            <summary>
            是否含有数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>true为含有</returns>
        </member>
        <member name="M:XFrame.Core.IDataProvider.HasData``1(System.String)">
            <summary>
            是否含有数据
            </summary>
            <param name="name">数据名</param>
            <typeparam name="T">数据类型</typeparam>
            <returns>true为含有</returns>
        </member>
        <member name="M:XFrame.Core.IDataProvider.SetData``1(``0)">
            <summary>
            设置数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="value">数据</param>
        </member>
        <member name="M:XFrame.Core.IDataProvider.GetData``1">
            <summary>
            获取数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:XFrame.Core.IDataProvider.SetData``1(System.String,``0)">
            <summary>
            设置数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="name">数据标识</param>
            <param name="value">数据</param>
        </member>
        <member name="M:XFrame.Core.IDataProvider.GetData``1(System.String)">
            <summary>
            获取数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="name">数据标识</param>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:XFrame.Core.IDataProvider.ClearData">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="T:XFrame.Core.Entry">
            <summary>
            框架入口
            </summary>
        </member>
        <member name="E:XFrame.Core.Entry.OnRun">
            <summary>
            开始运行事件
            </summary>
        </member>
        <member name="P:XFrame.Core.Entry.Domain">
            <summary>
            当前域
            </summary>
        </member>
        <member name="M:XFrame.Core.Entry.Init">
            <summary>
            初始化核心模块
            </summary>
        </member>
        <member name="M:XFrame.Core.Entry.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:XFrame.Core.Entry.Trigger(System.Type,System.Object)">
            <summary>
            触发模块处理器 <see cref="T:XFrame.Core.IModuleHandler"/>
            </summary>
            <param name="type">目标类型 <see cref="P:XFrame.Core.IModuleHandler.Target"/></param>
            <param name="data">参数 <see cref="M:XFrame.Core.IModuleHandler.Handle(XFrame.Core.IModule,System.Object)"/></param>
        </member>
        <member name="M:XFrame.Core.Entry.Trigger``1(System.Object)">
            <summary>
            触发模块处理器 <see cref="T:XFrame.Core.IModuleHandler"/>
            </summary>
            <typeparam name="T">目标类型 <see cref="P:XFrame.Core.IModuleHandler.Target"/></typeparam>
            <param name="data">参数 <see cref="M:XFrame.Core.IModuleHandler.Handle(XFrame.Core.IModule,System.Object)"/></param>
        </member>
        <member name="M:XFrame.Core.Entry.ShutDown">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XFrame.Core.Entry.AddHandler``1">
            <summary>
            添加处理器
            </summary>
            <typeparam name="T">处理器类型</typeparam>
        </member>
        <member name="M:XFrame.Core.Entry.AddModules``1">
            <summary>
            添加用户定制模块组
            </summary>
            <typeparam name="T">模块组特性类型</typeparam>
        </member>
        <member name="M:XFrame.Core.Entry.AddModule``1(System.Int32,System.Object)">
            <summary>
            添加用户定制模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <returns>模块</returns>
        </member>
        <member name="M:XFrame.Core.Entry.RemoveModule(XFrame.Core.IModule)">
            <summary>
            移除模块
            </summary>
            <param name="module">模块</param>
        </member>
        <member name="M:XFrame.Core.Entry.RemoveModule(System.Type,System.Int32)">
            <summary>
            移除模块
            </summary>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
        </member>
        <member name="M:XFrame.Core.Entry.RemoveModule``1(System.Int32)">
            <summary>
            移除模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <param name="moduleId">模块Id</param>
        </member>
        <member name="M:XFrame.Core.Entry.GetModule``1(System.Int32)">
            <summary>
            获取模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.Entry.GetHelpers``1">
            <summary>
            获取模块辅助器
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
            <returns>辅助器实例</returns>
        </member>
        <member name="M:XFrame.Core.Entry.GetMainHelper``1">
            <summary>
            获取模块主辅助器(第一个注册)
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
            <returns>辅助器实例</returns>
        </member>
        <member name="T:XFrame.Core.IConfigHandler">
            <summary>
            配置处理类，可设置<see cref="T:XFrame.Core.XOrderAttribute"/>特性表明执行顺序
            </summary>
        </member>
        <member name="M:XFrame.Core.IConfigHandler.OnHandle">
            <summary>
            此方法会在TypeModule执行后执行
            </summary>
        </member>
        <member name="T:XFrame.Core.IEntryHandler">
            <summary>
            Entry处理器
            </summary>
        </member>
        <member name="T:XFrame.Core.IInitHandler">
            <summary>
            初始化处理器
            </summary>
        </member>
        <member name="M:XFrame.Core.IInitHandler.EnterHandle">
            <summary>
            入口处理
            </summary>
        </member>
        <member name="M:XFrame.Core.IInitHandler.BeforeHandle">
            <summary>
            初始化之前处理
            </summary>
            <returns>此任务</returns>
        </member>
        <member name="M:XFrame.Core.IInitHandler.AfterHandle">
            <summary>
            初始化之后处理
            </summary>
            <returns>此任务</returns>
        </member>
        <member name="T:XFrame.Core.IStartHandler">
            <summary>
            启动处理器
            </summary>
        </member>
        <member name="M:XFrame.Core.IStartHandler.BeforeHandle">
            <summary>
            启动之前处理
            </summary>
            <returns>此任务</returns>
        </member>
        <member name="M:XFrame.Core.IStartHandler.AfterHandle">
            <summary>
            启动之后处理
            </summary>
            <returns></returns>
        </member>
        <member name="T:XFrame.Core.BaseModuleAttribute">
            <summary>
            基础模块
            </summary>
        </member>
        <member name="T:XFrame.Core.CommonModuleAttribute">
            <summary>
            通用模块
            </summary>
        </member>
        <member name="T:XFrame.Core.CoreModuleAttribute">
            <summary>
            核心模块
            </summary>
        </member>
        <member name="T:XFrame.Core.RequireModuleAttribute">
            <summary>
            依赖模块
            </summary>
        </member>
        <member name="P:XFrame.Core.RequireModuleAttribute.ModuleType">
            <summary>
            依赖类型
            </summary>
        </member>
        <member name="M:XFrame.Core.RequireModuleAttribute.#ctor(System.Type)">
            <summary>
            构造器
            </summary>
            <param name="type">依赖类型</param>
        </member>
        <member name="T:XFrame.Core.XOrderAttribute">
            <summary>
            定义顺序
            </summary>
        </member>
        <member name="P:XFrame.Core.XOrderAttribute.Order">
            <summary>
            顺序
            </summary>
        </member>
        <member name="M:XFrame.Core.XOrderAttribute.#ctor(System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="order">顺序</param>
        </member>
        <member name="T:XFrame.Core.IModule">
            <summary>
            模块 
            </summary>
        </member>
        <member name="P:XFrame.Core.IModule.Domain">
            <summary>
            模块所属域
            </summary>
        </member>
        <member name="M:XFrame.Core.IModule.OnInit(System.Object,XFrame.Core.ModuleConfigAction)">
            <summary>
            初始化生命周期
            </summary>
            <param name="data">初始化数据</param>
            <param name="configCallback">初始化之前可进行模块配置的回调</param>
        </member>
        <member name="M:XFrame.Core.IModule.OnStart">
            <summary>
            开始运行生命周期
            </summary>
        </member>
        <member name="M:XFrame.Core.IModule.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="T:XFrame.Core.IModuleHandler">
            <summary>
            模块处理器
            </summary>
        </member>
        <member name="P:XFrame.Core.IModuleHandler.Target">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="M:XFrame.Core.IModuleHandler.Handle(XFrame.Core.IModule,System.Object)">
            <summary>
            处理函数,当实现此类型并且处理器注册到核心时,此方法会被执行
            </summary>
            <param name="module">模块</param>
            <param name="data">参数</param>
        </member>
        <member name="T:XFrame.Core.IModuleHelper">
            <summary>
            模块辅助器
            </summary>
        </member>
        <member name="M:XFrame.Core.IModuleHelper.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Core.IModuleHelper.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="M:XFrame.Core.IModuleHelper.OnModuleCreate(XFrame.Core.IModule)">
            <summary>
            模块被创建生命周期
            </summary>
            <param name="module">模块</param>
        </member>
        <member name="M:XFrame.Core.IModuleHelper.OnModuleInit(XFrame.Core.IModule)">
            <summary>
            模块初始化生命周期
            </summary>
            <param name="module">被初始化的模块</param>
        </member>
        <member name="M:XFrame.Core.IModuleHelper.OnModuleStart(XFrame.Core.IModule)">
            <summary>
            模块开始运行生命周期
            </summary>
            <param name="module">模块</param>
        </member>
        <member name="M:XFrame.Core.IModuleHelper.OnModuleDestroy(XFrame.Core.IModule)">
            <summary>
            模块销毁生命周期
            </summary>
            <param name="module">被销毁的模块</param>
        </member>
        <member name="T:XFrame.Core.IUpdater">
            <summary>
            更新处理器
            </summary>
        </member>
        <member name="M:XFrame.Core.IUpdater.OnUpdate(System.Single)">
            <summary>
            更新生命周期
            </summary>
            <param name="escapeTime">逃逸时间</param>
        </member>
        <member name="T:XFrame.Core.ModuleBase">
            <summary>
            模块基类
            </summary>
        </member>
        <member name="P:XFrame.Core.ModuleBase.IsDefaultModule">
            <summary>
            是否是默认模块
            </summary>
        </member>
        <member name="P:XFrame.Core.ModuleBase.Id">
            <summary>
            模块Id
            </summary>
        </member>
        <member name="P:XFrame.Core.ModuleBase.Domain">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.ModuleBase.RegisterUseModule(System.Type,System.Int32)">
            <summary>
            注册此模块使用的模块类型的模块Id
            </summary>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
        </member>
        <member name="M:XFrame.Core.ModuleBase.GetUseModule``1">
            <summary>
            获取使用的模块
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XFrame.Core.ModuleBase.OnInit(System.Object)">
            <summary>
            初始化生命周期
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XFrame.Core.ModuleBase.OnStart">
            <summary>
            启动生命周期
            </summary>
        </member>
        <member name="M:XFrame.Core.ModuleBase.OnDestroy">
            <summary>
            销魂生命周期
            </summary>
        </member>
        <member name="T:XFrame.Core.ModuleConfigAction">
            <summary>
            模块初始化配置处理回调
            </summary>
            <param name="module">目标模块</param>
        </member>
        <member name="T:XFrame.Core.Singleton`1">
            <summary>
            单例
            </summary>
            <typeparam name="T">持有类型</typeparam>
        </member>
        <member name="P:XFrame.Core.Singleton`1.Inst">
            <summary>
            单例实例
            </summary>
        </member>
        <member name="T:XFrame.Core.SingletonModule`1">
            <summary>
            单例模块基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XFrame.Core.SingletonModule`1.Inst">
            <summary>
            单例实例
            </summary>
        </member>
        <member name="M:XFrame.Core.SingletonModule`1.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Core.UpdateHandler">
            <summary>
            更新处理器
            </summary>
        </member>
        <member name="P:XFrame.Core.UpdateHandler.Target">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.UpdateHandler.Handle(XFrame.Core.IModule,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Core.AreaParser">
            <summary>
            数域解析器
            <para>
            例:包含1-10(剔除3)，190-192，可写作 add#1-10@remove#3@add#190-192
            </para>
            </summary>
        </member>
        <member name="F:XFrame.Core.AreaParser.SPLIT">
            <summary>
            通用单项分割符
            </summary>
        </member>
        <member name="F:XFrame.Core.AreaParser.SPLIT2">
            <summary>
            通用单项键值分割符
            </summary>
        </member>
        <member name="F:XFrame.Core.AreaParser.SPLIT3">
            <summary>
            通用值分割符，分割开最小值最大值
            </summary>
        </member>
        <member name="F:XFrame.Core.AreaParser.KEY1">
            <summary>
            通用添加关键符
            </summary>
        </member>
        <member name="F:XFrame.Core.AreaParser.KEY2">
            <summary>
            通用移除关键符
            </summary>
        </member>
        <member name="P:XFrame.Core.AreaParser.Split">
            <summary>
            单项分割符
            </summary>
        </member>
        <member name="P:XFrame.Core.AreaParser.Split2">
            <summary>
            单项键值分割符
            </summary>
        </member>
        <member name="P:XFrame.Core.AreaParser.Split3">
            <summary>
            值分割符，分割开最小值最大值
            </summary>
        </member>
        <member name="P:XFrame.Core.AreaParser.Value">
            <summary>
            获取域内所有值
            </summary>
        </member>
        <member name="M:XFrame.Core.AreaParser.CheckValidHead(System.String)">
            <summary>
            检查单项文本项是否有效
            </summary>
            <param name="content">文本项</param>
            <returns>true为有效</returns>
        </member>
        <member name="M:XFrame.Core.AreaParser.OnCreateFromPool">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.AreaParser.OnRequestFromPool">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.AreaParser.OnReleaseFromPool">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.AreaParser.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.AreaParser.Has(System.String)">
            <summary>
            是否存在某个值
            </summary>
            <param name="str">对比项</param>
            <returns>true表示存在</returns>
        </member>
        <member name="M:XFrame.Core.AreaParser.ToString">
            <summary>
            原始字符串
            </summary>
            <returns>原始串</returns>
        </member>
        <member name="M:XFrame.Core.AreaParser.GetHashCode">
            <summary>
            原始字符串哈希值
            </summary>
            <returns>哈希值</returns>
        </member>
        <member name="M:XFrame.Core.AreaParser.Release">
            <summary>
            释放到池中
            </summary>
        </member>
        <member name="M:XFrame.Core.AreaParser.Equals(System.Object)">
            <summary>
            判断相等性
            </summary>
            <param name="obj">对比项</param>
            <returns>true表示相等</returns>
        </member>
        <member name="M:XFrame.Core.AreaParser.op_Equality(XFrame.Core.AreaParser,System.Object)">
            <summary>
            判断相等性
            </summary>
            <param name="src">域对象</param>
            <param name="tar">目标对象</param>
            <returns>true表示相等</returns>
        </member>
        <member name="M:XFrame.Core.AreaParser.op_Inequality(XFrame.Core.AreaParser,System.Object)">
            <summary>
            判断不等性
            </summary>
            <param name="src">域对象</param>
            <param name="tar">目标对象</param>
            <returns>true表示不相等</returns>
        </member>
        <member name="M:XFrame.Core.AreaParser.op_Implicit(XFrame.Core.AreaParser)~System.String">
            <summary>
            输出原始字符串
            </summary>
            <param name="parser">域对象</param>
        </member>
        <member name="M:XFrame.Core.AreaParser.op_Implicit(System.String)~XFrame.Core.AreaParser">
            <summary>
            将原始字符串转为域
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:XFrame.Core.ArrayParser`1">
            <summary>
            数组解析器
            </summary>
            <typeparam name="T">持有对象类型</typeparam>
        </member>
        <member name="F:XFrame.Core.ArrayParser`1.SPLIT">
            <summary>
            默认元素分隔符
            </summary>
        </member>
        <member name="P:XFrame.Core.ArrayParser`1.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="P:XFrame.Core.ArrayParser`1.Empty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:XFrame.Core.ArrayParser`1.Value">
            <summary>
            获取元素列表
            </summary>
        </member>
        <member name="P:XFrame.Core.ArrayParser`1.MarkName">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Core.ArrayParser`1.Split">
            <summary>
            分割符
            </summary>
        </member>
        <member name="M:XFrame.Core.ArrayParser`1.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:XFrame.Core.ArrayParser`1.#ctor(System.Char)">
            <summary>
            构造器
            </summary>
            <param name="splitchar">分隔符</param>
        </member>
        <member name="M:XFrame.Core.ArrayParser`1.Release">
            <summary>
            释放到池中
            </summary>
        </member>
        <member name="M:XFrame.Core.ArrayParser`1.Parse(System.String)">
            <summary>
            解析
            </summary>
            <param name="pattern">文本</param>
            <returns>解析的元素列表</returns>
        </member>
        <member name="M:XFrame.Core.ArrayParser`1.IndexOf(System.Object)">
            <summary>
            获取值的下标
            </summary>
            <param name="value">待检查的值</param>
            <returns>下标</returns>
        </member>
        <member name="M:XFrame.Core.ArrayParser`1.Has(System.Object)">
            <summary>
            判断是否存在值
            </summary>
            <param name="value">待检查的值</param>
            <returns>true表示存在</returns>
        </member>
        <member name="M:XFrame.Core.ArrayParser`1.Get(System.Int32)">
            <summary>
            通过下标获取值
            </summary>
            <param name="index">下标</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Core.ArrayParser`1.IndexOf(System.Object,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            获取值下标
            </summary>
            <param name="value">待检查的值</param>
            <param name="action">判断函数</param>
            <returns>下标</returns>
        </member>
        <member name="M:XFrame.Core.ArrayParser`1.Has(System.Object,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            是否包含某个值
            </summary>
            <param name="value">待检查的值</param>
            <param name="action">判断函数</param>
            <returns>true为包含</returns>
        </member>
        <member name="M:XFrame.Core.ArrayParser`1.ToString">
            <summary>
            原始值
            </summary>
            <returns>原始值</returns>
        </member>
        <member name="M:XFrame.Core.ArrayParser`1.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns>哈希值</returns>
        </member>
        <member name="M:XFrame.Core.ArrayParser`1.Equals(System.Object)">
            <summary>
            判断两个值是否相等
            </summary>
            <param name="obj">对比值</param>
            <returns>true表示相等</returns>
        </member>
        <member name="T:XFrame.Core.BoolParser">
            <summary>
            布尔值解析器
            </summary>
        </member>
        <member name="P:XFrame.Core.BoolParser.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:XFrame.Core.BoolParser.LogLv">
            <summary>
            Log级别
            </summary>
        </member>
        <member name="P:XFrame.Core.BoolParser.MarkName">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.BoolParser.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.BoolParser.TryParse(System.String,System.Boolean@)">
            <summary>
            尝试解析布尔值
            </summary>
            <param name="pattern">文本值</param>
            <param name="value">布尔值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:XFrame.Core.BoolParser.Release">
            <summary>
            释放到池中
            </summary>
        </member>
        <member name="M:XFrame.Core.BoolParser.ToString">
            <summary>
            原始值
            </summary>
            <returns>原始值</returns>
        </member>
        <member name="M:XFrame.Core.BoolParser.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns>哈希值</returns>
        </member>
        <member name="M:XFrame.Core.BoolParser.Equals(System.Object)">
            <summary>
            检查两个值是否相等
            </summary>
            <param name="obj">待检查的值</param>
            <returns>true表示相等</returns>
        </member>
        <member name="M:XFrame.Core.BoolParser.op_Equality(XFrame.Core.BoolParser,System.Object)">
            <summary>
            检查两个值是否相等
            </summary>
            <param name="src">解析器</param>
            <param name="tar">待比较的值</param>
            <returns>true表示相等</returns>
        </member>
        <member name="M:XFrame.Core.BoolParser.op_Inequality(XFrame.Core.BoolParser,System.Object)">
            <summary>
            检查两个值是否不相等
            </summary>
            <param name="src">解析器</param>
            <param name="tar">待比较的值</param>
            <returns>true表示不相等</returns>
        </member>
        <member name="M:XFrame.Core.BoolParser.op_Implicit(XFrame.Core.BoolParser)~System.Boolean">
            <summary>
            返回解析器的布尔值
            </summary>
            <param name="parser">解析器</param>
        </member>
        <member name="M:XFrame.Core.BoolParser.op_Implicit(System.Boolean)~XFrame.Core.BoolParser">
            <summary>
            将布尔值转换为解析器
            </summary>
            <param name="value">布尔值</param>
        </member>
        <member name="T:XFrame.Core.EnumParser`1">
            <summary>
            枚举解析器
            </summary>
            <typeparam name="T">枚举类型</typeparam>
        </member>
        <member name="P:XFrame.Core.EnumParser`1.Value">
            <summary>
            转换的值
            </summary>
        </member>
        <member name="P:XFrame.Core.EnumParser`1.LogLv">
            <summary>
            Log等级
            </summary>
        </member>
        <member name="P:XFrame.Core.EnumParser`1.MarkName">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.EnumParser`1.Parse(System.String)">
            <summary>
            解析值
            </summary>
            <param name="pattern">文本</param>
            <returns>解析到的值</returns>
        </member>
        <member name="M:XFrame.Core.EnumParser`1.Release">
            <summary>
            释放到池中s
            </summary>
        </member>
        <member name="M:XFrame.Core.EnumParser`1.ToString">
            <summary>
            返回字符串形式
            </summary>
            <returns>枚举字符串</returns>
        </member>
        <member name="M:XFrame.Core.EnumParser`1.GetHashCode">
            <summary>
            获取枚举哈希值
            </summary>
            <returns>哈希值</returns>
        </member>
        <member name="M:XFrame.Core.EnumParser`1.Equals(System.Object)">
            <summary>
            检查两个值是否相等
            </summary>
            <param name="obj">对比值</param>
            <returns>true表示相等</returns>
        </member>
        <member name="M:XFrame.Core.EnumParser`1.op_Equality(XFrame.Core.EnumParser{`0},System.Object)">
            <summary>
            检查两个值是否相等
            </summary>
            <param name="src">枚举解析器</param>
            <param name="tar">对比值</param>
            <returns>true表示相等</returns>
        </member>
        <member name="M:XFrame.Core.EnumParser`1.op_Inequality(XFrame.Core.EnumParser{`0},System.Object)">
            <summary>
            检查两个值是否不相等
            </summary>
            <param name="src"></param>
            <param name="tar"></param>
            <returns>true表示不相等</returns>
        </member>
        <member name="M:XFrame.Core.EnumParser`1.op_Implicit(`0)~XFrame.Core.EnumParser{`0}">
            <summary>
            将枚举转换为解析器
            </summary>
            <param name="value">枚举值</param>
        </member>
        <member name="M:XFrame.Core.EnumParser`1.op_Implicit(XFrame.Core.EnumParser{`0})~`0">
            <summary>
            返回枚举解析器的值
            </summary>
            <param name="value">枚举值</param>
        </member>
        <member name="T:XFrame.Core.FloatParser">
            <summary>
            浮点值解析器
            </summary>
        </member>
        <member name="P:XFrame.Core.FloatParser.Value">
            <summary>
            解析到的值
            </summary>
        </member>
        <member name="P:XFrame.Core.FloatParser.LogLv">
            <summary>
            Log等级
            </summary>
        </member>
        <member name="P:XFrame.Core.FloatParser.MarkName">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.FloatParser.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.FloatParser.TryParse(System.String,System.Single@)">
            <summary>
            尝试解析浮点值
            </summary>
            <param name="pattern">待解析文本</param>
            <param name="value">转换到的浮点值</param>
            <returns>true表示解析成功</returns>
        </member>
        <member name="M:XFrame.Core.FloatParser.ToString">
            <summary>
            返回浮点值字符串值
            </summary>
            <returns>字符串值</returns>
        </member>
        <member name="M:XFrame.Core.FloatParser.GetHashCode">
            <summary>
            获取浮点值哈希值
            </summary>
            <returns>哈希值</returns>
        </member>
        <member name="M:XFrame.Core.FloatParser.Equals(System.Object)">
            <summary>
            检查两个值是否相等
            </summary>
            <param name="obj">对比值</param>
            <returns>true表示相等</returns>
        </member>
        <member name="M:XFrame.Core.FloatParser.Release">
            <summary>
            释放到池中
            </summary>
        </member>
        <member name="M:XFrame.Core.FloatParser.op_Equality(XFrame.Core.FloatParser,System.Object)">
            <summary>
            检查连个值是否相等
            </summary>
            <param name="src">浮点解析器</param>
            <param name="tar">对比值</param>
            <returns>true表示相等</returns>
        </member>
        <member name="M:XFrame.Core.FloatParser.op_Inequality(XFrame.Core.FloatParser,System.Object)">
            <summary>
            检查连个值是否不相等
            </summary>
            <param name="src">浮点解析器</param>
            <param name="tar">对比值</param>
            <returns>true表示不相等</returns>
        </member>
        <member name="M:XFrame.Core.FloatParser.op_Implicit(XFrame.Core.FloatParser)~System.Single">
            <summary>
            返回解析器的浮点值
            </summary>
            <param name="parser">浮点值</param>
        </member>
        <member name="M:XFrame.Core.FloatParser.op_Implicit(System.Single)~XFrame.Core.FloatParser">
            <summary>
            将浮点值转换为解析器
            </summary>
            <param name="value">浮点值</param>
        </member>
        <member name="T:XFrame.Core.IntOrHashParser">
            <summary>
            整形或哈希值解析器
            <para>
            当解析整形成功时结果为整形，失败时返回字符串哈希值
            </para>
            </summary>
        </member>
        <member name="M:XFrame.Core.IntOrHashParser.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.IntOrHashParser.Equals(System.Object)">
            <summary>
            检查两个值是否相等
            </summary>
            <param name="obj">对比值</param>
            <returns>true表示相等</returns>
        </member>
        <member name="M:XFrame.Core.IntOrHashParser.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns>哈希值</returns>
        </member>
        <member name="M:XFrame.Core.IntOrHashParser.ToString">
            <summary>
            返回字符串形式
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:XFrame.Core.IntOrHashParser.op_Equality(XFrame.Core.IntOrHashParser,System.Object)">
            <summary>
            检查两个整形值是否相等
            </summary>
            <param name="src">解析器</param>
            <param name="tar">目标值</param>
            <returns>true表示相等</returns>
        </member>
        <member name="M:XFrame.Core.IntOrHashParser.op_Inequality(XFrame.Core.IntOrHashParser,System.Object)">
            <summary>
            检查两个整形值是否不相等
            </summary>
            <param name="src">解析器</param>
            <param name="tar">目标值</param>
            <returns>true表示不相等</returns>
        </member>
        <member name="M:XFrame.Core.IntOrHashParser.op_Implicit(XFrame.Core.IntOrHashParser)~System.Int32">
            <summary>
            返回解析到的值
            </summary>
            <param name="parser">整型值</param>
        </member>
        <member name="M:XFrame.Core.IntOrHashParser.op_Implicit(System.Int32)~XFrame.Core.IntOrHashParser">
            <summary>
            将整形值转换为解析器
            </summary>
            <param name="value">整形值</param>
        </member>
        <member name="M:XFrame.Core.IntOrHashParser.op_Implicit(XFrame.Core.IntOrHashParser)~System.String">
            <summary>
            返回解析器值的字符串形式
            </summary>
            <param name="parser">值的字符串形式</param>
        </member>
        <member name="M:XFrame.Core.IntOrHashParser.op_Implicit(System.String)~XFrame.Core.IntOrHashParser">
            <summary>
            解析字符串并返回解析器
            </summary>
            <param name="value">解析器</param>
        </member>
        <member name="T:XFrame.Core.IParser">
            <summary>
            解析器
            </summary>
        </member>
        <member name="P:XFrame.Core.IParser.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XFrame.Core.IParser.Parse(System.String)">
            <summary>
            解析
            </summary>
            <param name="pattern">源数据</param>
            <returns>结果</returns>
        </member>
        <member name="T:XFrame.Core.IParser`1">
            <summary>
            解析器
            </summary>
        </member>
        <member name="P:XFrame.Core.IParser`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XFrame.Core.IParser`1.Parse(System.String)">
            <summary>
            解析
            </summary>
            <param name="pattern">源数据</param>
            <returns>结果</returns>
        </member>
        <member name="T:XFrame.Core.XCore">
            <summary>
            核心
            </summary>
        </member>
        <member name="M:XFrame.Core.XCore.Init(XFrame.Core.XDomain)">
            <summary>
            初始化核心
            </summary>
        </member>
        <member name="M:XFrame.Core.XCore.AddHandle(System.Type,XFrame.Core.IModuleHandler)">
            <summary>
            添加模块处理器
            </summary>
            <param name="handleType">处理目标类型</param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:XFrame.Core.XCore.Trigger(System.Type,System.Object)">
            <summary>
            触发模块处理器
            </summary>
            <param name="handlerType">处理目标类型</param>
            <param name="data">参数</param>
        </member>
        <member name="M:XFrame.Core.XCore.Start">
            <summary>
            启动核心
            </summary>
        </member>
        <member name="M:XFrame.Core.XCore.Destroy">
            <summary>
            销毁核心
            </summary>
        </member>
        <member name="M:XFrame.Core.XCore.Register(XFrame.Core.IModule,System.Int32,System.Object)">
            <summary>
            注册模块
            </summary>
            <param name="module">模块</param>
            <param name="moduleId">模块Id</param>
            <param name="userData">模块初始化参数</param>
            <returns></returns>
        </member>
        <member name="M:XFrame.Core.XCore.Register``1(System.Int32)">
            <summary>
            注册模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.Register(System.Type,System.Int32)">
            <summary>
            注册模块
            </summary>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.Register(System.Type,System.Int32,System.Object)">
            <summary>
            注册模块
            </summary>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
            <param name="userData">模块初始化参数</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.Register``1(System.Int32,System.Object)">
            <summary>
            注册模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <param name="moduleId">模块Id</param>
            <param name="userData">模块初始化数据</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.GetModule``1(System.Int32)">
            <summary>
            获取模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <param name="moduleId">模块Id</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.GetModule(System.Type,System.Int32)">
            <summary>
            获取模块
            </summary>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.HasModule(System.Type,System.Int32)">
            <summary>
            检查是否存在模块
            </summary>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
            <returns></returns>
        </member>
        <member name="M:XFrame.Core.XCore.AddModule(System.Type,System.Int32,System.Object)">
            <summary>
            添加模块
            </summary>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
            <param name="userData">模块初始化参数</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.RemoveModule(XFrame.Core.IModule)">
            <summary>
            移除模块
            </summary>
            <param name="module">模块</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:XFrame.Core.XCore.RemoveModule``1(System.Int32)">
            <summary>
            移除模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <param name="moduleId">模块Id</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:XFrame.Core.XCore.RemoveModule(System.Type,System.Int32)">
            <summary>
            移除模块
            </summary>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:XFrame.Core.XCore.RegisterHelper``2">
            <summary>
            注册模块辅助器
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
            <typeparam name="ModuleT">模块类型</typeparam>
            <returns>辅助器实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.RegisterHelper(System.Type,System.Type)">
            <summary>
            注册模块辅助器
            </summary>
            <param name="helperType">辅助器类型</param>
            <param name="mType">模块类型</param>
            <returns>辅助器实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.GetHelpers``1">
            <summary>
            获取模块辅助器
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
            <returns>辅助器实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.GetHelpers(System.Type)">
            <summary>
            获取所有处理目标类型的辅助器
            </summary>
            <param name="mType">目标类型</param>
            <returns>辅助器列表</returns>
        </member>
        <member name="M:XFrame.Core.XCore.GetMainHelper``1">
            <summary>
            获取模块主辅助器(第一个注册)
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
            <returns>辅助器实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.GetMainHelper(System.Type)">
            <summary>
            获取主辅助器（第一个添加）
            </summary>
            <param name="mType">处理目标类型</param>
            <returns></returns>
        </member>
        <member name="M:XFrame.Core.XCore.AddModuleFromSystem(System.Type,System.Int32,System.Object)">
            <summary>
            添加模块(从系统类<see cref="T:System.Activator"/>初始化)
            </summary>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
            <param name="data">初始化参数</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.Create(XFrame.Core.XDomain)">
            <summary>
            创建一个核心
            </summary>
            <param name="domain">域</param>
            <returns>核心实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.Create(XFrame.Core.XDomain,System.Type,System.Type[])">
            <summary>
            创建一个核心
            </summary>
            <param name="domain">域</param>
            <param name="coreType">添加的核心模块类型</param>
            <param name="modules">其他类型模块列表</param>
            <returns>核心模块</returns>
        </member>
        <member name="M:XFrame.Core.XCore.Create(XFrame.Core.XDomain,System.Type,System.Type[],System.Object[])">
            <summary>
            创建一个核心
            </summary>
            <param name="domain">域</param>
            <param name="coreType">添加的核心模块类型</param>
            <param name="modules">其他类型模块列表</param>
            <param name="datas">初始化参数</param>
            <returns>核心模块</returns>
        </member>
        <member name="T:XFrame.Core.XDomain">
            <summary>
            域 (包含多个核心)
            </summary>
        </member>
        <member name="P:XFrame.Core.XDomain.Base">
            <summary>
            基础核心
            </summary>
        </member>
        <member name="P:XFrame.Core.XDomain.TypeModule">
            <summary>
            类型模块
            </summary>
        </member>
        <member name="P:XFrame.Core.XDomain.Item(System.Int32)">
            <summary>
            检索核心
            </summary>
            <param name="index">下标</param>
            <returns>核心</returns>
        </member>
        <member name="M:XFrame.Core.XDomain.#ctor(System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="capacity">容量</param>
        </member>
        <member name="M:XFrame.Core.XDomain.SetTypeModule(System.Type)">
            <summary>
            设置类型模块
            </summary>
            <param name="type">类型模块</param>
        </member>
        <member name="M:XFrame.Core.XDomain.AddModule(System.Int32,System.Type,System.Int32,System.Object)">
            <summary>
            添加模块
            </summary>
            <param name="id">核心Id</param>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
            <param name="userData">模块初始化参数</param>
        </member>
        <member name="M:XFrame.Core.XDomain.AddHandle(System.Type,XFrame.Core.IModuleHandler)">
            <summary>
            添加模块处理器
            </summary>
            <param name="handleType">处理目标类型</param>
            <param name="handler">模块处理器</param>
        </member>
        <member name="M:XFrame.Core.XDomain.RemoveModule(System.Type,System.Int32)">
            <summary>
            移除模块
            </summary>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
        </member>
        <member name="M:XFrame.Core.XDomain.RemoveModule(XFrame.Core.IModule)">
            <summary>
            移除模块
            </summary>
            <param name="module">模块</param>
        </member>
        <member name="M:XFrame.Core.XDomain.GetModule(System.Type,System.Int32)">
            <summary>
            获取模块
            </summary>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XDomain.GetModule``1(System.Int32)">
            <summary>
            获取模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <param name="moduleId">模块Id</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XDomain.Destroy">
            <summary>
            销毁
            </summary>
        </member>
        <member name="T:XFrame.Collections.Csv`1">
            <summary>
            CSV
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.Csv`1.#ctor(System.Int32)">
            <summary>
            构造一个 <paramref name="column"/> 列的Csv
            </summary>
            <param name="column">列数</param>
        </member>
        <member name="M:XFrame.Collections.Csv`1.#ctor(System.String,XFrame.Core.IParser{`0})">
            <summary>
            通过 <paramref name="content"/> 构造Csv
            </summary>
            <param name="content">Csv文本内容</param>
            <param name="parser">解析器</param>
        </member>
        <member name="P:XFrame.Collections.Csv`1.Row">
            <summary>
            行
            </summary>
        </member>
        <member name="P:XFrame.Collections.Csv`1.Column">
            <summary>
            列
            </summary>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Add">
            <summary>
            在尾部添加一行
            </summary>
            <returns>行数据</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Insert(System.Int32)">
            <summary>
            在第 <paramref name="row"/> 行之前插入一行
            </summary>
            <param name="row">行</param>
            <returns>行数据</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Insert(System.Int32,XFrame.Collections.Csv{`0}.Line)">
            <summary>
            在第 <paramref name="row"/> 行之前插入 <paramref name="line"/> 数据行
            </summary>
            <param name="row">行</param>
            <param name="line">行数据</param>
            <returns>行数据</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Delete(System.Int32)">
            <summary>
            删除第 <paramref name="row"/> 行数据
            </summary>
            <param name="row">行</param>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Get(System.Int32)">
            <summary>
            获取第 <paramref name="row"/> 行数据
            </summary>
            <param name="row">行</param>
            <returns>行数据</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Get(System.Int32,System.Int32)">
            <summary>
            获取第 <paramref name="row"/> 行第 <paramref name="column"/> 列的数据
            </summary>
            <param name="row">行</param>
            <param name="column">列</param>
            <returns>数据</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.SetIt(XFrame.Collections.XItType)">
            <summary>
            设置迭代器类型
            </summary>
            <param name="type">迭代器类型</param>
        </member>
        <member name="M:XFrame.Collections.Csv`1.ToString">
            <summary>
            获取Csv数据字符串形式，以换行符分隔
            </summary>
            <returns>构造字符串</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XFrame.Collections.Csv`1.op_Implicit(XFrame.Collections.Csv{`0})~System.String">
            <summary>
            返回csv字符串形式
            </summary>
            <param name="csv">csv实例</param>
            <returns>字符串形式</returns>
        </member>
        <member name="T:XFrame.Collections.Csv`1.Line">
            <summary>
            行数据类
            </summary>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Line.#ctor(System.Int32)">
            <summary>
            构造一个 <paramref name="count"/> 列的行数据
            </summary>
            <param name="count">列数</param>
        </member>
        <member name="P:XFrame.Collections.Csv`1.Line.Count">
            <summary>
            列数
            </summary>
        </member>
        <member name="P:XFrame.Collections.Csv`1.Line.Item(System.Int32)">
            <summary>
            获取或设置数据项
            </summary>
            <param name="index">索引</param>
            <returns>数据</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Line.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Line.SetIt(XFrame.Collections.XItType)">
            <summary>
            设置迭代器类型
            </summary>
            <param name="type">迭代器类型</param>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Line.ToString">
            <summary>
            获取Csv行数据字符串形式，以逗号分隔
            </summary>
            <returns>构造字符串</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Line.op_Implicit(XFrame.Collections.Csv{`0}.Line)~System.String">
            <summary>
            返回csv行数据字符串形式
            </summary>
            <param name="line">csv行实例</param>
            <returns>字符串形式</returns>
        </member>
        <member name="T:XFrame.Collections.ListExt">
            <summary>
            列表扩展类
            </summary>
        </member>
        <member name="T:XFrame.Collections.ListExt.ForwardIt`1">
            <summary>
            前向迭代器
            </summary>
            <typeparam name="T">持有数据类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.ListExt.ForwardIt`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            构造函数
            </summary>
            <param name="list">目标List</param>
        </member>
        <member name="P:XFrame.Collections.ListExt.ForwardIt`1.Current">
            <summary>
            当前值
            </summary>
        </member>
        <member name="M:XFrame.Collections.ListExt.ForwardIt`1.MoveNext">
            <summary>
            移动至下一个
            </summary>
            <returns>是否还有元素</returns>
        </member>
        <member name="M:XFrame.Collections.ListExt.ForwardIt`1.Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="M:XFrame.Collections.ListExt.ForwardIt`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:XFrame.Collections.ListExt.BackwardIt`1">
            <summary>
            后向迭代器
            </summary>
            <typeparam name="T">数据持有类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.ListExt.BackwardIt`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            构造器
            </summary>
            <param name="list">目标List</param>
        </member>
        <member name="P:XFrame.Collections.ListExt.BackwardIt`1.Current">
            <summary>
            当前值
            </summary>
        </member>
        <member name="M:XFrame.Collections.ListExt.BackwardIt`1.MoveNext">
            <summary>
            下一个
            </summary>
            <returns>是否还有元素</returns>
        </member>
        <member name="M:XFrame.Collections.ListExt.BackwardIt`1.Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="M:XFrame.Collections.ListExt.BackwardIt`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:XFrame.Collections.XList`1">
            <summary>
            带事件的列表
            </summary>
            <typeparam name="T">持有值类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.XList`1.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:XFrame.Collections.XList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.Replace(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Collections.XList`1.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Collections.XList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Collections.XList`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Collections.XList`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Collections.XList`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Collections.XList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Collections.XItType">
            <summary>
            迭代类型
            </summary>
        </member>
        <member name="F:XFrame.Collections.XItType.Forward">
            <summary>
            前向迭代
            </summary>
        </member>
        <member name="F:XFrame.Collections.XItType.Backward">
            <summary>
            后向迭代
            </summary>
        </member>
        <member name="T:XFrame.Collections.IXEnumerable`1">
            <summary>
            可迭代类型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XFrame.Collections.IXEnumerable`1.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:XFrame.Collections.IXEnumerable`1.SetIt(XFrame.Collections.XItType)">
            <summary>
            设置迭代类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:XFrame.Collections.IXItem">
            <summary>
            XCollection集合元素
            </summary>
        </member>
        <member name="P:XFrame.Collections.IXItem.Id">
            <summary>
            元素Id
            </summary>
        </member>
        <member name="T:XFrame.Collections.SingleValueEnumerator`1">
            <summary>
            单值迭代器
            </summary>
            <typeparam name="T">持有值</typeparam>
        </member>
        <member name="P:XFrame.Collections.SingleValueEnumerator`1.Current">
            <summary>
            当前值
            </summary>
        </member>
        <member name="M:XFrame.Collections.SingleValueEnumerator`1.#ctor(`0)">
            <summary>
            构造器
            </summary>
            <param name="value">持有值</param>
        </member>
        <member name="M:XFrame.Collections.SingleValueEnumerator`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XFrame.Collections.SingleValueEnumerator`1.MoveNext">
            <summary>
            下一个
            </summary>
            <returns>是否还有下一个</returns>
        </member>
        <member name="M:XFrame.Collections.SingleValueEnumerator`1.Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="T:XFrame.Collections.XCollection`1">
            <summary>
            XItem的集合, 可以通过Id快速读取元素
            </summary>
            <typeparam name="T">持有的数据类型</typeparam>
        </member>
        <member name="F:XFrame.Collections.XCollection`1.DEFAULT_CAPACITY">
            <summary>
            默认容量
            </summary>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.#ctor(XFrame.Core.XDomain,System.Int32)">
            <summary>
            构造集合
            </summary>
        </member>
        <member name="P:XFrame.Collections.XCollection`1.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Add(`0)">
            <summary>
            添加一个元素 时间复杂度O(1)
            </summary>
            <param name="entity">要添加的元素</param>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Remove(`0)">
            <summary>
            移除一个元素 时间复杂度O(1)
            </summary>
            <param name="item">要移除的元素</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Clear">
            <summary>
            清空集合
            </summary>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Contains(`0)">
            <summary>
            是否包含某项元素 时间复杂度O(1)
            </summary>
            <param name="item">检查的元素</param>
            <returns>true表是包含</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Get``1">
            <summary>
            获取给定类型的第一个添加到集合中的元素
            </summary>
            <typeparam name="TEntity">类型</typeparam>
            <returns>获取到的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Get(System.Type)">
            <summary>
            获取给定类型的第一个添加到集合中的元素
            </summary>
            <param name="elementType">类型</param>
            <returns>获取到的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Get``1(System.Int32)">
            <summary>
            获取指定id和给定类型的元素 
            </summary>
            <typeparam name="TEntity">需要获取的类型</typeparam>
            <param name="entityId">元素Id</param>
            <returns>获取到的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Get(System.Type,System.Int32)">
            <summary>
            获取指定id和给定类型的元素 
            </summary>
            <param name="elementType">需要获取的类型</param>
            <param name="entityId">元素Id</param>
            <returns>获取到的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.SetIt(XFrame.Collections.XItType)">
            <summary>
            设置迭代器类型
            </summary>
            <param name="type">迭代器类型</param>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="P:XFrame.Collections.XCollection`1.Enumerator.Current">
            <summary>
            当前迭代到的元素
            </summary>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Enumerator.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Enumerator.MoveNext">
            <summary>
            迭代下一个
            </summary>
            <returns>是否还有下一个元素</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Enumerator.Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="T:XFrame.Collections.XLinkList`1">
            <summary>
            双向链表
            </summary>
            <typeparam name="T">持有类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.#ctor">
            <summary>
            构造一个双向链表, 不使用对象池
            </summary>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.#ctor(System.Boolean)">
            <summary>
            构造一个双向链表
            </summary>
            <param name="usePool">是否使用对象池</param>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.AddLast(`0)">
            <summary>
            添加元素到尾部
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="P:XFrame.Collections.XLinkList`1.First">
            <summary>
            首个元素
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLinkList`1.Last">
            <summary>
            最后一个元素
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLinkList`1.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLinkList`1.Empty">
            <summary>
            列表是否为空
            </summary>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.AddLast(XFrame.Collections.XLinkNode{`0})">
            <summary>
            在列表尾添加一个节点
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.RemoveFirst">
            <summary>
            移除第一个元素
            </summary>
            <returns>移除的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.RemoveFirstNode">
            <summary>
            移除第一个节点
            </summary>
            <returns>移除的节点</returns>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.AddFirst(`0)">
            <summary>
            在表头添加一个元素
            </summary>
            <param name="data">元素</param>
            <returns>节点</returns>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.AddFirst(XFrame.Collections.XLinkNode{`0})">
            <summary>
            在表头添加一个节点
            </summary>
            <param name="node">添加的节点</param>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.RemoveLast">
            <summary>
            移除最后一个元素
            </summary>
            <returns>移除的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.RemoveLastNode">
            <summary>
            移除最后一个节点
            </summary>
            <returns>移除的节点</returns>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.Remove(`0)">
            <summary>
            移除元素
            </summary>
            <param name="value">元素</param>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.Clear">
            <summary>
            清除元素
            </summary>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.SetIt(XFrame.Collections.XItType)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Collections.XLinkList`1.MarkName">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Collections.XLinkNode`1">
            <summary>
            双向链表节点
            </summary>
            <typeparam name="T">存储数据类型</typeparam>
        </member>
        <member name="P:XFrame.Collections.XLinkNode`1.Pre">
            <summary>
            前一个节点，如果当前是头节点，则为null
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLinkNode`1.Next">
            <summary>
            后一个节点，如果当前是尾节点，则为null
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLinkNode`1.Value">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:XFrame.Collections.XLinkNode`1.Delete">
            <summary>
            删除当前节点，并释放节点到池中
            </summary>
        </member>
        <member name="M:XFrame.Collections.XLinkNode`1.AddBefore(`0)">
            <summary>
            在此节点之前添加一个元素
            </summary>
            <param name="value">待添加的元素</param>
            <returns>元素节点</returns>
        </member>
        <member name="M:XFrame.Collections.XLinkNode`1.AddAfter(`0)">
            <summary>
            在此节点之后添加一个元素
            </summary>
            <param name="value">元素</param>
            <returns>元素节点</returns>
        </member>
        <member name="P:XFrame.Collections.XLinkNode`1.MarkName">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Collections.XLoopQueue`1">
            <summary>
            循环队列
            </summary>
            <typeparam name="T">持有的数据类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.#ctor(System.Int32)">
            <summary>
            循环队列
            </summary>
            <param name="capacity">队列容量</param>
        </member>
        <member name="P:XFrame.Collections.XLoopQueue`1.Capacity">
            <summary>
            容量
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLoopQueue`1.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLoopQueue`1.Empty">
            <summary>
            队列是否空
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLoopQueue`1.Full">
            <summary>
            队列是否满
            </summary>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.AddFirst(`0)">
            <summary>
            从队列前端添加一个元素
            如果队列满，则报告错误
            </summary>
            <param name="element">要添加的元素</param>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.RemoveFirst">
            <summary>
            从队列前端移除一个元素
            如果队列空，则报告错误
            </summary>
            <returns>移除掉的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.GetFirst">
            <summary>
            获取队列前端的第一个元素
            </summary>
            <returns>获取到的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.AddLast(`0)">
            <summary>
            从队列后端添加一个元素
            如果队列满，则报告错误
            </summary>
            <param name="element">要添加的元素</param>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.RemoveLast">
            <summary>
            从队列后端移除一个元素
            如果队列空，则报告错误
            </summary>
            <returns>移除掉的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.GetLast">
            <summary>
            获取队列后端的第一个元素
            </summary>
            <returns>获取到的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.SetIt(XFrame.Collections.XItType)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Collections.XNode`1">
            <summary>
            节点数据类型
            </summary>
            <typeparam name="T">持有类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.XNode`1.#ctor">
            <summary>
            构造一个节点
            </summary>
        </member>
        <member name="P:XFrame.Collections.XNode`1.Value">
            <summary>
            持有数据
            </summary>
        </member>
        <member name="P:XFrame.Collections.XNode`1.Level">
            <summary>
            处于层级
            </summary>
        </member>
        <member name="M:XFrame.Collections.XNode`1.Add(`0)">
            <summary>
            添加一个孩子节点
            </summary>
            <param name="value">数据</param>
            <returns>节点</returns>
        </member>
        <member name="M:XFrame.Collections.XNode`1.Add(System.Func{XFrame.Collections.XNode{`0},System.Boolean},`0)">
            <summary>
            在孩子节点中匹配满足条件 <paramref name="condition"/> 的节点并添加节点
            </summary>
            <param name="condition">需要满足的条件</param>
            <param name="value">数据</param>
            <returns>节点</returns>
        </member>
        <member name="M:XFrame.Collections.XNode`1.Get(System.Func{XFrame.Collections.XNode{`0},System.Boolean})">
            <summary>
            获取一个满足 <paramref name="condition"/> 条件的节点
            </summary>
            <param name="condition">条件</param>
            <returns>节点</returns>
        </member>
        <member name="M:XFrame.Collections.XNode`1.ForEachAll(System.Func{XFrame.Collections.XNode{`0},System.Boolean})">
            <summary>
            递归地迭代所有孩子节点
            </summary>
            <param name="callback">处理委托</param>
        </member>
        <member name="M:XFrame.Collections.XNode`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XNode`1.SetIt(XFrame.Collections.XItType)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Collections.XTypeAttribute">
            <summary>
            映射到类型
            </summary>
        </member>
        <member name="P:XFrame.Collections.XTypeAttribute.Type">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="M:XFrame.Collections.XTypeAttribute.#ctor(System.Type)">
            <summary>
            构造器
            </summary>
            <param name="type">目标类型</param>
        </member>
        <member name="T:XFrame.Modules.Archives.ArchiveAttribute">
            <summary>
            存档标记
            </summary>
        </member>
        <member name="P:XFrame.Modules.Archives.ArchiveAttribute.Suffix">
            <summary>
            后缀，包含'.'
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveAttribute.#ctor(System.String)">
            <summary>
            标记一种存档类型
            </summary>
            <param name="suffix">存档后缀</param>
        </member>
        <member name="T:XFrame.Modules.Archives.ArchiveModule">
            <summary>
            存档模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.GetOrNew``1(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.Delete(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.Delete(XFrame.Modules.Archives.IArchive)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.DeleteAll">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Archives.DataArchive">
            <summary>
            二进制存档
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.Save">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.Delete">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Archives.DataArchive.Name">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.Write(System.String,System.Byte[])">
            <summary>
            向存档写入字节数据
            </summary>
            <param name="path">处于存档中的路径</param>
            <param name="data">需要写入的数据</param>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.Read(System.String)">
            <summary>
            读取字节数据
            </summary>
            <param name="path">处于存档中的路径</param>
            <returns>读取到的数据</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.ToBytes">
            <summary>
            获取存档二进制字节数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.ExportDisk(System.String)">
            <summary>
            将存档中的所有数据导出到指定路径
            </summary>
            <param name="toPath"></param>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.ImportDisk(System.String)">
            <summary>
            将指定路径的文件导入到存档中
            </summary>
            <param name="fromPath"></param>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.FromBytes(System.Byte[])">
            <summary>
            从给定字节数据构建存档
            </summary>
            <param name="data">存档字节数据</param>
            <returns>构建的存档</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.LoadPath(System.String,System.String)">
            <summary>
            根据导入路径和导出路径构建存档
            </summary>
            <param name="fromPath">导入路径，存档会将给定路径中的所有文件导入进来</param>
            <param name="toPath">存档的导出路径</param>
            <returns>构建的存档</returns>
        </member>
        <member name="T:XFrame.Modules.Archives.CsvArchive">
            <summary>
            csv存档
            </summary>
        </member>
        <member name="P:XFrame.Modules.Archives.CsvArchive.Data">
            <summary>
            CSV数据
            </summary>
        </member>
        <member name="P:XFrame.Modules.Archives.CsvArchive.Name">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.CsvArchive.Delete">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.CsvArchive.Save">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Archives.IArchive">
            <summary>
            存档
            </summary>
        </member>
        <member name="P:XFrame.Modules.Archives.IArchive.Name">
            <summary>
            存档名
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchive.OnInit(XFrame.Modules.Archives.IArchiveModule,System.String,System.String,System.Object)">
            <summary>
            初始化生命周期
            </summary>
            <param name="module">存档所属模块</param>
            <param name="path">存储路径</param>
            <param name="name">存储名</param>
            <param name="data">用户参数</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchive.Save">
            <summary>
            保存存档
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchive.Delete">
            <summary>
            删除存档
            </summary>
        </member>
        <member name="T:XFrame.Modules.Archives.IArchiveModule">
            <summary>
            存档模块接口
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveModule.GetOrNew``1(System.String,System.Object)">
            <summary>
            获取或创建一个存档实例
            </summary>
            <typeparam name="T">存档类型</typeparam>
            <param name="name">存档名</param>
            <param name="param">参数</param>
            <returns>存档实例</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveModule.Delete(System.String)">
            <summary>
            删除一份存档
            </summary>
            <param name="name">存档名</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveModule.Delete(XFrame.Modules.Archives.IArchive)">
            <summary>
            删除一份存档
            </summary>
            <param name="archive">存档实例</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveModule.DeleteAll">
            <summary>
            删除所有存档 
            </summary>
        </member>
        <member name="T:XFrame.Modules.Archives.IArchiveUtilityHelper">
            <summary>
            存档模块辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveUtilityHelper.ReadAllBytes(System.String)">
            <summary>
            读取二进制数据
            </summary>
            <param name="path">路径</param>
            <returns>二进制数据</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveUtilityHelper.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            写入二进制数据
            </summary>
            <param name="path">路径</param>
            <param name="data">二进制数据</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveUtilityHelper.ReadAllText(System.String)">
            <summary>
            读取文本数据
            </summary>
            <param name="path">路径</param>
            <returns>文本</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveUtilityHelper.WriteAllText(System.String,System.String)">
            <summary>
            写入文本数据
            </summary>
            <param name="path">路径</param>
            <param name="data">文本</param>
        </member>
        <member name="T:XFrame.Modules.Archives.ISaveable">
            <summary>
            可保存的模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.ISaveable.Save">
            <summary>
            触发保存
            </summary>
        </member>
        <member name="T:XFrame.Modules.Archives.IJsonArchive">
            <summary>
            Json存档
            </summary>
        </member>
        <member name="P:XFrame.Modules.Archives.IJsonArchive.Name">
            <summary>
            存档名
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SetInt(System.String,System.Int32)">
            <summary>
            设置整数
            </summary>
            <param name="key">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SetLong(System.String,System.Int64)">
            <summary>
            设置长整型
            </summary>
            <param name="key">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetInt(System.String,System.Int32)">
            <summary>
            获取整数
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetLong(System.String,System.Int64)">
            <summary>
            获取长整型
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SetFloat(System.String,System.Single)">
            <summary>
            设置浮点值
            </summary>
            <param name="key">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SetDouble(System.String,System.Double)">
            <summary>
            设置双精度浮点值
            </summary>
            <param name="key">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetFloat(System.String,System.Single)">
            <summary>
            获取浮点值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetDouble(System.String,System.Single)">
            <summary>
            设置双精度浮点值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SetBool(System.String,System.Boolean)">
            <summary>
            设置布尔值
            </summary>
            <param name="key">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetBool(System.String,System.Boolean)">
            <summary>
            获取布尔值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.Set(System.String,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.Get``1(System.String,``0)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetOrNewObject(System.String)">
            <summary>
            获取或创建值对象
            </summary>
            <param name="key">键</param>
            <returns>值对象</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetOrNewArray(System.String)">
            <summary>
            获取或创建数组对象
            </summary>
            <param name="key">键</param>
            <returns>数组对象</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.Remove(System.String)">
            <summary>
            移除一个值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SpwanDataProvider(System.String)">
            <summary>
            创建一个Json存档并作为子节点
            </summary>
            <param name="name">存档名</param>
            <returns>存档</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SpwanDataProvider">
            <summary>
            创建一个Json存档并作为子节点
            </summary>
            <returns>存档</returns>
        </member>
        <member name="T:XFrame.Modules.Archives.JsonArchive">
            <summary>
            Json存档
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchive.Save">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchive.Delete">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchive.ClearData">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Archives.JsonArchiveBase">
            <summary>
            Json存档基类
            </summary>
        </member>
        <member name="F:XFrame.Modules.Archives.JsonArchiveBase.m_Root">
            <summary>
            根节点对象
            </summary>
        </member>
        <member name="F:XFrame.Modules.Archives.JsonArchiveBase.m_Module">
            <summary>
            所属存档模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Archives.JsonArchiveBase.Name">
            <summary>
            存档名
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetInt(System.String,System.Int32)">
            <summary>
            设置int值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetLong(System.String,System.Int64)">
            <summary>
            设置long值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetInt(System.String,System.Int32)">
            <summary>
            获取int值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>如果未设置过此键，则会返回0</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetLong(System.String,System.Int64)">
            <summary>
            获取long值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>如果未设置过此键，则会返回0</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetFloat(System.String,System.Single)">
            <summary>
            设置float值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetDouble(System.String,System.Double)">
            <summary>
            设置double值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetFloat(System.String,System.Single)">
            <summary>
            获取float值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>如果未设置过此键，则会返回0</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetDouble(System.String,System.Single)">
            <summary>
            获取double值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>如果未设置过此键，则会返回0</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetBool(System.String,System.Boolean)">
            <summary>
            设置bool值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetBool(System.String,System.Boolean)">
            <summary>
            获取bool值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>如果未设置过此键，则会返回false</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.Set(System.String,System.Object)">
            <summary>
            设置数据，推荐调用Get方法获取设置的值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <param name="v">此值将会被序列化并保存</param>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.Get``1(System.String,``0)">
            <summary>
            获取数据，推荐调用Set此类数据
            </summary>
            <typeparam name="T">数据类型，如果与Set设置的数据类型不匹配，可能导致出错</typeparam>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetOrNewObject(System.String)">
            <summary>
            获取(不存在时创建)一个JsonObject对象，即Json对象{}
            可以使用该对象直接设置键值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <returns></returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetOrNewArray(System.String)">
            <summary>
            获取(不存在时创建)一个JsonArray对象，即Json数组对象[]
            可以使用该对象直接设置数组数据
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <returns>获取到的JsonArray对象</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.HasData``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.HasData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetData``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetData``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetData``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SpwanDataProvider(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SpwanDataProvider">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.ClearData">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Caches.CacheObjectAttribute">
            <summary>
            Cache对象工厂
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.CacheObjectAttribute.Target">
            <summary>
            生产对象的类型
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.CacheObjectAttribute.CacheCount">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="M:XFrame.Modules.Caches.CacheObjectAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="targetType">对象类型</param>
            <param name="cacheCount">缓存数量</param>
        </member>
        <member name="T:XFrame.Modules.Caches.ICacheObject">
            <summary>
            可缓存的对象
            </summary>
        </member>
        <member name="T:XFrame.Modules.Caches.ICacheObjectFactory">
            <summary>
            缓存对象工厂接口
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.ICacheObjectFactory.Result">
            <summary>
            生产的对象
            </summary>
        </member>
        <member name="M:XFrame.Modules.Caches.ICacheObjectFactory.OnFactory">
            <summary>
            开始生产
            </summary>
        </member>
        <member name="M:XFrame.Modules.Caches.ICacheObjectFactory.OnFinish">
            <summary>
            生产完成
            </summary>
        </member>
        <member name="T:XFrame.Modules.Caches.XCache">
            <summary>
            缓存模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.XCache.Event">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.XCache.Collections">
            <summary>
            缓存对象集合
            </summary>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.OnStart">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.GetFactory``1">
            <summary>
            获取对象工厂
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns>工厂实例</returns>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.GetFactory(System.Type)">
            <summary>
            获取对象工厂
            </summary>
            <param name="type">对象类型</param>
            <returns>工厂实例</returns>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.Check``1">
            <summary>
            检查是否存在工厂
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns>true为存在</returns>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.Check(System.Type)">
            <summary>
            检查是否存在工厂
            </summary>
            <param name="type">对象类型</param>
            <returns>true为存在</returns>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.Require``1">
            <summary>
            请求一个对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns>对象实例</returns>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.Require(System.Type)">
            <summary>
            请求一个对象
            </summary>
            <param name="type">对象类型</param>
            <returns>对象实例</returns>
        </member>
        <member name="T:XFrame.Modules.Caches.XCache.ObjectCollection">
            <summary>
            缓存对象集合
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.XCache.ObjectCollection.Factory">
            <summary>
            生成工厂
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.XCache.ObjectCollection.TargetType">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.XCache.ObjectCollection.Count">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.XCache.ObjectCollection.HasItem">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.ObjectCollection.#ctor(System.Type,XFrame.Modules.Caches.ICacheObjectFactory,System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="target">对象类型</param>
            <param name="factory">对象工厂</param>
            <param name="cacheCount">缓存数量</param>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.ObjectCollection.Get">
            <summary>
            获取一个缓存对象
            </summary>
            <returns>缓存对象</returns>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionData">
            <summary>
            条件配置数据(可有多个条件项)
            <para>
            默认多个条件项用逗号分隔，条件的类型和参数用|分隔，参数为一个<see cref="T:XFrame.Core.UniversalParser"/>,
            可调用<see cref="M:XFrame.Core.UniversalParser.AddParser(System.Type)"/>自定义数值转换器
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionData.Parser">
            <summary>
            条件项列表
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionData.First">
            <summary>
            第一个条件项
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionData.Last">
            <summary>
            最后一个条件项
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.#ctor(System.String)">
            <summary>
            使用原始条件构造条件配置
            </summary>
            <param name="originData">原始配置，多个项由逗号分隔，条件类型和参数用|分隔</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.#ctor(XFrame.Core.ArrayParser{XFrame.Core.PairParser{XFrame.Core.IntOrHashParser,XFrame.Core.UniversalParser}})">
            <summary>
            使用转换器构造条件配置
            </summary>
            <param name="parser"></param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.Has(System.Int32)">
            <summary>
            此配置是否包含目标类型的条件
            </summary>
            <param name="target">条件目标类型</param>
            <returns> true为包含，否则不包含 </returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.Find(System.Int32)">
            <summary>
            查找第一个符合目标条件类型的条件项
            </summary>
            <param name="target">条件目标类型</param>
            <returns>查找到的条件项</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.FindAll(System.Int32)">
            <summary>
            查找所有符合目标条件类型的条件项
            </summary>
            <param name="target">条件目标类型</param>
            <returns>查找到的条件项列表</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.ToString">
            <summary>
            输出条件列表
            </summary>
            <returns>条件项列表</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.GetEnumerator">
            <summary>
            正向迭代条件项
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.SetIt(XFrame.Collections.XItType)">
            <summary>
            迭代类型设置未支持
            </summary>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionEvent">
            <summary>
            条件事件
            <para>
            此事件会影响所有条件组
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionEvent.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionEvent.Target">
            <summary>
            条件目标，即条件的类型
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionEvent.Param">
            <summary>
            触发参数
            <para>
            可为数量等, 定义为<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>和
            <see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.Check(XFrame.Modules.Conditions.IConditionHandle,`0)"/>的接受参数, 由<see cref="T:XFrame.Modules.Conditions.IConditionCompare"/>的具体实现类解析判断。
            </para>
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionEvent.Create(System.Int32,System.Object)">
            <summary>
            创建事件实例(从对象池中创建)
            </summary>
            <param name="target">条件目标</param>
            <param name="param">触发参数</param>
            <returns>事件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionEvent.OnRequestFromPool">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionEvent.OnReleaseFromPool">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionGroupEvent">
            <summary>
            条件组时间触发, 此条件仅会影响目标条件组句柄中的条件，
            但当触发的条件是全局条件时，则会触发全局<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>
            <para>
            当条件为全局条件时，首先会触发<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>，接着触发条件组事件,
            当条件为组内条件时，仅仅发某个条件组中的事件，不对其他组产生影响
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionGroupEvent.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionGroupEvent.Handle">
            <summary>
            触发的目标条件组句柄
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionGroupEvent.Target">
            <summary>
            触发目标条件类型
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionGroupEvent.Param">
            <summary>
            触发目标条件参数
            <para>
            可为数量等, 定义为<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>和
            <see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.Check(XFrame.Modules.Conditions.IConditionHandle,`0)"/>的接受参数, 由<see cref="T:XFrame.Modules.Conditions.IConditionCompare"/>的具体实现类解析判断。
            </para>
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionGroupEvent.Create(XFrame.Modules.Conditions.IConditionGroupHandle,System.Int32,System.Object)">
            <summary>
            创建事件实例(从对象池中创建)
            </summary>
            <param name="handle">目标条件组句柄</param>
            <param name="target">目标条件类型</param>
            <param name="param">目标条件参数</param>
            <returns>事件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionGroupEvent.OnReleaseFromPool">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionModule">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionModule.Event">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionModule.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionModule.Register(XFrame.Modules.Conditions.ConditionSetting)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionModule.UnRegister(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionModule.UnRegister(XFrame.Modules.Conditions.IConditionGroupHandle)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionParser">
            <summary>
            条件转换器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionParser.Value">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionParser.PoolKey">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionParser.MarkName">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionParser.Parse(System.String)">
            <summary>
            构造器
            </summary>
            <param name="pattern">数据</param>
            <returns>解析结果</returns>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionHelperSetting">
            <summary>
            条件辅助器配置
            <para>
            用于配置条件组<see cref="T:XFrame.Modules.Conditions.IConditionHelper"/>辅助器或条件<see cref="T:XFrame.Modules.Conditions.IConditionCompare"/>辅助器
            </para>
            </summary>
        </member>
        <member name="F:XFrame.Modules.Conditions.ConditionHelperSetting.DEFAULT_INSTANCE">
            <summary>
            全局辅助器实例Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionHelperSetting.UseInstance">
            <summary>
            使用的辅助器实例
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionHelperSetting.UsePersistData">
            <summary>
            是否使用持久化的数据
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionHelperSetting.IsUseInstance">
            <summary>
            是否使用非全局辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionHelperSetting.#ctor(System.Int32,System.Boolean)">
            <summary>
            构造器
            </summary>
            <param name="useInstance">使用实例</param>
            <param name="usePersistData">数据是否持久化</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionHelperSetting.#ctor(System.Boolean)">
            <summary>
            构造器，使用默认实例
            </summary>
            <param name="usePersistData">数据是否持久化</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionHelperSetting.Equals(System.Object)">
            <summary>
            比较连个配置是否相等
            </summary>
            <param name="obj">其它配置</param>
            <returns>true为相等</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionHelperSetting.GetHashCode">
            <summary>
            获取hash码
            </summary>
            <returns>hash码</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionHelperSetting.op_Equality(XFrame.Modules.Conditions.ConditionHelperSetting,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            判断连个配置是否相等
            </summary>
            <param name="a">配置a</param>
            <param name="b">配置b</param>
            <returns>true为相等</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionHelperSetting.op_Inequality(XFrame.Modules.Conditions.ConditionHelperSetting,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            判断连个配置是否不相等
            </summary>
            <param name="a">配置a</param>
            <param name="b">配置b</param>
            <returns>true为不相等</returns>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionSetting">
            <summary>
            条件配置
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionSetting.Name">
            <summary>
            条件名称
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionSetting.UseGroupHelper">
            <summary>
            条件组使用的辅助器 <see cref="T:XFrame.Modules.Conditions.IConditionHelper"/> 类型，与<see cref="P:XFrame.Modules.Conditions.IConditionHelper.Type"/>相匹配
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionSetting.HelperSetting">
            <summary>
            条件组辅助器配置
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionSetting.AutoRemove">
            <summary>
            在条件组完成时自动清理并从模块移除
            当为 true 时，在条件达成时自动从<see cref="T:XFrame.Modules.Conditions.IConditionModule"/>模块中移除此条件，会调用<see cref="M:XFrame.Modules.Conditions.ConditionGroupHandle.Dispose"/>清理监听，
            此时通过<see cref="M:XFrame.Modules.Conditions.IConditionModule.Get(System.String)"/>将获取不到条件实例。
            当为 false 时，在条件达成时不会自动从<see cref="T:XFrame.Modules.Conditions.IConditionModule"/>模块中移除此条件，但仍会调用<see cref="M:XFrame.Modules.Conditions.ConditionGroupHandle.Dispose"/>清理。
            置为false时，需要调用者在不使用条件句柄后手动调用<see cref="M:XFrame.Modules.Conditions.IConditionModule.UnRegister(System.String)"/>移除条件的句柄，
            否则将一直存在于条件模块<see cref="T:XFrame.Modules.Conditions.IConditionModule"/>中
            </summary>
        </member>
        <member name="F:XFrame.Modules.Conditions.ConditionSetting.Data">
            <summary>
            原始条件数据
            例：
            [条件1],[条件2]...
            [条件1] : {条件类型|目标参数} 其中条件类型<see cref="T:System.Int32"/>即 <see cref="P:XFrame.Modules.Conditions.ConditionEvent.Target"/> 需要触发的类型
            目标参数类型为 <see cref="T:XFrame.Core.UniversalParser"/> ，可二次分析
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionSetting.SetConditionHelperSetting(System.Int32,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            设置条件项辅助器配置
            </summary>
            <param name="target">条件项目标类型</param>
            <param name="settting">辅助器配置</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionSetting.GetConditionHelperSettting(System.Int32)">
            <summary>
            获取条件项辅助器配置
            </summary>
            <param name="target">条件项目标类型</param>
            <returns>辅助器配置</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionSetting.#ctor(System.String,XFrame.Modules.Conditions.ConditionData,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            构造条件配置，默认<see cref="P:XFrame.Modules.Conditions.ConditionSetting.AutoRemove"/> 为 true, <see cref="P:XFrame.Modules.Conditions.ConditionSetting.UseGroupHelper"/> 为 0
            </summary>
            <param name="name">条件名称</param>
            <param name="data">原始条件配置</param>
            <param name="helper">条件辅助器设置</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionSetting.#ctor(System.String,XFrame.Modules.Conditions.ConditionData,System.Int32,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            构造条件配置，默认<see cref="P:XFrame.Modules.Conditions.ConditionSetting.AutoRemove"/> 为 true
            </summary>
            <param name="name">条件名称</param>
            <param name="data">原始条件配置</param>
            <param name="useHelper">使用条件组辅助器</param>
            <param name="helper">使用条件辅助器</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionSetting.#ctor(System.String,XFrame.Modules.Conditions.ConditionData,System.Boolean,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            构造条件配置，默认<see cref="P:XFrame.Modules.Conditions.ConditionSetting.UseGroupHelper"/> 为 0
            </summary>
            <param name="name">条件名称</param>
            <param name="data">原始条件配置</param>
            <param name="autoRemove">是否自动移除</param>
            <param name="helper">条件辅助设置</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionSetting.#ctor(System.String,XFrame.Modules.Conditions.ConditionData,System.Boolean,System.Int32,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            构造条件配置
            </summary>
            <param name="name">条件名称</param>
            <param name="data">原始条件配置</param>
            <param name="autoRemove">是否自动移除</param>
            <param name="useHelper">使用条件组辅助器</param>
            <param name="helper">使用条件辅助器</param>
        </member>
        <member name="T:XFrame.Modules.Conditions.IConditionCompare">
            <summary>
            条件项(单项条件)检查器，比较器
            <para>
            一般不直接实现此接口，而实现泛型接口<see cref="T:XFrame.Modules.Conditions.IConditionCompare`1"/>
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionCompare.Target">
            <summary>
            匹配条件目标，类型
            <para>
            与<see cref="P:XFrame.Modules.Conditions.ConditionEvent.Target"/>以及<see cref="P:XFrame.Modules.Conditions.IConditionHandle.Target"/>相匹配
            </para>
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionCompare.CheckFinish(XFrame.Modules.Conditions.IConditionHandle)">
            <summary>
            检查条件是否处于完成状态，在条件句柄初始化时会执行一次
            </summary>
            <param name="info">句柄</param>
            <returns>true为完成状态，反之亦然</returns>
        </member>
        <member name="T:XFrame.Modules.Conditions.IConditionCompare`1">
            <summary>
            条件检查器需要实现此接口，检查条件完成情况
            </summary>
            <typeparam name="T">条件参数类型</typeparam>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionCompare`1.Check(XFrame.Modules.Conditions.IConditionHandle,`0)">
            <summary>
            检查条件是否完成，当<see cref="T:XFrame.Modules.Conditions.ConditionEvent"/>事件触发时，会将<see cref="P:XFrame.Modules.Conditions.ConditionEvent.Param"/>传入此方法方法检查
            条件是否可以完成，一般需要此方法中检查到条件的目标数量等发生变化时，调用<see cref="M:XFrame.Modules.Conditions.ConditionHandle.Trigger(System.Object,System.Object)"/>方法来触发
            条件的目标数量更新
            <para>
            注意若<see cref="M:XFrame.Modules.Conditions.ConditionHandle.Trigger(System.Object,System.Object)"/>方法没有执行，则通过<see cref="M:XFrame.Modules.Conditions.ConditionHandle.OnUpdate(System.Action{System.Object,System.Object})"/>注册的回调永远不会执行，
            即使在句柄完成之后，即完成之后(此方法返回true)只会执行<see cref="M:XFrame.Modules.Conditions.ConditionHandle.OnComplete(System.Action{XFrame.Modules.Conditions.IConditionHandle})"/>的回调
             此方法在<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>之后执行
            </para>
            </summary>
            <param name="info">条件句柄</param>
            <param name="param">参数(事件参数<see cref="P:XFrame.Modules.Conditions.ConditionEvent.Param"/>)</param>
            <returns>返回true时，句柄会进入完成状态。反之亦然</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)">
            <summary>
            当事件<see cref="T:XFrame.Modules.Conditions.ConditionEvent"/>触发时，与<see cref="P:XFrame.Modules.Conditions.ConditionEvent.Target"/>相匹配的<see cref="P:XFrame.Modules.Conditions.IConditionCompare.Target"/>实现类
            的此方法会执行，与<see cref="P:XFrame.Modules.Conditions.ConditionGroupEvent.Target"/>相匹配的<see cref="P:XFrame.Modules.Conditions.IConditionCompare.Target"/>实现类的条件组
            的所有此方法会执行，与<see cref="P:XFrame.Modules.Conditions.SpecificConditionEvent.Handle"/>相匹配的<see cref="P:XFrame.Modules.Conditions.IConditionCompare.Target"/>实现类的特定组的特定实例
            的此方法会执行，一般可以在此方法执行时执行一些存储状态的操作, 此方法在<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.Check(XFrame.Modules.Conditions.IConditionHandle,`0)"/>之前执行
            </summary>
            <param name="param">参数(事件参数<see cref="P:XFrame.Modules.Conditions.ConditionEvent.Param"/>)，随后执行check时的<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.Check(XFrame.Modules.Conditions.IConditionHandle,`0)"/>的param与此为同一值</param>
        </member>
        <member name="T:XFrame.Modules.Conditions.IConditionGroupHandle">
            <summary>
            条件组句柄
            <para>
            条件组内可有多个条件项，多个条件类型可以相同。
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionGroupHandle.InstanceId">
            <summary>
            条件辅助器<see cref="T:XFrame.Modules.Conditions.IConditionHelper"/>的实例Id，默认使用全局辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionGroupHandle.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionGroupHandle.Complete">
            <summary>
            条件是否完成
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionGroupHandle.Setting">
            <summary>
            条件配置
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionGroupHandle.AllInfo">
            <summary>
            组内所有的条件项句柄
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionGroupHandle.NotInfo">
            <summary>
            组内还未达成的条件项句柄
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionGroupHandle.OnComplete(System.Action{XFrame.Modules.Conditions.IConditionGroupHandle})">
            <summary>
            注册条件组完成事件回调
            </summary>
            <param name="callback">回调</param>
        </member>
        <member name="T:XFrame.Modules.Conditions.IConditionHandle">
            <summary>
            条件项句柄(单个条件)
            <para>
            在初始化时会调用<see cref="M:XFrame.Modules.Conditions.IConditionCompare.CheckFinish(XFrame.Modules.Conditions.IConditionHandle)"/>检查条件完成状态
            当触发<see cref="T:XFrame.Modules.Conditions.ConditionEvent"/>事件时，会调用<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>,
            接着调用所有满足条件项的句柄<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.Check(XFrame.Modules.Conditions.IConditionHandle,`0)"/>检查是否完成，
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionHandle.InstanceId">
            <summary>
            条件项辅助器<see cref="T:XFrame.Modules.Conditions.IConditionCompare"/>的实例Id，默认使用全局辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionHandle.Target">
            <summary>
            条件目标
            <para>
            <see cref="P:XFrame.Modules.Conditions.ConditionEvent.Target"/> 触发的目标会根据此值匹配句柄实例
            </para>
            <para>
            <see cref="P:XFrame.Modules.Conditions.IConditionCompare.Target"/> 具体的实现类会匹配到此值
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionHandle.IsComplete">
            <summary>
            条件是否达成
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionHandle.Param">
            <summary>
            条件需要达成的目标参数，如数量等
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionHandle.Group">
            <summary>
            条件句柄所有条件组
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionHandle.Trigger(System.Object,System.Object)">
            <summary>
            调用此方法触发条件句柄的更新(通过<see cref="M:XFrame.Modules.Conditions.IConditionHandle.OnUpdate(System.Action{System.Object,System.Object})"/>注册的事件)事件，
            一般通过<see cref="T:XFrame.Modules.Conditions.IConditionCompare"/>实现类来触发。
            </summary>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionHandle.OnUpdate(System.Action{System.Object,System.Object})">
            <summary>
            注册条件项更新事件回调
            <para>
            若提前触发了更新事件，则会立即触发一次更新，并使用上次的值执行回调
            </para>
            </summary>
            <param name="callback">回调</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionHandle.OnComplete(System.Action{XFrame.Modules.Conditions.IConditionHandle})">
            <summary>
            注册条件项完成事件回调
            <para>
            当条件已经完成时，会立刻执行回调
            </para>
            </summary>
            <param name="callback">回调</param>
        </member>
        <member name="T:XFrame.Modules.Conditions.IConditionHelper">
            <summary>
            条件(组)辅助器
            <para>
            在条件组初始化时首先会调用<see cref="M:XFrame.Modules.Conditions.IConditionHelper.CheckFinish(XFrame.Modules.Conditions.IConditionGroupHandle)"/>检查条件组完成状态，若为完成则直接进入完成状态。若未完成则会开始监听条件的完成，
            在达成完成条件时会调用<see cref="M:XFrame.Modules.Conditions.IConditionHelper.MarkFinish(XFrame.Modules.Conditions.IConditionGroupHandle)"/>标记未完成状态
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionHelper.Type">
            <summary>
            辅助器类型 
            <para>
            注意不同于 <see cref="P:XFrame.Modules.Conditions.ConditionEvent.Target"/>，<see cref="P:XFrame.Modules.Conditions.ConditionHandle.Target"/>, <see cref="P:XFrame.Modules.Conditions.IConditionCompare.Target"/>
            </para>
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionHelper.MarkFinish(XFrame.Modules.Conditions.IConditionGroupHandle)">
            <summary>
            标记条件组完成
            </summary>
            <param name="group">条件组</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionHelper.CheckFinish(XFrame.Modules.Conditions.IConditionGroupHandle)">
            <summary>
            检查条件组是否完成
            </summary>
            <param name="group">条件组</param>
            <returns>true为完成，反之亦然</returns>
        </member>
        <member name="T:XFrame.Modules.Conditions.IConditionModule">
            <summary>
            条件监听模块 
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionModule.Event">
            <summary>
            当需要触发某个条件时 
            触发 <see cref="T:XFrame.Modules.Conditions.ConditionEvent"/> 
                <see cref="T:XFrame.Modules.Conditions.ConditionGroupEvent"/> 
                <see cref="T:XFrame.Modules.Conditions.SpecificConditionEvent"/> 
            事件到此事件系统
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionModule.Get(System.String)">
            <summary>
            获取条件组句柄
            </summary>
            <param name="name">组名称</param>
            <returns>条件组句柄</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionModule.Register(XFrame.Modules.Conditions.ConditionSetting)">
            <summary>
            注册条件实例 查看<see cref="T:XFrame.Modules.Conditions.ConditionSetting"/>具体参数
            </summary>
            <param name="setting">条件配置</param>
            <returns>条件组句柄</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionModule.UnRegister(System.String)">
            <summary>
            取消条件注册
            </summary>
            <param name="name">条件名</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionModule.UnRegister(XFrame.Modules.Conditions.IConditionGroupHandle)">
            <summary>
            取消条件注册
            </summary>
            <param name="handle">条件组句柄</param>
        </member>
        <member name="T:XFrame.Modules.Conditions.SpecificConditionEvent">
            <summary>
            条件事件
            <para>
            此事件仅会影响目标句柄<see cref="P:XFrame.Modules.Conditions.SpecificConditionEvent.Handle"/>的指定条件，
            但当触发的条件是全局条件时，则会触发全局<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.SpecificConditionEvent.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.SpecificConditionEvent.Handle">
            <summary>
            目标条件句柄
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.SpecificConditionEvent.Param">
            <summary>
            触发参数
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.SpecificConditionEvent.Create(XFrame.Modules.Conditions.IConditionHandle,System.Object)">
            <summary>
            构造器
            </summary>
            <param name="handle">条件句柄</param>
            <param name="param">触发参数</param>
            <returns>事件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.SpecificConditionEvent.OnReleaseFromPool">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Config.XConfig">
            <summary>
            模块配置
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.Entrance">
            <summary>
            入口
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.TypeChecker">
            <summary>
            类型系统使用类型
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.ArchivePath">
            <summary>
            存档路径
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.ArchiveUtilityHelper">
            <summary>
            存档辅助器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.ArchiveEncrypt">
            <summary>
            存档是否加密
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.ResPath">
            <summary>
            资源根路径
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.DefaultLogger">
            <summary>
            默认Log辅助器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.DefaultRes">
            <summary>
            默认资源加载辅助器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.DefaultDownloadHelper">
            <summary>
            默认下载辅助器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.DefaultDataTableHelper">
            <summary>
            默认数据表辅助器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.DefaultCryptor">
            <summary>
            默认加密辅助器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.DefaultPlotHelper">
            <summary>
            默认Plot辅助器
            </summary>
        </member>
        <member name="T:XFrame.Modules.Containers.Com">
            <summary>
            组件基类
            数据为组件所有
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.Com.Active">
            <summary>
            组件激活状态
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.Com.Owner">
            <summary>
            组件所属容器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.Com.OnActive">
            <summary>
            激活生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.Com.OnInactive">
            <summary>
            失活生命周期
            </summary>
        </member>
        <member name="T:XFrame.Modules.Containers.Container">
            <summary>
            通用容器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Containers.Container.m_Module">
            <summary>
            容器所属模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.Container.Master">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Containers.Container.Id">
            <summary>
            容器Id
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.OnUpdate(System.Single)">
            <summary>
            更新生命周期
            </summary>
            <param name="elapseTime">逃逸时间</param>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetCom``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetCom(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.AddCom(XFrame.Modules.Containers.ICom)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.AddCom``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.AddCom``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.AddCom(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.AddCom(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetOrAddCom``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetOrAddCom``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetOrAddCom(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetOrAddCom(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.RemoveCom``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.RemoveCom(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.ClearCom">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.HasData``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.HasData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.SetData``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetData``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.SetData``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.ClearData">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.SetIt(XFrame.Collections.XItType)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Containers.ContainerModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.New``1(System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.New(System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.New(System.Type,System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.New(System.Type,System.Int32,System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.Remove(XFrame.Modules.Containers.IContainer)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Containers.ICom">
            <summary>
            容器组件
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.ICom.Active">
            <summary>
            是否处于激活状态
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.ICom.Owner">
            <summary>
            组件拥有者
            </summary>
        </member>
        <member name="T:XFrame.Modules.Containers.IContainer">
            <summary>
            容器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.IContainer.Master">
            <summary>
            根容器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.OnInit(XFrame.Modules.Containers.IContainerModule,System.Int32,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            初始化生命周期
            </summary>
            <param name="module">容器所属模块</param>
            <param name="id">容器Id</param>
            <param name="master">容器拥有者</param>
            <param name="onReady">容器就绪事件</param>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.OnUpdate(System.Single)">
            <summary>
            更新生命周期
            </summary>
            <param name="elapseTime">逃逸时间</param>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.GetCom``1(System.Int32)">
            <summary>
            获取一个组件(Id为默认Id)
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="id">组件Id</param>
            <returns>组件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.GetCom(System.Type,System.Int32)">
            <summary>
            获取一个组件
            </summary>
            <param name="type">组件类型</param>
            <param name="id">组件Id</param>
            <returns>组件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.AddCom``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            添加一个组件(Id为默认Id)
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.AddCom(XFrame.Modules.Containers.ICom)">
            <summary>
            添加一个组件
            </summary>
            <param name="com">组件实例</param>
            <returns>组件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.AddCom``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            添加一个组件
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="id">组件Id</param>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.AddCom(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            添加一个组件(Id为默认Id)
            </summary>
            <param name="type">组件类型</param>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.AddCom(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            添加一个组件
            </summary>
            <param name="type"></param>
            <param name="id"></param>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.GetOrAddCom``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            获取或添加一个组件(Id为默认Id)
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.GetOrAddCom``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            获取或添加一个组件
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="id">组件Id</param>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.GetOrAddCom(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            获取或添加一个组件(Id为默认Id)
            </summary>
            <param name="type">组件类型</param>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.GetOrAddCom(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            获取或添加一个组件
            </summary>
            <param name="type">组件类型</param>
            <param name="id">组件Id</param>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.RemoveCom``1(System.Int32)">
            <summary>
            移除组件
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="id">组件Id</param>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.RemoveCom(System.Type,System.Int32)">
            <summary>
            移除组件
            </summary>
            <param name="type">组件类型</param>
            <param name="id">组件Id</param>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.ClearCom">
            <summary>
            移除所有组件
            </summary>
        </member>
        <member name="T:XFrame.Modules.Containers.IContainerModule">
            <summary>
            容器类模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainerModule.New``1(System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            请求一个新的容器
            </summary>
            <typeparam name="T">容器类型</typeparam>
            <param name="updateTrusteeship">是否需要模块处理更新</param>
            <param name="master">容器拥有者</param>
            <param name="onReady">数据提供委托</param>
            <returns>容器实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainerModule.New(System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            请求一个新的容器
            </summary>
            <param name="updateTrusteeship">是否需要模块处理更新</param>
            <param name="master">容器拥有者</param>
            <param name="onReady">数据提供委托</param>
            <returns>容器实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainerModule.New(System.Type,System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            请求一个新的容器
            </summary>
            <param name="type">容器类型</param>
            <param name="updateTrusteeship">是否需要模块处理更新</param>
            <param name="master">容器拥有者</param>
            <param name="onReady">数据提供委托</param>
            <returns>容器实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainerModule.New(System.Type,System.Int32,System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            请求一个新的容器
            </summary>
            <param name="type">容器类型</param>
            <param name="id">容器Id</param>
            <param name="updateTrusteeship">是否需要模块处理更新</param>
            <param name="master">容器拥有者</param>
            <param name="onReady">数据提供委托</param>
            <returns>容器实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainerModule.Remove(XFrame.Modules.Containers.IContainer)">
            <summary>
            移除一个容器
            </summary>
            <param name="container">容器实例</param>
        </member>
        <member name="T:XFrame.Modules.Containers.OnDataProviderReady">
            <summary>
            数据提供委托
            </summary>
            <param name="container">容器实例</param>
        </member>
        <member name="T:XFrame.Modules.Containers.ShareCom">
            <summary>
            共享组件基类, 会共享容器数据
            </summary>
        </member>
        <member name="F:XFrame.Modules.Containers.ShareCom.m_Module">
            <summary>
            所属容器模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.ShareCom.Active">
            <summary>
            激活状态
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.ShareCom.Id">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Containers.ShareCom.Master">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Containers.ShareCom.Owner">
            <summary>
            父容器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.OnUpdate(System.Single)">
            <summary>
            更新生命周期
            </summary>
            <param name="elapseTime">逃逸时间</param>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.OnActive">
            <summary>
            激活生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.OnInactive">
            <summary>
            失活生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetCom``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetCom(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.AddCom``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.AddCom(XFrame.Modules.Containers.ICom)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.AddCom``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.AddCom(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.AddCom(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetOrAddCom``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetOrAddCom``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetOrAddCom(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetOrAddCom(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.RemoveCom``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.RemoveCom(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.ClearCom">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.HasData``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.HasData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.SetData``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetData``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.SetData``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.ClearData">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.SetIt(XFrame.Collections.XItType)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Crypto.CryptoModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Crypto.CryptoModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Crypto.CryptoModule.New(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Crypto.CryptoModule.New">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Crypto.ICryptoModule">
            <summary>
            数据加密模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptoModule.New(System.String,System.String)">
            <summary>
            创建加密器
            </summary>
            <param name="keyStr">密钥</param>
            <param name="ivStr">密钥</param>
            <returns>加密器</returns>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptoModule.New">
            <summary>
            使用默认密钥创建加密器
            </summary>
            <returns>加密器</returns>
        </member>
        <member name="T:XFrame.Modules.Crypto.ICryptor">
            <summary>
            加密器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptor.OnInit(System.String,System.String)">
            <summary>
            初始化生命周期
            </summary>
            <param name="keyStr">密钥</param>
            <param name="ivStr">密钥</param>
        </member>
        <member name="P:XFrame.Modules.Crypto.ICryptor.Writer">
            <summary>
            加密数据写入流
            </summary>
        </member>
        <member name="P:XFrame.Modules.Crypto.ICryptor.Reader">
            <summary>
            解密数据读取流
            </summary>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptor.BeginEncrypt">
            <summary>
            标记开始加密
            </summary>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptor.EndEncrypt">
            <summary>
            标记加密结束
            </summary>
            <returns>加密好的数据</returns>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptor.BeginDecrypty(System.Byte[])">
            <summary>
            标记开始解密
            </summary>
            <param name="buffer">需要解密的数据</param>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptor.EndDecrypty">
            <summary>
            标记解密结束
            </summary>
        </member>
        <member name="T:XFrame.Modules.Datas.DataAttribute">
            <summary>
            数据表
            </summary>
        </member>
        <member name="P:XFrame.Modules.Datas.DataAttribute.TableType">
            <summary>
            数据表类型
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.DataAttribute.#ctor(System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="tableType">数据表类型</param>
        </member>
        <member name="T:XFrame.Modules.Datas.DataModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.Register(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.Add``1(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.Get``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.Get``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.GetOne``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.GetOne``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.GetItem``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.GetItem``1(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Datas.IDataHelper">
            <summary>
            数据模块辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataHelper.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataHelper.AddTableType(System.Type)">
            <summary>
            添加可处理的数据表类型
            </summary>
            <param name="type">可以被处理的数据表类型</param>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataHelper.Add(System.String,System.Type,System.Int32)">
            <summary>
            添加数据表
            </summary>
            <param name="json">需要被序列化的数据</param>
            <param name="datatype">数据表持有数据类型</param>
            <param name="textType">文本类型</param>
            <returns>数据表</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataHelper.TryGet(System.Type,System.Collections.Generic.List{XFrame.Modules.Datas.IDataTable}@)">
            <summary>
            尝试获取一种类型的数据表
            </summary>
            <param name="datatype">数据表持有数据类型</param>
            <param name="list">数据表列表</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="T:XFrame.Modules.Datas.IDataModule">
            <summary>
            数据模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.Register(System.Type)">
            <summary>
            注册数据表类型
            </summary>
            <param name="tableType">数据表类型</param>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.Add``1(System.String,System.Int32)">
            <summary>
            添加数据表
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <param name="json">需要被序列化的数据</param>
            <param name="textType">数据类型</param>
            <returns>数据表接口实例</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.Get``1">
            <summary>
            获取数据表(第一个添加的数据表)
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <returns>数据表接口实例</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.Get``1(System.Int32)">
            <summary>
            获取数据表
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <param name="tableIndex">数据表位置(当有多个同类型的数据表时，用此位置可区分)</param>
            <returns>数据表接口实例</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.GetOne``1">
            <summary>
            获取数据表默认项数据(第一个添加的数据表)
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <returns>数据</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.GetOne``1(System.Int32)">
            <summary>
            获取数据表默认项数据
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <param name="tableIndex">数据表位置(当有多个同类型的数据表时，用此位置可区分)</param>
            <returns>数据</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.GetItem``1(System.Int32)">
            <summary>
            获取数据表数据项
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <param name="itemId">数据项Id</param>
            <returns>数据</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.GetItem``1(System.Int32,System.Int32)">
            <summary>
            获取数据表数据项
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <param name="tableIndex">数据表位置(当有多个同类型的数据表时，用此位置可区分)</param>
            <param name="itemId">数据项Id</param>
            <returns>数据</returns>
        </member>
        <member name="T:XFrame.Modules.Datas.IDataRaw">
            <summary>
            数据项
            </summary>
        </member>
        <member name="T:XFrame.Modules.Datas.IDataTable">
            <summary>
            数据表
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataTable.OnInit(System.Object)">
            <summary>
            初始化生命周期
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:XFrame.Modules.Datas.IDataTable`1">
            <summary>
            数据表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XFrame.Modules.Datas.IDataTable`1.Count">
            <summary>
            数据个数
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataTable`1.Get">
            <summary>
            获取第一项数据
            </summary>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataTable`1.Get(System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="id">数据Id</param>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataTable`1.GetByIndex(System.Int32)">
            <summary>
            通过下标获取数据
            </summary>
            <param name="index">下标</param>
            <returns>数据</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataTable`1.Select(System.String,System.Object,System.Collections.Generic.List{`0})">
            <summary>
            检索数据
            </summary>
            <param name="name">数据项名</param>
            <param name="value">符合的值</param>
            <param name="target">结果存放列表</param>
            <returns>检索到的数据项</returns>
        </member>
        <member name="T:XFrame.Modules.Datas.TableAttribute">
            <summary>
            数据表
            </summary>
        </member>
        <member name="P:XFrame.Modules.Datas.TableAttribute.TableType">
            <summary>
            数据表类型Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Datas.TableAttribute.JsonType">
            <summary>
            数据表Json类型，此类型需要为泛型类或为空
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.TableAttribute.#ctor(System.Int32,System.Type)">
            <summary>
            标记为数据表类型
            </summary>
            <param name="id">类型Id</param>
            <param name="jsonType">Json类型</param>
        </member>
        <member name="M:XFrame.Modules.Datas.TableAttribute.#ctor(System.Int32)">
            <summary>
            标记为数据表类型，Json类型为数据项类型
            </summary>
            <param name="id">类型Id</param>
        </member>
        <member name="T:XFrame.Modules.Datas.TableType">
            <summary>
            数据表类型
            </summary>
        </member>
        <member name="F:XFrame.Modules.Datas.TableType.List">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:XFrame.Modules.Datas.TableType.Object">
            <summary>
            对象
            </summary>
        </member>
        <member name="T:XFrame.Modules.Download.DownloadResult">
            <summary>
            下载结果
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownloadResult.IsSuccess">
            <summary>
            是否下载成功
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownloadResult.Text">
            <summary>
            下载的文件是文本时有值
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownloadResult.Data">
            <summary>
            下载的文件不是文本时为字节数据
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownloadResult.ErrorReason">
            <summary>
            下载失败时的失败原因，成功时为空
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.DownloadResult.#ctor(System.Boolean,System.String,System.Byte[],System.String)">
            <summary>
            构造器
            </summary>
            <param name="isSuccess">是否成功</param>
            <param name="text">文本</param>
            <param name="data">二进制数据</param>
            <param name="errorReason">错误原因</param>
        </member>
        <member name="T:XFrame.Modules.Download.DownloadModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Download.DownloadModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Download.DownloadModule.SetHelper``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Download.DownloadModule.Down(System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Download.DownTask">
            <summary>
            下载任务
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownTask.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownTask.Text">
            <summary>
            文本数据
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownTask.Data">
            <summary>
            字节数据
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.DownTask.#ctor(XFrame.Modules.Download.IDownloadHelper,XFrame.Tasks.XTaskCancelToken)">
            <summary>
            构造器
            </summary>
            <param name="handler">下载辅助器</param>
            <param name="cancelToken">取消Token</param>
        </member>
        <member name="M:XFrame.Modules.Download.DownTask.InnerStart">
            <summary>
            开始执行
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.DownTask.GetResult">
            <summary>
            获取结果
            </summary>
            <returns>下载任务</returns>
        </member>
        <member name="M:XFrame.Modules.Download.DownTask.OnCompleted(System.Action{System.Byte[]})">
            <summary>
            设置完成回调
            </summary>
            <param name="callback">回调函数</param>
            <returns>下载任务</returns>
        </member>
        <member name="M:XFrame.Modules.Download.DownTask.OnCompleted(System.Action{System.String})">
            <summary>
            设置完成回调
            </summary>
            <param name="callback">回调函数</param>
            <returns>下载任务</returns>
        </member>
        <member name="M:XFrame.Modules.Download.DownTask.InnerExecComplete">
            <summary>
            任务完成
            </summary>
        </member>
        <member name="T:XFrame.Modules.Download.IDownloadHelper">
            <summary>
            下载辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.IDownloadHelper.IsDone">
            <summary>
            下载是否完成，成功或失败完成时为true
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.IDownloadHelper.Result">
            <summary>
            下载结果
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.IDownloadHelper.Url">
            <summary>
            下载任务url
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.IDownloadHelper.ReserveUrl">
            <summary>
            备用地址
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.IDownloadHelper.Request">
            <summary>
            请求下载
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.IDownloadHelper.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.IDownloadHelper.OnUpdate">
            <summary>
            更新状态
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.IDownloadHelper.OnDispose">
            <summary>
            释放持有的资源
            </summary>
        </member>
        <member name="T:XFrame.Modules.Download.IDownloadModule">
            <summary>
            下载器模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.IDownloadModule.SetHelper``1">
            <summary>
            设置下载辅助器
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
        </member>
        <member name="M:XFrame.Modules.Download.IDownloadModule.Down(System.String,System.String[])">
            <summary>
            下载文件或数据
            </summary>
            <param name="url">url</param>
            <param name="reserveUrls">url链接失败时备用url</param>
        </member>
        <member name="T:XFrame.Modules.Entities.Entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="M:XFrame.Modules.Entities.Entity.OnInit">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Entities.Entity.Event">
            <summary>
            实体事件系统
            </summary>
        </member>
        <member name="T:XFrame.Modules.Entities.EntityCom">
            <summary>
            实体组件
            </summary>
        </member>
        <member name="P:XFrame.Modules.Entities.EntityCom.Event">
            <summary>
            时间系统
            </summary>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityCom.OnInit">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Entities.EntityModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.RegisterEntity``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create``1(XFrame.Modules.Entities.IEntity,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create(System.Type,XFrame.Modules.Entities.IEntity,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create``1(XFrame.Modules.Entities.IEntity,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create(System.Type,XFrame.Modules.Entities.IEntity,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Destroy(XFrame.Modules.Entities.IEntity)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Entities.EntityPropAttribute">
            <summary>
            实体属性
            有数据的实体必须声明此属性并提供正确的类型
            </summary>
        </member>
        <member name="P:XFrame.Modules.Entities.EntityPropAttribute.Type">
            <summary>
            类型Id
            </summary>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityPropAttribute.#ctor">
            <summary>
            标记实体
            类型为0
            </summary>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityPropAttribute.#ctor(System.Int32)">
            <summary>
            标记实体
            </summary>
            <param name="type">实体类型Id</param>
        </member>
        <member name="T:XFrame.Modules.Entities.EntityShareCom">
            <summary>
            共享组件实体
            </summary>
        </member>
        <member name="P:XFrame.Modules.Entities.EntityShareCom.Event">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="T:XFrame.Modules.Entities.IEntity">
            <summary>
            实体
            </summary>
        </member>
        <member name="P:XFrame.Modules.Entities.IEntity.Event">
            <summary>
            实体事件系统
            </summary>
        </member>
        <member name="T:XFrame.Modules.Entities.IEntityCom">
            <summary>
            实体组件
            </summary>
        </member>
        <member name="T:XFrame.Modules.Entities.IEntityModule">
            <summary>
            实体模块
            只有根实体才会接受实体模块的更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.RegisterEntity``1">
            <summary>
            注册实体，创建实体前需要注册实体
            </summary>
            <typeparam name="T">实体基类或实体类</typeparam>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <param name="type">实体类型</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create``1(XFrame.Modules.Entities.IEntity,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="parent">父实体</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create(System.Type,XFrame.Modules.Entities.IEntity,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <param name="type">实体类型</param>
            <param name="parent">父实体</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="typeId">类型Id</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <param name="baseType">实体类型</param>
            <param name="typeId">类型Id</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create``1(XFrame.Modules.Entities.IEntity,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="parent">父实体</param>
            <param name="typeId">类型Id</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create(System.Type,XFrame.Modules.Entities.IEntity,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <param name="baseType">实体类型</param>
            <param name="parent">父实体</param>
            <param name="typeId">类型Id</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Destroy(XFrame.Modules.Entities.IEntity)">
            <summary>
            销毁一个实体
            </summary>
            <param name="entity">需要销毁的实体</param>
        </member>
        <member name="T:XFrame.Modules.Event.EventModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Event.EventModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Event.EventModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Event.EventModule.NewSys">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Event.EventModule.Remove(XFrame.Modules.Event.IEventSystem)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Event.IEventModule">
            <summary>
            事件模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Event.IEventModule.NewSys">
            <summary>
            创建一个事件系统
            </summary>
            <returns>事件系统</returns>
        </member>
        <member name="M:XFrame.Modules.Event.IEventModule.Remove(XFrame.Modules.Event.IEventSystem)">
            <summary>
            移除一个事件系统 
            </summary>
            <param name="evtSys">事件系统</param>
        </member>
        <member name="T:XFrame.Modules.Event.IEventSystem">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Trigger(System.Int32)">
            <summary>
            触发事件
            </summary>
            <param name="eventId">事件Id</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Trigger(XFrame.Modules.Event.XEvent)">
            <summary>
            触发事件
            </summary>
            <param name="e">事件</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.TriggerNow(System.Int32)">
            <summary>
            立刻触发事件
            </summary>
            <param name="eventId">事件Id</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.TriggerNow(XFrame.Modules.Event.XEvent)">
            <summary>
            立即触发事件
            </summary>
            <param name="e">事件</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Listen(System.Int32,XFrame.Modules.Event.XEventHandler)">
            <summary>
            监听事件
            </summary>
            <param name="eventId">事件Id</param>
            <param name="handler">事件处理委托</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Listen(System.Int32,XFrame.Modules.Event.XEventHandler2)">
            <summary>
            监听事件
            </summary>
            <param name="eventId">事件Id</param>
            <param name="handler">事件处理委托</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Unlisten(System.Int32,XFrame.Modules.Event.XEventHandler)">
            <summary>
            移除事件监听
            </summary>
            <param name="eventId">事件Id</param>
            <param name="handler">需要移除的委托</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Unlisten(System.Int32,XFrame.Modules.Event.XEventHandler2)">
            <summary>
            移除事件监听
            </summary>
            <param name="eventId">事件Id</param>
            <param name="handler">需要移除的委托</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Unlisten(System.Int32)">
            <summary>
            移除事件的所有监听
            </summary>
            <param name="eventId">事件Id</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Unlisten">
            <summary>
            移除所有监听
            </summary>
        </member>
        <member name="T:XFrame.Modules.Event.XEvent">
            <summary>
            事件
            </summary>
        </member>
        <member name="P:XFrame.Modules.Event.XEvent.Id">
            <summary>
            事件Id 
            </summary>
        </member>
        <member name="M:XFrame.Modules.Event.XEvent.#ctor(System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="id">事件Id</param>
        </member>
        <member name="M:XFrame.Modules.Event.XEvent.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Event.XEvent.OnReleaseFromPool">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Event.XEventHandler">
            <summary>
            事件处理委托
            </summary>
            <param name="e">事件</param>
        </member>
        <member name="T:XFrame.Modules.Event.XEventHandler2">
            <summary>
            事件处理委托
            </summary>
            <param name="e">事件</param>
            <returns>返回true时移除此监听</returns>
        </member>
        <member name="T:XFrame.Modules.Event.XEventSystem">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="T:XFrame.Modules.StateMachine.FsmModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.GetOrNew(System.String,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.GetOrNew(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.GetOrNew``1(System.String,``0,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.GetOrNew``1(``0,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.Remove(XFrame.Modules.StateMachine.IFsmBase)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.StateMachine.FsmState">
            <summary>
            有限状态机状态
            </summary>
        </member>
        <member name="F:XFrame.Modules.StateMachine.FsmState.m_Fsm">
            <summary>
            持有状态机
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState.OnInit(XFrame.Modules.StateMachine.IFsm)">
            <summary>
            初始化生命周期
            </summary>
            <param name="fsm">状态机</param>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState.OnEnter">
            <summary>
            进入状态生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState.OnUpdate">
            <summary>
            更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState.OnLeave">
            <summary>
            离开状态生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState.ChangeState``1">
            <summary>
            改变状态机状态
            仅通过内部调用
            </summary>
            <typeparam name="State">状态机类型</typeparam>
        </member>
        <member name="T:XFrame.Modules.StateMachine.FsmState`1">
            <summary>
            有限状态机状态
            </summary>
        </member>
        <member name="F:XFrame.Modules.StateMachine.FsmState`1.m_Fsm">
            <summary>
            持有状态机
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState`1.OnInit(XFrame.Modules.StateMachine.IFsm{`0})">
            <summary>
            初始化生命周期
            </summary>
            <param name="fsm">状态机</param>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState`1.OnEnter">
            <summary>
            进入状态生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState`1.OnUpdate">
            <summary>
            更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState`1.OnLeave">
            <summary>
            离开状态生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState`1.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState`1.ChangeState``1">
            <summary>
            改变状态机状态
            仅通过内部调用
            </summary>
            <typeparam name="State">状态机类型</typeparam>
        </member>
        <member name="T:XFrame.Modules.StateMachine.IFsm">
            <summary>
            有限状态机
            </summary>
        </member>
        <member name="P:XFrame.Modules.StateMachine.IFsm.Current">
            <summary>
            当前状态
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm.GetState``1">
            <summary>
            获取状态
            </summary>
            <typeparam name="State">状态类型</typeparam>
            <returns>获取到的状态实例</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm.HasState``1">
            <summary>
            是否含有状态
            </summary>
            <typeparam name="State">状态类型</typeparam>
            <returns>true表示含有</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm.HasState(System.Type)">
            <summary>
            是否含有状态
            </summary>
            <param name="type">状态类型</param>
            <returns>true表示含有</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm.Start``1">
            <summary>
            启动状态机
            </summary>
            <typeparam name="State">入口状态类型</typeparam>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm.Start(System.Type)">
            <summary>
            启动状态机
            </summary>
            <param name="type">入口状态类型</param>
        </member>
        <member name="T:XFrame.Modules.StateMachine.IFsmBase">
            <summary>
            有限状态机
            </summary>
        </member>
        <member name="P:XFrame.Modules.StateMachine.IFsmBase.Name">
            <summary>
            状态机名
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmBase.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmBase.OnUpdate">
            <summary>
            更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmBase.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="T:XFrame.Modules.StateMachine.IFsm`1">
            <summary>
            有限状态机
            </summary>
            <typeparam name="T">状态机拥有者类型</typeparam>
        </member>
        <member name="P:XFrame.Modules.StateMachine.IFsm`1.Owner">
            <summary>
            状态机拥有者
            </summary>
        </member>
        <member name="P:XFrame.Modules.StateMachine.IFsm`1.Current">
            <summary>
            当前状态
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm`1.GetState``1">
            <summary>
            获取状态
            </summary>
            <typeparam name="State">状态类型</typeparam>
            <returns>获取到的状态实例</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm`1.HasState``1">
            <summary>
            是否含有状态
            </summary>
            <typeparam name="State">状态类型</typeparam>
            <returns>true表示含有</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm`1.Start``1">
            <summary>
            启动状态机
            </summary>
            <typeparam name="State">入口状态类型</typeparam>
        </member>
        <member name="T:XFrame.Modules.StateMachine.IFsmModule">
            <summary>
            有限状态机模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmModule.GetOrNew(System.String,System.Type[])">
            <summary>
            获取(不存在时创建)有限状态机
            </summary>
            <param name="name">状态机名</param>
            <param name="states">状态机状态集合</param>
            <returns>获取到的状态机</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmModule.GetOrNew(System.Type[])">
            <summary>
            获取(不存在时创建)有限状态机
            </summary>
            <param name="states">状态机状态集合</param>
            <returns>获取到的状态机</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmModule.GetOrNew``1(System.String,``0,System.Type[])">
            <summary>
            获取(不存在时创建)有限状态机
            </summary>
            <typeparam name="T">状态机拥有者类型</typeparam>
            <param name="name">状态机名</param>
            <param name="owner">状态机拥有者</param>
            <param name="states">状态机状态集合</param>
            <returns>获取到的状态机</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmModule.GetOrNew``1(``0,System.Type[])">
            <summary>
            获取(不存在时创建)有限状态机
            </summary>
            <typeparam name="T">状态机拥有者类型</typeparam>
            <param name="owner">状态机拥有者</param>
            <param name="states">状态机状态集合</param>
            <returns>获取到的状态机</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmModule.Remove(System.String)">
            <summary>
            移除有限状态机
            </summary>
            <param name="name">需要移除的状态机</param>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmModule.Remove(XFrame.Modules.StateMachine.IFsmBase)">
            <summary>
            移除状态机
            </summary>
            <param name="fsm">需要移除的状态机</param>
        </member>
        <member name="T:XFrame.Modules.ID.IdModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.ID.IdModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.ID.IdModule.Next">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.ID.IIdModule">
            <summary>
            Id模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.ID.IIdModule.Next">
            <summary>
            生成一个Id
            </summary>
            <returns>生成的Id</returns>
        </member>
        <member name="T:XFrame.Modules.Local.ILocalizeModule">
            <summary>
            本地化模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Local.ILocalizeModule.Event">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="P:XFrame.Modules.Local.ILocalizeModule.Lang">
            <summary>
            当前语言
            </summary>
        </member>
        <member name="P:XFrame.Modules.Local.ILocalizeModule.ExistLangs">
            <summary>
            存在的语言
            </summary>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.HasLanguage(XFrame.Modules.Local.Language)">
            <summary>
            是否存在语言
            </summary>
            <param name="language">语言</param>
            <returns>true为存在</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.Parse(System.String)">
            <summary>
            配置
            </summary>
            <param name="content">文本内容</param>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.SetFormater(System.ICustomFormatter)">
            <summary>
            设置文本格式化器
            </summary>
            <param name="formatter">自定义格式化</param>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetLine(System.Int32)">
            <summary>
            获取一整行
            </summary>
            <param name="key">Id</param>
            <returns>行</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValue(XFrame.Modules.Local.Language,System.Int32,System.Object[])">
            <summary>
            获取本地化值
            </summary>
            <param name="language">指定语言</param>
            <param name="key">Id</param>
            <param name="values">参数</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValue(System.Int32,System.Object[])">
            <summary>
            获取本地化值
            </summary>
            <param name="key">Id</param>
            <param name="values">参数</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValue(XFrame.Modules.Local.Language,XFrame.Modules.Local.LanguageParam)">
            <summary>
            获取本地化值
            </summary>
            <param name="language">语言</param>
            <param name="param">参数</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValue(XFrame.Modules.Local.LanguageParam)">
            <summary>
            获取本地化值
            </summary>
            <param name="param">参数</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValues(System.Int32[])">
            <summary>
            获取本地化值
            </summary>
            <param name="idList">语言Id列表</param>
            <returns>值列表</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValues(XFrame.Modules.Local.Language,System.Int32[])">
            <summary>
            获取本地化值
            </summary>
            <param name="language">语言</param>
            <param name="idList">语言Id列表</param>
            <returns>值列表</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValueParam(System.Int32,System.Int32[])">
            <summary>
            获取本地化值
            </summary>
            <param name="key">Id</param>
            <param name="args">参数Id</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValueParam(XFrame.Modules.Local.Language,System.Int32,System.Int32[])">
            <summary>
            获取本地化值
            </summary>
            <param name="language">指定语言</param>
            <param name="key">Id</param>
            <param name="args">参数Id</param> 
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValueParam(XFrame.Modules.Local.LanguageIdParam)">
            <summary>
            获取本地化值
            </summary>
            <param name="param">参数</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValueParam(XFrame.Modules.Local.Language,XFrame.Modules.Local.LanguageIdParam)">
            <summary>
            获取本地化值
            </summary>
            <param name="language">语言</param>
            <param name="param">参数</param>
            <returns>值</returns>
        </member>
        <member name="T:XFrame.Modules.Local.Language">
            <summary>
            语言
            </summary>
        </member>
        <member name="F:XFrame.Modules.Local.Language.None">
            <summary>
            无效
            </summary>
        </member>
        <member name="T:XFrame.Modules.Local.LanguageChangeEvent">
            <summary>
            语言改变事件
            </summary>
        </member>
        <member name="P:XFrame.Modules.Local.LanguageChangeEvent.EventId">
            <summary>
            时间Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Local.LanguageChangeEvent.Old">
            <summary>
            旧语言
            </summary>
        </member>
        <member name="P:XFrame.Modules.Local.LanguageChangeEvent.New">
            <summary>
            新语言
            </summary>
        </member>
        <member name="M:XFrame.Modules.Local.LanguageChangeEvent.Create(XFrame.Modules.Local.Language,XFrame.Modules.Local.Language)">
            <summary>
            创建事件
            </summary>
            <param name="oldLang">旧语言</param>
            <param name="newLang">新语言</param>
            <returns>事件实例</returns>
        </member>
        <member name="T:XFrame.Modules.Local.LanguageParam">
            <summary>
            语言参数
            </summary>
        </member>
        <member name="F:XFrame.Modules.Local.LanguageParam.Id">
            <summary>
            语言Id
            </summary>
        </member>
        <member name="F:XFrame.Modules.Local.LanguageParam.Params">
            <summary>
            通配参数
            </summary>
        </member>
        <member name="M:XFrame.Modules.Local.LanguageParam.Create(System.Int32,System.Object[])">
            <summary>
            构造参数
            </summary>
            <param name="id">语言Id</param>
            <param name="args">通配参数</param>
            <returns>参数</returns>
        </member>
        <member name="T:XFrame.Modules.Local.LanguageIdParam">
            <summary>
            语言参数，通配Id
            </summary>
        </member>
        <member name="F:XFrame.Modules.Local.LanguageIdParam.Id">
            <summary>
            语言Id
            </summary>
        </member>
        <member name="F:XFrame.Modules.Local.LanguageIdParam.Params">
            <summary>
            通配符对应语言Id
            </summary>
        </member>
        <member name="M:XFrame.Modules.Local.LanguageIdParam.Create(System.Int32,System.Int32[])">
            <summary>
            创建参数
            </summary>
            <param name="id">语言Id</param>
            <param name="args">通配符对应语言Id</param>
            <returns>参数</returns>
        </member>
        <member name="T:XFrame.Modules.Local.LocalizeModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Local.LocalizeModule.Event">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Local.LocalizeModule.Lang">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Local.LocalizeModule.ExistLangs">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.HasLanguage(XFrame.Modules.Local.Language)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.SetFormater(System.ICustomFormatter)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetLine(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValue(XFrame.Modules.Local.Language,System.Int32,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValue(System.Int32,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValue(XFrame.Modules.Local.Language,XFrame.Modules.Local.LanguageParam)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValue(XFrame.Modules.Local.LanguageParam)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValues(System.Int32[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValues(XFrame.Modules.Local.Language,System.Int32[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValueParam(System.Int32,System.Int32[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValueParam(XFrame.Modules.Local.Language,System.Int32,System.Int32[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValueParam(XFrame.Modules.Local.LanguageIdParam)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValueParam(XFrame.Modules.Local.Language,XFrame.Modules.Local.LanguageIdParam)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Diagnotics.ICanConfigLog">
            <summary>
            可配置Log等级
            </summary>
        </member>
        <member name="P:XFrame.Modules.Diagnotics.ICanConfigLog.LogLv">
            <summary>
            Log等级
            </summary>
        </member>
        <member name="T:XFrame.Modules.Diagnotics.ILogger">
            <summary>
            Log辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogger.Debug(System.Object[])">
            <summary>
            调试信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogger.Warning(System.Object[])">
            <summary>
            警告信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogger.Error(System.Object[])">
            <summary>
            错误信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogger.Fatal(System.Object[])">
            <summary>
            致命错误信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogger.Exception(System.Exception)">
            <summary>
            异常错误
            </summary>
            <param name="e">异常</param>
        </member>
        <member name="T:XFrame.Modules.Diagnotics.ILogModule">
            <summary>
            Log模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.AddLogger``1">
            <summary>
            添加Log辅助器
            </summary>
            <typeparam name="T">Log辅助器类型</typeparam>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.GetLogger``1">
            <summary>
            获取Log辅助器
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
            <returns>获取到的实例</returns>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.Debug(System.Object[])">
            <summary>
            调试信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.Warning(System.Object[])">
            <summary>
            警告信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.Error(System.Object[])">
            <summary>
            错误信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.Fatal(System.Object[])">
            <summary>
            致命错误信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.Exception(System.Exception)">
            <summary>
            异常错误
            </summary>
            <param name="e">异常</param>
        </member>
        <member name="T:XFrame.Modules.Diagnotics.Log">
            <summary>
            Log
            </summary>
        </member>
        <member name="P:XFrame.Modules.Diagnotics.Log.ToQueue">
            <summary>
            是否将Log输出到队列中
            </summary>
        </member>
        <member name="P:XFrame.Modules.Diagnotics.Log.Power">
            <summary>
            开关
            </summary>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.SetDomain(XFrame.Core.XDomain)">
            <summary>
            设置域
            </summary>
            <param name="domain">域</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.ConsumeWaitQueue">
            <summary>
            消耗队列中的Log输出到Logger中
            </summary>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.Print(XFrame.Modules.Diagnotics.LogLevel,System.Object[])">
            <summary>
            输出Log
            </summary>
            <param name="level">Log等级</param>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.Debug(System.Object[])">
            <summary>
            调试信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.Warning(System.Object[])">
            <summary>
            警告信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.Error(System.Object[])">
            <summary>
            错误信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.Fatal(System.Object[])">
            <summary>
            致命错误信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.Exception(System.Exception)">
            <summary>
            异常信息
            </summary>
            <param name="e">异常</param>
        </member>
        <member name="T:XFrame.Modules.Diagnotics.LogLevel">
            <summary>
            Log等级
            </summary>
        </member>
        <member name="F:XFrame.Modules.Diagnotics.LogLevel.Ignore">
            <summary>
            忽略
            </summary>
        </member>
        <member name="F:XFrame.Modules.Diagnotics.LogLevel.Debug">
            <summary>
            正常调试
            </summary>
        </member>
        <member name="F:XFrame.Modules.Diagnotics.LogLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:XFrame.Modules.Diagnotics.LogLevel.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:XFrame.Modules.Diagnotics.LogLevel.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="F:XFrame.Modules.Diagnotics.LogLevel.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:XFrame.Modules.Diagnotics.LogModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.AddLogger``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.GetLogger``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.Debug(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.Warning(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.Error(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.Fatal(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.Exception(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.DirectorAttribute">
            <summary>
            导演
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.DirectorAttribute.Default">
            <summary>
            是否为默认
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.DirectorAttribute.#ctor(System.Boolean)">
            <summary>
            构造器
            </summary>
            <param name="ifDefault">是否为默认导演</param>
        </member>
        <member name="T:XFrame.Modules.Plots.BlockDirector">
            <summary>
            故事导演类(阻塞式), 数据非持久化
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.BlockDirector.Module">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.BlockDirector.Play(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.BlockDirector.Play(XFrame.Modules.Plots.IStory[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.BlockDirector.Remove(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.BlockDirector.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.NonBlockDirector">
            <summary>
            故事导演类(非阻塞式), 数据非持久化
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.NonBlockDirector.Module">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.NonBlockDirector.Play(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.NonBlockDirector.Play(XFrame.Modules.Plots.IStory[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.NonBlockDirector.Remove(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.NonBlockDirector.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.PersistBlockDirector">
            <summary>
            故事导演类(阻塞式), 数据持久化
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.PersistBlockDirector.Module">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistBlockDirector.Play(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistBlockDirector.Play(XFrame.Modules.Plots.IStory[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistBlockDirector.Remove(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistBlockDirector.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.PersistNonBlockDirector">
            <summary>
            故事导演类(非阻塞式), 数据持久化
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.PersistNonBlockDirector.Module">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistNonBlockDirector.Play(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistNonBlockDirector.Play(XFrame.Modules.Plots.IStory[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistNonBlockDirector.Remove(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistNonBlockDirector.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.NewStoryEvent">
            <summary>
            新故事事件
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.NewStoryEvent.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.NewStoryEvent.Stories">
            <summary>
            故事列表
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.NewStoryEvent.Create(XFrame.Modules.Plots.IStory[])">
            <summary>
            创建事件
            </summary>
            <param name="stories">故事列表</param>
            <returns>事件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Plots.NewStoryEvent.Create(XFrame.Modules.Plots.IStory)">
            <summary>
            创建事件
            </summary>
            <param name="story">故事</param>
            <returns>事件实例</returns>
        </member>
        <member name="T:XFrame.Modules.Plots.PlotSectionFinishEvent">
            <summary>
            故事片段完成事件
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.PlotSectionFinishEvent.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.PlotSectionFinishEvent.Seciton">
            <summary>
            片段
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.PlotSectionFinishEvent.Create(XFrame.Modules.Plots.ISection)">
            <summary>
            创建事件
            </summary>
            <param name="section">片段</param>
            <returns>事件实例</returns>
        </member>
        <member name="T:XFrame.Modules.Plots.IDirector">
            <summary>
            故事导演
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IDirector.Module">
            <summary>
            所属模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.Play(XFrame.Modules.Plots.IStory[])">
            <summary>
            播放一组故事
            </summary>
            <param name="stories">故事列表</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.Play(XFrame.Modules.Plots.IStory)">
            <summary>
            播放一个故事
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.Remove(XFrame.Modules.Plots.IStory)">
            <summary>
            移除一个故事
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.Remove(System.String)">
            <summary>
            移除一个故事 
            </summary>
            <param name="storyName">故事名</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.CreateDataProvider(XFrame.Modules.Plots.IStory)">
            <summary>
            创建一个数据提供器
            </summary>
            <returns>数据提供器</returns>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.OnInit(XFrame.Modules.Plots.IPlotModule)">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.OnUpdate">
            <summary>
            更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.OnDestory">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="T:XFrame.Modules.Plots.IPlotHelper">
            <summary>
            故事辅助类
            </summary>
        </member>
        <member name="T:XFrame.Modules.Plots.IPlotModule">
            <summary>
            故事模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IPlotModule.Event">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IPlotModule.Helper">
            <summary>
            故事处理辅助类
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IPlotModule.NewStory(System.Type,System.Type,System.String)">
            <summary>
            请求一个新故事
            </summary>
            <param name="targetDirector">播放导演</param>
            <param name="helperType">辅助器类型</param>
            <param name="name">故事名</param>
            <returns>故事</returns>
        </member>
        <member name="M:XFrame.Modules.Plots.IPlotModule.NewStory(System.Type,System.String)">
            <summary>
            请求一个新故事
            </summary>
            <param name="targetDirector">播放导演</param>
            <param name="name">故事名</param>
            <returns>故事</returns>
        </member>
        <member name="T:XFrame.Modules.Plots.ISection">
            <summary>
            故事情节
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.ISection.Story">
            <summary>
            所属故事
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.ISection.Data">
            <summary>
            数据提供器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.ISection.IsDone">
            <summary>
            情节是否结束
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.ISection.OnCreate(XFrame.Modules.Plots.IStory,XFrame.Core.IDataProvider)">
            <summary>
            初始化生命周期
            </summary>
            <param name="story">故事</param>
            <param name="data">数据提供器</param>
        </member>
        <member name="M:XFrame.Modules.Plots.ISection.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.ISection.CanStart">
            <summary>
            是否可以开始播放
            </summary>
            <returns>true表示此情节可以开始播放</returns>
        </member>
        <member name="M:XFrame.Modules.Plots.ISection.OnStart">
            <summary>
            开始生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.ISection.OnUpdate">
            <summary>
            更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.ISection.OnFinish">
            <summary>
            完成生命周期
            </summary>
            <returns>返回true表示已处理完完成后的清理工作</returns>
        </member>
        <member name="T:XFrame.Modules.Plots.IStory">
            <summary>
            情节故事
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IStory.Director">
            <summary>
            所属导演类
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IStory.Helper">
            <summary>
            故事辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IStory.Sections">
            <summary>
            故事情节
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IStory.Count">
            <summary>
            故事情节数量
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IStory.Name">
            <summary>
            故事名称
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IStory.IsFinish">
            <summary>
            故事是否完成
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IStory.AddSection(System.Type)">
            <summary>
            添加一个故事情节
            </summary>
            <param name="type">故事情节实现类</param>
            <returns>故事</returns>
        </member>
        <member name="M:XFrame.Modules.Plots.IStory.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IStory.OnStart">
            <summary>
            开始生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IStory.OnUpdate">
            <summary>
            更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IStory.OnFinish">
            <summary>
            完成生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IStory.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="T:XFrame.Modules.Plots.IStoryHelper">
            <summary>
            故事辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IStoryHelper.OnStoryInit(XFrame.Modules.Plots.IStory)">
            <summary>
            故事被创建
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IStoryHelper.OnStoryStart(XFrame.Modules.Plots.IStory)">
            <summary>
            故事开始
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IStoryHelper.OnStoryUpdate(XFrame.Modules.Plots.IStory)">
            <summary>
            故事更新
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IStoryHelper.OnStoryFinish(XFrame.Modules.Plots.IStory)">
            <summary>
            故事完成
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IStoryHelper.OnStoryDestory(XFrame.Modules.Plots.IStory)">
            <summary>
            故事销毁
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="T:XFrame.Modules.Plots.PersistPlotDataProvider">
            <summary>
            故事数据提供器
            </summary>
        </member>
        <member name="T:XFrame.Modules.Plots.PlotModule">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Plots.PlotModule.Event">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Plots.PlotModule.Helper">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PlotModule.NewStory(System.Type,System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PlotModule.NewStory(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PlotModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PlotModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PlotModule.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.SectionBase">
            <summary>
            情节基类
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.SectionBase.Story">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Plots.SectionBase.Data">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Plots.SectionBase.IsDone">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.SectionBase.CanStart">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.SectionBase.OnFinish">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.SectionBase.OnStart">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.SectionBase.OnUpdate">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.SectionBase.OnInit">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.SectionState">
            <summary>
            故事情节状态
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.SectionState.WaitInit">
            <summary>
            等待初始化
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.SectionState.WaitStart">
            <summary>
            等待开始
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.SectionState.Running">
            <summary>
            播放中
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.SectionState.Finish">
            <summary>
            已完成
            </summary>
        </member>
        <member name="T:XFrame.Modules.Plots.StoryState">
            <summary>
            故事状态
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.StoryState.WaitStart">
            <summary>
            等待开始
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.StoryState.WaitRunning">
            <summary>
            等待播放
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.StoryState.Running">
            <summary>
            播放中
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.StoryState.Complete">
            <summary>
            已完成
            </summary>
        </member>
        <member name="T:XFrame.Modules.Pools.CommonPoolObject`1">
            <summary>
            通用池化对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XFrame.Modules.Pools.CommonPoolObject`1.Target">
            <summary>
            对象实例
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.CommonPoolObject`1.Valid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="T:XFrame.Modules.Pools.IPool">
            <summary>
            对象池
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPool.ObjectType">
            <summary>
            对象池持有类型
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPool.ObjectCount">
            <summary>
            当前池中对象数量
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPool.UseCount">
            <summary>
            使用中数量
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPool.Helper">
            <summary>
            对象池辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPool.Module">
            <summary>
            所属模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPool.AllObjects">
            <summary>
            池中所有对象
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPool.Require(System.Int32,System.Object)">
            <summary>
            获取一个对象
            </summary>
            <param name="poolKey">对象key</param>
            <param name="userData">对象数据</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:XFrame.Modules.Pools.IPool.Release(XFrame.Modules.Pools.IPoolObject)">
            <summary>
            释放一个对象 
            </summary>
            <param name="obj">待释放的对象</param>
        </member>
        <member name="M:XFrame.Modules.Pools.IPool.Spawn(System.Int32,System.Int32,System.Object,XFrame.Collections.XLinkList{XFrame.Modules.Pools.IPoolObject})">
            <summary>
            生成池对象
            </summary>
            <param name="poolKey">对象key</param>
            <param name="count">生成数量</param>
            <param name="userData">数据参数</param>
            <param name="toList">添加到列表</param>
        </member>
        <member name="M:XFrame.Modules.Pools.IPool.ClearObject">
            <summary>
            清除所有池化对象
            </summary>
        </member>
        <member name="T:XFrame.Modules.Pools.IPool`1">
            <summary>
            对象池
            </summary>
            <typeparam name="T">持有对象类型</typeparam>
        </member>
        <member name="M:XFrame.Modules.Pools.IPool`1.Release(`0)">
            <summary>
            释放一个对象
            </summary>
            <param name="obj">要释放的对象</param>
        </member>
        <member name="M:XFrame.Modules.Pools.IPool`1.Require(System.Int32,System.Object)">
            <summary>
            获取一个对象
            </summary>
            <param name="poolKey">对象key</param>
            <param name="userData">数据参数</param>
            <returns>是否是新创建的对象，返回false表示从对象池中创建</returns>
        </member>
        <member name="T:XFrame.Modules.Pools.IPoolHelper">
            <summary>
            对象池辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPoolHelper.CacheCount">
            <summary>
            池对象数量
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolHelper.Factory(System.Type,System.Int32,System.Object)">
            <summary>
            生成对象
            </summary>
            <param name="type">对象类型</param>
            <param name="poolKey">对象key</param>
            <param name="userData">参数数据</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolHelper.OnObjectCreate(XFrame.Modules.Pools.IPoolObject)">
            <summary>
            对象创建生命周期
            </summary>
            <param name="obj">目标对象</param>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolHelper.OnObjectRequest(XFrame.Modules.Pools.IPoolObject)">
            <summary>
            对象请求生命周期
            </summary>
            <param name="obj">目标对象</param>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolHelper.OnObjectRelease(XFrame.Modules.Pools.IPoolObject)">
            <summary>
            对象释放生命周期
            </summary>
            <param name="obj">目标对象</param>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolHelper.OnObjectDestroy(XFrame.Modules.Pools.IPoolObject)">
            <summary>
            对象释放生命周期
            </summary>
            <param name="obj">目标对象</param>
        </member>
        <member name="T:XFrame.Modules.Pools.IPoolModule">
            <summary>
            对象池模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPoolModule.AllPool">
            <summary>
            获取所有对象池的集合
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolModule.GetOrNew``1(XFrame.Modules.Pools.IPoolHelper)">
            <summary>
            创建或获取一个对象池
            </summary>
            <typeparam name="T">对象池持有类型</typeparam>
            <param name="helper">对象池使用辅助器</param>
            <returns>对象池</returns>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolModule.GetOrNew(System.Type,XFrame.Modules.Pools.IPoolHelper)">
            <summary>
            创建或获取一个对象池
            </summary>
            <param name="objType">对象池持有数据类型</param>
            <param name="helper">对象池使用辅助器</param>
            <returns>对象池</returns>
        </member>
        <member name="T:XFrame.Modules.Pools.IPoolObject">
            <summary>
            可池化对象
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPoolObject.PoolKey">
            <summary>
            对象Key，即使对象类型<see cref="T:System.Type"/>相同,当从对象池中获取对象时也会获取同key的对象。
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPoolObject.MarkName">
            <summary>
            对象名
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPoolObject.InPool">
            <summary>
            对象所处对象池
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolObject.OnCreate">
            <summary>
            从对象池中创建时被调用
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolObject.OnRequest">
            <summary>
            从对象池中请求时被调用
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolObject.OnRelease">
            <summary>
            释放到对象池中时被调用
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolObject.OnDelete">
            <summary>
            从对象池中销毁时被调用
            </summary>
        </member>
        <member name="T:XFrame.Modules.Pools.PoolHelperAttribute">
            <summary>
            对象池辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.PoolHelperAttribute.Target">
            <summary>
            持有类型
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolHelperAttribute.#ctor(System.Type)">
            <summary>
            构造器
            </summary>
            <param name="target">持有类型</param>
        </member>
        <member name="T:XFrame.Modules.Pools.PoolModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolModule.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Pools.PoolModule.AllPool">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolModule.GetOrNew``1(XFrame.Modules.Pools.IPoolHelper)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolModule.GetOrNew(System.Type,XFrame.Modules.Pools.IPoolHelper)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Pools.PoolObjectBase">
            <summary>
            可池化对象基类
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.PoolObjectBase.MarkName">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Pools.PoolObjectBase.PoolKey">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolObjectBase.OnCreateFromPool">
            <summary>
            第一次创建时的生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolObjectBase.OnRequestFromPool">
            <summary>
            从对象池中被请求时的生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolObjectBase.OnDestroyFromPool">
            <summary>
            从对象池中销毁的生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolObjectBase.OnReleaseFromPool">
            <summary>
            释放到对象池中时的生命周期
            </summary>
        </member>
        <member name="T:XFrame.Modules.Pools.References">
            <summary>
            对象池引用
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.References.Available">
            <summary>
            对象池是否准备好
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.References.SetDomain(XFrame.Core.XDomain)">
            <summary>
            设置域
            </summary>
            <param name="domain">域</param>
        </member>
        <member name="M:XFrame.Modules.Pools.References.Require(System.Type)">
            <summary>
            请求一个对象
            </summary>
            <param name="type">对象类型</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:XFrame.Modules.Pools.References.Require``1">
            <summary>
            请求一个对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns>对象实例</returns>
        </member>
        <member name="M:XFrame.Modules.Pools.References.Release(XFrame.Modules.Pools.IPoolObject)">
            <summary>
            释放一个对象
            </summary>
            <param name="obj">目标对象</param>
        </member>
        <member name="T:XFrame.Modules.Procedure.IProcedureModule">
            <summary>
            流程模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Procedure.IProcedureModule.Fsm">
            <summary>
            有限状态机
            </summary>
        </member>
        <member name="M:XFrame.Modules.Procedure.IProcedureModule.Redirect(System.String)">
            <summary>
            重定向启动流程
            </summary>
            <param name="name">流程类全名称</param>
        </member>
        <member name="M:XFrame.Modules.Procedure.IProcedureModule.Redirect(System.Type)">
            <summary>
            重定向启动流程
            </summary>
            <param name="type">流程类</param>
        </member>
        <member name="M:XFrame.Modules.Procedure.IProcedureModule.Add(System.Type)">
            <summary>
            添加流程类
            </summary>
            <param name="type">流程类</param>
        </member>
        <member name="M:XFrame.Modules.Procedure.IProcedureModule.Add``1">
            <summary>
            添加流程类
            </summary>
            <typeparam name="T">流程类</typeparam>
        </member>
        <member name="T:XFrame.Modules.Procedure.ProcedureBase">
            <summary>
            流程基类
            </summary>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureBase.OnInit(XFrame.Modules.StateMachine.IFsm)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureBase.OnEnter">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureBase.OnLeave">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Procedure.ProcedureModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureModule.OnStart">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Procedure.ProcedureModule.Fsm">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureModule.Redirect(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureModule.Redirect(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureModule.Add(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureModule.Add``1">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Rand.IRandModule">
            <summary>
            随机模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Rand.IRandModule.RandString(System.Int32)">
            <summary>
            随机产生 <paramref name="num"/> 长度的字符串
            </summary>
            <param name="num">字符串长度</param>
            <returns>字符串</returns>
        </member>
        <member name="M:XFrame.Modules.Rand.IRandModule.RandPath(System.Int32)">
            <summary>
            随机产生 <paramref name="num"/> 长度的路径
            </summary>
            <param name="num">字符串长度</param>
            <returns>字符串</returns>
        </member>
        <member name="M:XFrame.Modules.Rand.IRandModule.RandEnum``1(``0[])">
            <summary>
            随机一个枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="exlusion">剔除列表</param>
            <returns>枚举</returns>
        </member>
        <member name="T:XFrame.Modules.Rand.RandModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Rand.RandModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Rand.RandModule.RandString(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Rand.RandModule.RandPath(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Rand.RandModule.RandEnum``1(``0[])">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Resource.IResHandler">
            <summary>
            资源加载任务处理器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Resource.IResHandler.AssetPath">
            <summary>
            资源路径
            </summary>
        </member>
        <member name="P:XFrame.Modules.Resource.IResHandler.AssetType">
            <summary>
            资源类型
            </summary>
        </member>
        <member name="M:XFrame.Modules.Resource.IResHandler.Start">
            <summary>
            开始加载
            </summary>
        </member>
        <member name="T:XFrame.Modules.Resource.IResModule">
            <summary>
            资源模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Resource.IResModule.Helper">
            <summary>
            资源辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Resource.IResModule.Preload(System.Collections.Generic.IEnumerable{System.String},System.Type)">
            <summary>
            预加载资源
            </summary>
            <param name="resPaths">资源路径列表</param>
            <param name="type">资源类型</param>
            <returns>异步加载任务</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResModule.Preload(System.String,System.Type)">
            <summary>
            预加载资源
            </summary>
            <param name="resPath">资源路径</param>
            <param name="type">资源类型</param>
            <returns>异步加载任务</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResModule.Load(System.String,System.Type)">
            <summary>
            加载资源
            </summary>
            <param name="resPath">资源路径</param>
            <param name="type">资源类型</param>
            <returns>加载到的资源</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResModule.Load``1(System.String)">
            <summary>
            加载资源
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="resPath">资源路径</param>
            <returns>加载到的资源</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResModule.LoadAsync(System.String,System.Type)">
            <summary>
            异步加载资源
            </summary>
            <param name="resPath">资源路径</param>
            <param name="type">资源类型</param>
            <returns>加载到的资源</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResModule.LoadAsync``1(System.String)">
            <summary>
            异步加载资源
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="resPath">资源路径</param>
            <returns>加载到的资源</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResModule.Unload(System.Object)">
            <summary>
            卸载资源
            </summary>
            <param name="target">资源对象</param>
        </member>
        <member name="M:XFrame.Modules.Resource.IResModule.UnloadPre(System.String)">
            <summary>
            卸载预加载的资源
            </summary>
            <param name="resPath">资源路径</param>
        </member>
        <member name="M:XFrame.Modules.Resource.IResModule.UnloadAll">
            <summary>
            卸载所有资源
            </summary>
        </member>
        <member name="M:XFrame.Modules.Resource.IResModule.UnloadAllPre">
            <summary>
            卸载所有预加载的资源
            </summary>
        </member>
        <member name="T:XFrame.Modules.Resource.IResourceHelper">
            <summary>
            资源加载辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.OnInit(System.String)">
            <summary>
            资源加载初始化生命周期
            </summary>
            <param name="rootPath">资源根路径</param>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.SetResDirectHelper(XFrame.Modules.Resource.IResRedirectHelper)">
            <summary>
            设置资源重定向辅助器
            </summary>
            <param name="helper">辅助器</param>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.Load(System.String,System.Type)">
            <summary>
            加载资源
            </summary>
            <param name="resPath">资源路径</param>
            <param name="type">资源类型</param>
            <returns>加载到的资源</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.Load``1(System.String)">
            <summary>
            加载资源
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="resPath">资源路径</param>
            <returns>加载到的资源</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.LoadAsync(System.String,System.Type)">
            <summary>
            异步加载资源
            </summary>
            <param name="resPath">资源路径</param>
            <param name="type">资源类型</param>
            <returns>加载到的资源</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.LoadAsync``1(System.String)">
            <summary>
            异步加载资源
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="resPath">资源路径</param>
            <returns>加载到的资源</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.Unload(System.Object)">
            <summary>
            卸载资源
            </summary>
            <param name="target">卸载目标</param>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.UnloadAll">
            <summary>
            卸载所有资源
            </summary>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.DumpAll">
            <summary>
            查看当前缓存的所有对象
            </summary>
            <returns>资源对象列表</returns>
        </member>
        <member name="T:XFrame.Modules.Resource.IResRedirectHelper">
            <summary>
            资源重定位辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Resource.IResRedirectHelper.CanRedirect(System.String,System.Type)">
            <summary>
            检查是否可以重定向路径
            </summary>
            <param name="assetPath">资源路径</param>
            <param name="assetType">资源类型</param>
            <returns>true为可重定向路径</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResRedirectHelper.Redirect(System.String,System.Type,System.String@)">
            <summary>
            重定向资源路径
            </summary>
            <param name="assetPath">资源路径</param>
            <param name="assetType">资源类型</param>
            <param name="newAssetPath">重定向到的目标路径</param>
            <returns>true表示重定向成功</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResRedirectHelper.Redirect(System.String,System.Type)">
            <summary>
            重定向资源路径
            </summary>
            <param name="assetPath">资源路径</param>
            <param name="assetType">资源类型</param>
            <returns>如果可以重定向则返回重定向的路径，否则返回原始路径</returns>
        </member>
        <member name="T:XFrame.Modules.Resource.ResLoadTask">
            <summary>
            资源加载任务
            </summary>
        </member>
        <member name="M:XFrame.Modules.Resource.ResLoadTask.#ctor(XFrame.Modules.Resource.IResHandler,XFrame.Tasks.XTaskCancelToken)">
            <summary>
            构造器
            </summary>
            <param name="handler">资源处理器</param>
            <param name="cancelToken">取消绑定器</param>
        </member>
        <member name="M:XFrame.Modules.Resource.ResLoadTask.InnerStart">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Resource.ResLoadTask`1">
            <summary>
            资源加载任务
            </summary>
            <typeparam name="T">资源类型</typeparam>
        </member>
        <member name="M:XFrame.Modules.Resource.ResLoadTask`1.#ctor(XFrame.Modules.Resource.IResHandler,XFrame.Tasks.XTaskCancelToken)">
            <summary>
            构造器
            </summary>
            <param name="handler">资源处理器</param>
            <param name="cancelToken">取消绑定器</param>
        </member>
        <member name="M:XFrame.Modules.Resource.ResLoadTask`1.InnerStart">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResLoadTask`1.GetResult">
            <summary>
            加载到的资源
            </summary>
        </member>
        <member name="T:XFrame.Modules.Resource.ResModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResModule.SetHelper(System.Type)">
            <summary>
            设置资源辅助器
            </summary>
            <param name="type">辅助器类型</param>
            <returns>辅助器实例</returns>
        </member>
        <member name="P:XFrame.Modules.Resource.ResModule.Helper">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResModule.Preload(System.Collections.Generic.IEnumerable{System.String},System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResModule.Preload(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResModule.Load(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResModule.Load``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResModule.LoadAsync(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResModule.LoadAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResModule.Unload(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResModule.UnloadPre(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResModule.UnloadAll">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Resource.ResModule.UnloadAllPre">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Serialize.ISerializeHelper">
            <summary>
            Json序列化辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Serialize.ISerializeHelper.HandleType">
            <summary>
            处理文件类型
            </summary>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeHelper.OnInit(XFrame.Modules.Serialize.ISerializeModule)">
            <summary>
            初始化生命周期
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeHelper.Deserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="json">json文本</param>
            <param name="dataType">目标类型</param>
            <returns>反序列化到的对象</returns>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeHelper.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="json">json本文</param>
            <returns>序列化到的对象</returns>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeHelper.Serialize``1(``0)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="obj">需要序列化的对象</param>
            <returns>json本文</returns>
        </member>
        <member name="T:XFrame.Modules.Serialize.ISerializeModule">
            <summary>
            序列化模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeModule.DeserializeToObject(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="text">text本文</param>
            <param name="type">目标类型</param>
            <returns>序列化到的对象</returns>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeModule.DeserializeToObject(System.String,System.Int32,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="text">文本</param>
            <param name="textType">文本类型</param>
            <param name="type">目标类型</param>
            <returns>序列化到的对象</returns>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeModule.DeserializeToObject``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="text">text本文</param>
            <returns>序列化到的对象</returns>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeModule.DeserializeToObject``1(System.String,System.Int32)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="text">text本文</param>
            <param name="textType">文本类型</param>
            <returns>序列化到的对象</returns>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeModule.SerializeObjectToRaw(System.Object)">
            <summary>
            序列化 
            </summary>
            <param name="obj">需要序列化的对象</param>
            <returns>json本文</returns>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeModule.SerializeObjectToRaw(System.Object,System.Int32)">
            <summary>
            序列化
            </summary>
            <param name="obj">需要序列化的对象</param>
            <param name="textType">文本类型</param>
            <returns>json本文</returns>
        </member>
        <member name="T:XFrame.Modules.Serialize.SerializeModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Serialize.SerializeModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Serialize.SerializeModule.DeserializeToObject(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Serialize.SerializeModule.DeserializeToObject(System.String,System.Int32,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Serialize.SerializeModule.DeserializeToObject``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Serialize.SerializeModule.DeserializeToObject``1(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Serialize.SerializeModule.SerializeObjectToRaw(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Serialize.SerializeModule.SerializeObjectToRaw(System.Object,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Tasks.ITaskModule">
            <summary>
            任务模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Tasks.ITaskModule.ExecCount">
            <summary>
            一帧执行最大数量
            </summary>
        </member>
        <member name="P:XFrame.Modules.Tasks.ITaskModule.TaskTimeout">
            <summary>
            任务最大超时时间
            </summary>
        </member>
        <member name="M:XFrame.Modules.Tasks.ITaskModule.Register(XFrame.Core.IUpdater)">
            <summary>
            注册可更新的任务
            </summary>
            <param name="task">任务</param>
        </member>
        <member name="M:XFrame.Modules.Tasks.ITaskModule.UnRegister(XFrame.Core.IUpdater)">
            <summary>
            取消任务的注册
            </summary>
            <param name="task">任务</param>
        </member>
        <member name="T:XFrame.Modules.Tasks.TaskModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Tasks.TaskModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Tasks.TaskModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Tasks.TaskModule.ExecCount">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Tasks.TaskModule.TaskTimeout">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Tasks.TaskModule.Register(XFrame.Core.IUpdater)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Tasks.TaskModule.UnRegister(XFrame.Core.IUpdater)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Threads.MainSynchronizationContext">
            <summary>
            主线程上下文处理
            </summary>
        </member>
        <member name="P:XFrame.Modules.Threads.MainSynchronizationContext.ExecTimeout">
            <summary>
            最大超时(毫秒)
            </summary>
        </member>
        <member name="P:XFrame.Modules.Threads.MainSynchronizationContext.Id">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Threads.MainSynchronizationContext.Domain">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Threads.MainSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Times.CDTimer">
            <summary>
            CD计时器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Times.CDTimer.Name">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Times.CDTimer.MarkName">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.#ctor">
            <summary>
            构造CD计时器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Create(XFrame.Modules.Times.CDTimer.IUpdater)">
            <summary>
            构造CD计时器
            </summary>
            <param name="updater">时间更新器</param>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Create">
            <summary>
            构造CD计时器
            </summary>
            <returns>时间更新器</returns>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Create(System.String)">
            <summary>
            构造CD计时器
            </summary>
            <param name="name">计时器名</param>
            <returns>时间更新器</returns>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Create(System.String,XFrame.Modules.Times.CDTimer.IUpdater)">
            <summary>
            构造CD计时器
            </summary>
            <param name="name">计时器名</param>
            <param name="updater">更新器</param>
            <returns>时间更新器</returns>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.SetUpdater(XFrame.Modules.Times.CDTimer.IUpdater)">
            <summary>
            设置更新器
            </summary>
            <param name="updater"></param>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Record(System.Int32,System.Single)">
            <summary>
            开始记录一个CD
            </summary>
            <param name="key">CD键(使用此键查看CD状态)</param>
            <param name="cd">cd时间</param>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Record(System.Single)">
            <summary>
            记录默认键的CD
            </summary>
            <param name="cd">cd时间</param>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Reset(System.Int32)">
            <summary>
            重置一个cd, 调用后重置CD时间
            </summary>
            <param name="key">CD键</param>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Reset">
            <summary>
            重置CD
            </summary>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Check(System.Int32,System.Boolean)">
            <summary>
            检查一个CD的状态
            </summary>
            <param name="key">CD键</param>
            <param name="reset">如果检查到的状态为到期，是否重置CD时间</param>
            <returns>true表示到期，false表示未到CD时间</returns>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Check(System.Boolean)">
            <summary>
            检查一个CD的状态
            </summary>
            <param name="reset">如果检查到的状态为到期，是否重置CD时间</param>
            <returns>true表示到期，false表示未到CD时间</returns>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.CheckTime(System.Int32)">
            <summary>
            检查CD的时间状态
            </summary>
            <param name="key">CD键</param>
            <returns>时间</returns>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.CheckTime">
            <summary>
            检查默认键的CD时间状态
            </summary>
            <returns>时间</returns>
        </member>
        <member name="T:XFrame.Modules.Times.CDTimer.IUpdater">
            <summary>
            CD计时器的更新器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Times.CDTimer.IUpdater.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.GetDeaultUpdater(XFrame.Modules.Times.ITimeModule)">
            <summary>
            获取默认更新器
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="T:XFrame.Modules.Times.CDTimer.DefaultTimer">
            <summary>
            默认更新器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.DefaultTimer.#ctor(XFrame.Modules.Times.ITimeModule)">
            <summary>
            构造器
            </summary>
            <param name="module">所属模块</param>
        </member>
        <member name="T:XFrame.Modules.Times.ITimeModule">
            <summary>
            时间模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Times.ITimeModule.Time">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="P:XFrame.Modules.Times.ITimeModule.EscapeTime">
            <summary>
            上帧到此帧逃逸时间
            </summary>
        </member>
        <member name="P:XFrame.Modules.Times.ITimeModule.Frame">
            <summary>
            当前帧数
            </summary>
        </member>
        <member name="M:XFrame.Modules.Times.ITimeModule.GetTimers">
            <summary>
            获取所有注册的计时器
            </summary>
            <returns>计时器</returns>
        </member>
        <member name="T:XFrame.Modules.Times.TimeModule">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Times.TimeModule.Time">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Times.TimeModule.EscapeTime">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Times.TimeModule.Frame">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Times.TimeModule.GetTimers">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Times.TimeModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Times.TimeModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Reflection.ITypeCheckHelper">
            <summary>
            类型检查辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Reflection.ITypeCheckHelper.AssemblyList">
            <summary>
            程序集列表
            </summary>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeCheckHelper.CheckType(System.Type)">
            <summary>
            检查类型
            </summary>
            <param name="type">目标类型</param>
            <returns>true表示类型通过检查</returns>
        </member>
        <member name="T:XFrame.Modules.Reflection.ITypeModule">
            <summary>
            类型模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.CreateInstance``1(System.Object[])">
            <summary>
            创建对象实例
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="args">构造参数</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.CreateInstance(System.Type,System.Object[])">
            <summary>
            创建对象实例
            </summary>
            <param name="type">对象类型</param>
            <param name="args">构造参数</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.CreateInstance(System.String,System.Object[])">
            <summary>
            创建对象实例
            </summary>
            <param name="typeName">对象类型名</param>
            <param name="args">构造参数</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.LoadAssembly(System.Byte[])">
            <summary>
            加载程序集
            </summary>
            <param name="data">程序集</param>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.OnTypeChange(System.Action)">
            <summary>
            注册类型改变事件
            </summary>
            <param name="handler">处理函数</param>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.GetType(System.String)">
            <summary>
            通过名称获取类型
            </summary>
            <param name="name">类型名</param>
            <returns>类型</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.GetOrNewWithAttr``1">
            <summary>
            获取(不存在时创建)一个类型系统
            类型都具有所给定的属性类
            </summary>
            <typeparam name="T">Attribute属性类</typeparam>
            <returns>获取到的类型系统</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.GetOrNewWithAttr(System.Type)">
            <summary>
            获取(不存在时创建)一个类型系统
            类型都具有所给定的属性类
            </summary>
            <param name="pType">Attribute属性类</param>
            <returns>获取到的类型系统</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.HasAttribute``1(System.Type)">
            <summary>
            检查类型是否存在特性
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="classType">目标类型</param>
            <returns>true为存在特性</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.HasAttribute(System.Type,System.Type)">
            <summary>
            检查类型是否存在特性
            </summary>
            <param name="classType">目标类型</param>
            <param name="pType">特性类型</param>
            <returns>true为存在特性</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.GetAttributes``1(System.Type)">
            <summary>
            获取类型的所有特性
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="classType">目标类型</param>
            <returns>特性数组</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.GetAttribute``1(System.Type)">
            <summary>
            获取类型的特性
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="classType">目标类型</param>
            <returns>特性</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.GetAttributes(System.Type,System.Type)">
            <summary>
            获取类型的所有特性
            </summary>
            <param name="classType">目标类型</param>
            <param name="pType">特性类型</param>
            <returns>特性数组</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.GetAttribute(System.Type,System.Type)">
            <summary>
            获取类型的特性
            </summary>
            <param name="classType">目标类型</param>
            <param name="pType">特性类型</param>
            <returns>特性</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.GetOrNew``1">
            <summary>
            获取(不存在时创建)一个类型系统
            类型都是所给定的类型或子类
            </summary>
            <typeparam name="T">基类</typeparam>
            <returns>获取到的类型系统</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.GetOrNew(System.Type)">
            <summary>
            获取(不存在时创建)一个类型系统
            类型都是所给定的类型或子类
            </summary>
            <param name="baseType">基类</param>
            <returns>获取到的类型系统</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.ITypeModule.GetAllType">
            <summary>
            获取所有类型
            </summary>
            <returns>类型列表</returns>
        </member>
        <member name="T:XFrame.Modules.Reflection.TypeModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.CreateInstance``1(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.CreateInstance(System.Type,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.CreateInstance(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.LoadAssembly(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.OnTypeChange(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetOrNewWithAttr``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetOrNewWithAttr(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.HasAttribute``1(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.HasAttribute(System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetAttribute``1(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetAttributes``1(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetAttribute(System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetAttributes(System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetOrNew``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetOrNew(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetAllType">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Reflection.TypeSystem">
            <summary>
            类型系统
            </summary>
        </member>
        <member name="P:XFrame.Modules.Reflection.TypeSystem.Count">
            <summary>
            类型数量
            </summary>
        </member>
        <member name="P:XFrame.Modules.Reflection.TypeSystem.Main">
            <summary>
            主类
            </summary>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.AddKey(System.Int32,System.Type)">
            <summary>
            以key键标记一个类型
            </summary>
            <param name="key">键</param>
            <param name="type">要标记的类型</param>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.GetKey(System.Int32)">
            <summary>
            获取一个被标记的类型
            </summary>
            <param name="key">键</param>
            <returns>获取到的类型</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.GetByName(System.String)">
            <summary>
            通过名字获取类型
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.TryGetByName(System.String,System.Type@)">
            <summary>
            尝试通过名字获取类型
            </summary>
            <param name="name">类型名</param>
            <param name="type">类型</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.GetOrNewBySub``1">
            <summary>
            获取(不存在时创建)子类类型系统
            </summary>
            <typeparam name="T">基类</typeparam>
            <returns>获取到的类型系统</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.GetOrNewBySub(System.Type)">
            <summary>
            获取(不存在时创建)子类类型系统
            </summary>
            <param name="type">基类</param>
            <returns>获取到的类型系统</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.GetEnumerator">
            <summary>
            迭代所有类型
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.SetIt(XFrame.Collections.XItType)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.ToArray">
            <summary>
            获取所有类型
            </summary>
            <returns></returns>
        </member>
        <member name="T:XFrame.Modules.Reflection.XAttribute">
            <summary>
            可自动被类型系统添加
            </summary>
        </member>
        <member name="P:XFrame.Modules.Reflection.XAttribute.Id">
            <summary>
            类型key
            </summary>
        </member>
        <member name="M:XFrame.Modules.Reflection.XAttribute.#ctor(System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="id">类型key</param>
        </member>
        <member name="T:XFrame.Tasks.IProTaskHandler">
            <summary>
            带进度任务处理器
            </summary>
        </member>
        <member name="P:XFrame.Tasks.IProTaskHandler.Data">
            <summary>
            加载到的数据
            </summary>
        </member>
        <member name="P:XFrame.Tasks.IProTaskHandler.IsDone">
            <summary>
            是否加载完成
            </summary>
        </member>
        <member name="P:XFrame.Tasks.IProTaskHandler.Pro">
            <summary>
            加载进度
            </summary>
        </member>
        <member name="M:XFrame.Tasks.IProTaskHandler.OnCancel">
            <summary>
            任务取消生命周期函数
            </summary>
        </member>
        <member name="T:XFrame.Tasks.ITask">
            <summary>
            任务
            </summary>
        </member>
        <member name="P:XFrame.Tasks.ITask.IsCompleted">
            <summary>
            是否完成
            </summary>
        </member>
        <member name="P:XFrame.Tasks.ITask.Progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="P:XFrame.Tasks.ITask.TaskAction">
            <summary>
            任务行为
            </summary>
        </member>
        <member name="M:XFrame.Tasks.ITask.Coroutine">
            <summary>
            任务以协程方式执行
            </summary>
        </member>
        <member name="M:XFrame.Tasks.ITask.SetAction(XFrame.Tasks.XTaskAction)">
            <summary>
            设置任务行为
            </summary>
            <param name="action">行为</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.ITask.Bind(XFrame.Tasks.ITaskBinder)">
            <summary>
            绑定对象
            </summary>
            <param name="binder">绑定器</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.ITask.Cancel(System.Boolean)">
            <summary>
            取消任务,未开始执行的任务不会被取消
            </summary>
            <param name="subTask">是否取消子任务</param>
        </member>
        <member name="M:XFrame.Tasks.ITask.OnCompleted(System.Action{XFrame.Tasks.XTaskState})">
            <summary>
            注册完成回调事件
            </summary>
            <param name="hanlder">回调处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.ITask.OnCompleted(System.Action)">
            <summary>
            注册完成回调事件
            </summary>
            <param name="handler">回调处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="T:XFrame.Tasks.ITaskBinder">
            <summary>
            任务绑定对象
            </summary>
        </member>
        <member name="P:XFrame.Tasks.ITaskBinder.IsDisposed">
            <summary>
            是否已销毁，销毁时任务会被取消
            </summary>
        </member>
        <member name="T:XFrame.Tasks.XProTask">
            <summary>
            带进度状态的任务
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask.m_OnUpdate">
            <summary>
            更新事件回调
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask.m_OnDataComplete">
            <summary>
            完成回调
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask.m_OnComplete">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask.m_Binder">
            <summary>
            任务绑定器
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask.m_TaskAction">
            <summary>
            任务行为
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask.m_CancelToken">
            <summary>
            取消绑定器
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask.m_ProHandler">
            <summary>
            进度处理器
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XProTask.TaskAction">
            <summary>
            任务行为 
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XProTask.SetAction(XFrame.Tasks.XTaskAction)">
            <summary>
            设置任务行为 
            </summary>
            <param name="action">行为枚举</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XProTask.GetResult">
            <summary>
            获取结果
            </summary>
            <returns>返回结果</returns>
        </member>
        <member name="P:XFrame.Tasks.XProTask.IsCompleted">
            <summary>
            是否完成
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XProTask.Progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XProTask.#ctor(XFrame.Tasks.IProTaskHandler,XFrame.Tasks.XTaskCancelToken)">
            <summary>
            构造器
            </summary>
            <param name="handler">进度处理器</param>
            <param name="cancelToken">取消绑定器</param>
        </member>
        <member name="M:XFrame.Tasks.XProTask.InnerStart">
            <summary>
            开始任务
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XProTask.InnerExecComplete">
            <summary>
            完成任务
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XProTask.Coroutine">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XProTask.Bind(XFrame.Tasks.ITaskBinder)">
            <summary>
            绑定对象
            </summary>
            <param name="binder">绑定器</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XProTask.SetResult">
            <summary>
            设置结果
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XProTask.GetAwaiter">
            <summary>
            await 
            </summary>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XProTask.Cancel(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XProTask.OnUpdate(System.Action{System.Single})">
            <summary>
            注册更新事件
            </summary>
            <param name="handler">事件处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XProTask.OnCompleted(System.Action{XFrame.Tasks.XTaskState})">
            <summary>
            注册完成事件
            </summary>
            <param name="handler">事件处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XProTask.OnCompleted(System.Action)">
            <summary>
            注册完成事件
            </summary>
            <param name="handler">事件处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XProTask.OnCompleted(System.Action{System.Object})">
            <summary>
            注册完成事件
            </summary>
            <param name="handler">事件处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="T:XFrame.Tasks.XProTask`1">
            <summary>
            带进度状态的任务
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask`1.m_OnUpdate">
            <summary>
            更新事件回调
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask`1.m_OnComplete">
            <summary>
            完成回调
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask`1.m_OnDataComplete">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask`1.m_Binder">
            <summary>
            任务绑定器
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask`1.m_TaskAction">
            <summary>
            任务行为
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask`1.m_CancelToken">
            <summary>
            取消绑定器
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XProTask`1.m_ProHandler">
            <summary>
            进度处理器
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XProTask`1.TaskAction">
            <summary>
            任务行为 
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.SetAction(XFrame.Tasks.XTaskAction)">
            <summary>
            设置任务行为 
            </summary>
            <param name="action">行为枚举</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.GetResult">
            <summary>
            获取结果
            </summary>
            <returns>返回结果</returns>
        </member>
        <member name="P:XFrame.Tasks.XProTask`1.IsCompleted">
            <summary>
            是否完成
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XProTask`1.Progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.#ctor(XFrame.Tasks.IProTaskHandler,XFrame.Tasks.XTaskCancelToken)">
            <summary>
            构造器
            </summary>
            <param name="handler">进度处理器</param>
            <param name="cancelToken">取消绑定器</param>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.InnerStart">
            <summary>
            开始任务
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.InnerExecComplete">
            <summary>
            完成任务
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.Coroutine">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.Bind(XFrame.Tasks.ITaskBinder)">
            <summary>
            绑定对象
            </summary>
            <param name="binder">绑定器</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.SetResult">
            <summary>
            设置结果
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.GetAwaiter">
            <summary>
            await 
            </summary>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.Cancel(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.OnUpdate(System.Action{System.Single})">
            <summary>
            注册更新事件
            </summary>
            <param name="handler">事件处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.OnCompleted(System.Action{XFrame.Tasks.XTaskState})">
            <summary>
            注册完成事件
            </summary>
            <param name="handler">事件处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.OnCompleted(System.Action)">
            <summary>
            注册完成事件
            </summary>
            <param name="handler">事件处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XProTask`1.OnCompleted(System.Action{`0})">
            <summary>
            注册完成事件
            </summary>
            <param name="handler">事件处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="T:XFrame.Tasks.XTask">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTask.Condition(System.Func{System.Boolean},System.Boolean)">
            <summary>
            构建带条件的任务
            </summary>
            <param name="fun">条件函数</param>
            <param name="nextFrameExec">是否下一帧执行</param>
            <returns>任务实例</returns>
        </member>
        <member name="M:XFrame.Tasks.XTask.Condition(System.Func{XFrame.Core.Pair{System.Boolean,System.Object}},System.Boolean)">
            <summary>
            构建带条件的任务
            </summary>
            <param name="fun">条件函数</param>
            <param name="nextFrameExec">是否下一帧执行</param>
            <returns>任务实例</returns>
        </member>
        <member name="M:XFrame.Tasks.XTask.Condition(System.Func{System.Single},System.Boolean)">
            <summary>
            构建带条件的任务
            </summary>
            <param name="fun">条件函数</param>
            <param name="nextFrameExec">是否下一帧执行</param>
            <returns>任务实例</returns>
        </member>
        <member name="M:XFrame.Tasks.XTask.Beat(System.Single,System.Func{System.Boolean},System.Boolean)">
            <summary>
            执行一个心跳任务
            </summary>
            <param name="timeGap">间隔</param>
            <param name="fun">条件函数</param>
            <param name="nextFrameExec">是否下一帧执行</param>
            <returns>任务实例</returns>
        </member>
        <member name="P:XFrame.Tasks.XTask.TaskAction">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTask.SetAction(XFrame.Tasks.XTaskAction)">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Tasks.XTask.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Tasks.XTask.Progress">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTask.#ctor(XFrame.Tasks.XTaskCancelToken)">
            <summary>
            构造器
            </summary>
            <param name="cancelToken">取消绑定器</param>
        </member>
        <member name="M:XFrame.Tasks.XTask.Coroutine">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTask.Bind(XFrame.Tasks.ITaskBinder)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTask.SetResult">
            <summary>
            设置结果
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTask.GetResult">
            <summary>
            获取结果
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTask.GetAwaiter">
            <summary>
            await
            </summary>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XTask.Cancel(System.Boolean)">
            <summary>
            取消任务
            </summary>
            <param name="subTask">是否取消子任务</param>
        </member>
        <member name="M:XFrame.Tasks.XTask.OnCompleted(System.Action{XFrame.Tasks.XTaskState})">
            <summary>
            注册完成事件
            </summary>
            <param name="handler">处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XTask.OnCompleted(System.Action)">
            <summary>
            注册完成事件
            </summary>
            <param name="handler">处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XTask.NextFrame">
            <summary>
            等待下一帧
            </summary>
            <returns>任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XTask.Delay(System.Single,System.Boolean)">
            <summary>
            延迟任务
            </summary>
            <param name="time">时间，秒为单位</param>
            <param name="nextFrameExec">是否下一帧开始执行</param>
            <returns>任务</returns>
        </member>
        <member name="T:XFrame.Tasks.XTaskAction">
            <summary>
            任务行为
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XTaskAction.CompleteWhenSubTaskFailure">
            <summary>
            子任务失败时直接完成
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XTaskAction.ContinueWhenSubTaskFailure">
            <summary>
            子任务失败时继续任务
            </summary>
        </member>
        <member name="T:XFrame.Tasks.XTaskAsyncMethodBuilder">
            <summary>
            XTask异步方法构建器
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XTaskAsyncMethodBuilder.Task">
            <summary>
            持有任务
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder.Create">
            <summary>
            创建构建器
            </summary>
            <returns>构建器</returns>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder.SetResult">
            <summary>
            设置任务结果
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder.Start``1(``0@)">
            <summary>
            开始执行状态机
            </summary>
            <typeparam name="TStateMachine">异步状态机类型</typeparam>
            <param name="stateMachine">异步状态机</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            等待一个任务
            </summary>
            <typeparam name="TAwaiter">等待器类型</typeparam>
            <typeparam name="TStateMachine">状态机类型</typeparam>
            <param name="awaiter">等待器, GetAwaiter返回的对象</param>
            <param name="stateMachine">状态机</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            等待一个任务
            </summary>
            <typeparam name="TAwaiter">等待器类型</typeparam>
            <typeparam name="TStateMachine">状态机类型</typeparam>
            <param name="awaiter">等待器, GetAwaiter返回的对象</param>
            <param name="stateMachine">状态机</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder.SetException(System.Exception)">
            <summary>
            当发生异常时被调用
            </summary>
            <param name="e">异常类型</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            设置状态机
            </summary>
            <param name="stateMachine">状态机</param>
        </member>
        <member name="T:XFrame.Tasks.XTaskCancelToken">
            <summary>
            取消绑定器
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XTaskCancelToken.Disposed">
            <summary>
            是否已经销毁
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XTaskCancelToken.Canceled">
            <summary>
            是否取消
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskCancelToken.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskCancelToken.AddHandler(System.Action)">
            <summary>
            添加取消时的处理函数
            </summary>
            <param name="handler">处理函数</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskCancelToken.RemoveHandler(System.Action)">
            <summary>
            移除处理函数
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:XFrame.Tasks.XTaskCancelToken.Dispose">
            <summary>
            释放到池中
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskCancelToken.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskCancelToken.Invoke">
            <summary>
            执行取消函数，且抛出异常
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskCancelToken.InvokeWithoutException">
            <summary>
            执行取消函数，不抛出异常
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskCancelToken.Require">
            <summary>
            请求一个取消绑定器
            </summary>
            <returns>取消绑定器</returns>
        </member>
        <member name="M:XFrame.Tasks.XTaskCancelToken.Release(XFrame.Tasks.XTaskCancelToken)">
            <summary>
            请求一个取消绑定器
            </summary>
            <param name="token">取消绑定器</param>
        </member>
        <member name="T:XFrame.Tasks.XTaskCompleted">
            <summary>
            处于完成状态的任务
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompleted.GetAwaiter">
            <summary>
            await
            </summary>
            <returns>返回当前任务</returns>
        </member>
        <member name="P:XFrame.Tasks.XTaskCompleted.IsCompleted">
            <summary>
            完成状态，返回true
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XTaskCompleted.Progress">
            <summary>
            任务进度，返回最大值
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XTaskCompleted.TaskAction">
            <summary>
            任务行为，返回<see cref="F:XFrame.Tasks.XTaskAction.ContinueWhenSubTaskFailure"/>
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompleted.SetAction(XFrame.Tasks.XTaskAction)">
            <summary>
            设置任务行为，无效设置
            </summary>
            <param name="action">行为</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompleted.GetResult">
            <summary>
            获取结果
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompleted.Coroutine">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompleted.Cancel(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompleted.Bind(XFrame.Tasks.ITaskBinder)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompleted.OnCompleted(System.Action{XFrame.Tasks.XTaskState})">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompleted.OnCompleted(System.Action)">
            <summary>
            注册完成事件处理函数
            </summary>
            <param name="handler">处理函数</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompleted.UnsafeOnCompleted(System.Action)">
            <summary>
            注册完成事件处理函数
            </summary>
            <param name="handler">处理函数</param>
        </member>
        <member name="T:XFrame.Tasks.XTaskCompletedAsyncMethodBuilder">
            <summary>
            任务构建器
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XTaskCompletedAsyncMethodBuilder.Task">
            <summary>
            持有任务
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompletedAsyncMethodBuilder.Create">
            <summary>
            创建任务构建器
            </summary>
            <returns>构建器</returns>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompletedAsyncMethodBuilder.SetResult">
            <summary>
            设置任务结果
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompletedAsyncMethodBuilder.Start``1(``0@)">
            <summary>
            开始执行状态机
            </summary>
            <typeparam name="TStateMachine">异步状态机类型</typeparam>
            <param name="stateMachine">异步状态机</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompletedAsyncMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            等待一个任务
            </summary>
            <typeparam name="TAwaiter">等待器类型</typeparam>
            <typeparam name="TStateMachine">状态机类型</typeparam>
            <param name="awaiter">等待器, GetAwaiter返回的对象</param>
            <param name="stateMachine">状态机</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompletedAsyncMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            等待一个任务
            </summary>
            <typeparam name="TAwaiter">等待器类型</typeparam>
            <typeparam name="TStateMachine">状态机类型</typeparam>
            <param name="awaiter">等待器, GetAwaiter返回的对象</param>
            <param name="stateMachine">状态机</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompletedAsyncMethodBuilder.SetException(System.Exception)">
            <summary>
            当发生异常时被调用
            </summary>
            <param name="e">异常类型</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskCompletedAsyncMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            设置状态机
            </summary>
            <param name="stateMachine">状态机</param>
        </member>
        <member name="T:XFrame.Tasks.XTask`1">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Tasks.XTask`1.TaskAction">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTask`1.SetAction(XFrame.Tasks.XTaskAction)">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Tasks.XTask`1.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Tasks.XTask`1.Progress">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTask`1.#ctor(XFrame.Tasks.XTaskCancelToken)">
            <summary>
            构造器
            </summary>
            <param name="cancelToken">取消绑定器</param>
        </member>
        <member name="M:XFrame.Tasks.XTask`1.Coroutine">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTask`1.Bind(XFrame.Tasks.ITaskBinder)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tasks.XTask`1.Cancel(System.Boolean)">
            <summary>
            取消任务
            </summary>
            <param name="subTask">是否取消子任务</param>
        </member>
        <member name="M:XFrame.Tasks.XTask`1.SetResult(`0)">
            <summary>
            设置结果
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTask`1.GetResult">
            <summary>
            获取结果
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTask`1.GetAwaiter">
            <summary>
            await
            </summary>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XTask`1.OnCompleted(System.Action{XFrame.Tasks.XTaskState})">
            <summary>
            注册完成事件
            </summary>
            <param name="handler">处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XTask`1.OnCompleted(System.Action)">
            <summary>
            注册完成事件
            </summary>
            <param name="handler">处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="M:XFrame.Tasks.XTask`1.OnCompleted(System.Action{`0})">
            <summary>
            注册完成事件
            </summary>
            <param name="handler">处理函数</param>
            <returns>返回当前任务</returns>
        </member>
        <member name="T:XFrame.Tasks.XTaskAsyncMethodBuilder`1">
            <summary>
            任务构建器
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XTaskAsyncMethodBuilder`1.Task">
            <summary>
            持有任务
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder`1.Create">
            <summary>
            创建任务构建器
            </summary>
            <returns>构建器</returns>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder`1.SetResult(`0)">
            <summary>
            设置任务结果
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder`1.Start``1(``0@)">
            <summary>
            开始执行状态机
            </summary>
            <typeparam name="TStateMachine">异步状态机类型</typeparam>
            <param name="stateMachine">异步状态机</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            等待一个任务
            </summary>
            <typeparam name="TAwaiter">等待器类型</typeparam>
            <typeparam name="TStateMachine">状态机类型</typeparam>
            <param name="awaiter">等待器, GetAwaiter返回的对象</param>
            <param name="stateMachine">状态机</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            等待一个任务
            </summary>
            <typeparam name="TAwaiter">等待器类型</typeparam>
            <typeparam name="TStateMachine">状态机类型</typeparam>
            <param name="awaiter">等待器, GetAwaiter返回的对象</param>
            <param name="stateMachine">状态机</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder`1.SetException(System.Exception)">
            <summary>
            当发生异常时被调用
            </summary>
            <param name="e">异常类型</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskAsyncMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            设置状态机
            </summary>
            <param name="stateMachine">状态机</param>
        </member>
        <member name="T:XFrame.Tasks.XTaskHelper">
            <summary>
            任务配置器
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XTaskHelper.ExceptionHandler">
            <summary>
            异常处理
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XTaskHelper.UseToken">
            <summary>
            通用取消绑定器
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XTaskHelper.UseAction">
            <summary>
            通用任务行为
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XTaskHelper.Time">
            <summary>
            任务使用时间模块
            </summary>
        </member>
        <member name="P:XFrame.Tasks.XTaskHelper.Domain">
            <summary>
            所处域
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XTaskHelper.MIN_PROGRESS">
            <summary>
            进度最小值
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XTaskHelper.MAX_PROGRESS">
            <summary>
            进度最大值
            </summary>
        </member>
        <member name="M:XFrame.Tasks.XTaskHelper.SetDomain(XFrame.Core.XDomain)">
            <summary>
            设置域
            </summary>
            <param name="domain">域</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskHelper.Register(XFrame.Core.IUpdater)">
            <summary>
            注册可更新任务
            </summary>
            <param name="task">任务</param>
        </member>
        <member name="M:XFrame.Tasks.XTaskHelper.UnRegister(XFrame.Core.IUpdater)">
            <summary>
            取消注册可更新任务
            </summary>
            <param name="task">任务</param>
        </member>
        <member name="T:XFrame.Tasks.XTaskState">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XTaskState.None">
            <summary>
            无效
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XTaskState.Normal">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XTaskState.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XTaskState.BinderDispose">
            <summary>
            绑定器取消
            </summary>
        </member>
        <member name="F:XFrame.Tasks.XTaskState.ChildCancel">
            <summary>
            子任务取消
            </summary>
        </member>
        <member name="T:XFrame.Tools.InitChecker">
            <summary>
            初始化检查器
            </summary>
        </member>
        <member name="M:XFrame.Tools.InitChecker.Trigger">
            <summary>
            触发初始化成功
            </summary>
        </member>
        <member name="M:XFrame.Tools.InitChecker.Listen(System.Action)">
            <summary>
            监听触发
            </summary>
            <param name="callback">处理函数</param>
        </member>
        <member name="M:XFrame.Tools.InitChecker.OnReleaseFromPool">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tools.InitChecker.OnRequestFromPool">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Tools.InitChecker.Create">
            <summary>
            创建初始化检查器
            </summary>
            <returns></returns>
        </member>
        <member name="M:XFrame.Tools.InitChecker.op_Implicit(XFrame.Tools.InitChecker)~System.Boolean">
            <summary>
            获取检查器状态
            </summary>
            <param name="checker">检查器</param>
        </member>
        <member name="T:XFrame.Utility.PathUtility">
            <summary>
            路径常用方法
            </summary>
        </member>
        <member name="M:XFrame.Utility.PathUtility.Format1(System.String)">
            <summary>
            将路径 \\ 格式化为 /
            </summary>
            <param name="path">路径</param>
            <returns>格式化后的路径</returns>
        </member>
        <member name="M:XFrame.Utility.PathUtility.Format2(System.String)">
            <summary>
            将路径 / 格式化为 \\
            </summary>
            <param name="path">路径</param>
            <returns>格式化后的路径</returns>
        </member>
        <member name="M:XFrame.Utility.PathUtility.RemoveEnterChar(System.String)">
            <summary>
            移除路径中的回车符 \n \r
            </summary>
            <param name="path">路径</param>
            <returns>格式化后的路径</returns>
        </member>
        <member name="M:XFrame.Utility.PathUtility.CheckFileName(System.String,System.String@,System.String@)">
            <summary>
            检查文件路径层级
            </summary>
            <param name="fullPath">文件路径</param>
            <param name="thisName">当前路径</param>
            <param name="suplusName">剩余路径</param>
            <returns>层级数</returns>
        </member>
        <member name="T:XFrame.Utility.TypeUtility">
            <summary>
            类型常用方法
            </summary>
        </member>
        <member name="M:XFrame.Utility.TypeUtility.GetSimpleName(System.String)">
            <summary>
            取得简易名称
            </summary>
            <param name="fullName">类型全名</param>
            <returns>简易名</returns>
        </member>
        <member name="M:XFrame.Utility.TypeUtility.GetSimpleName(System.Type)">
            <summary>
            取得简易名称
            </summary>
            <param name="type">类型</param>
            <returns>简易名</returns>
        </member>
    </members>
</doc>
