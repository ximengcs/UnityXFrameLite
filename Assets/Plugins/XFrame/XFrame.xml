<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XFrame</name>
    </assembly>
    <members>
        <member name="T:XFrame.Core.Binder.IChangeableValue">
            <summary>
            可更新值类型
            </summary>
        </member>
        <member name="E:XFrame.Core.Binder.IChangeableValue.OnValueChange">
            <summary>
            更新事件，当数值有更新时需要触发此事件
            </summary>
        </member>
        <member name="T:XFrame.Core.Binder.TriggerBinder`1">
            <summary>
            数值绑定器
            </summary>
            <typeparam name="T">持有的数值类型</typeparam>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.#ctor(System.Func{`0})">
            <summary>
            构造数值绑定器
            </summary>
            <param name="getHandler">获取值的委托</param>
        </member>
        <member name="P:XFrame.Core.Binder.TriggerBinder`1.Value">
            <summary>
            持有的数值
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.Trigger">
            <summary>
            触发数值更新
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.AddHandler(System.Action{`0},System.Boolean)">
            <summary>
            添加一个数值变更处理委托
            </summary>
            <param name="handler">更新时的处理委托</param>
            <param name="atonceInvoke">是否立即执行</param>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.RemoveHandler(System.Action{`0})">
            <summary>
            移除一个数值变更处理委托
            </summary>
            <param name="handler">要移除的委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.AddCondHandler(System.Func{`0,System.Boolean})">
            <summary>
            添加一个带返回值的数值变更处理委托
            </summary>
            <param name="handler">需要添加的委托，当委托返回true时，在通知完后会移除掉该委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.RemoveCondHandler(System.Func{`0,System.Boolean})">
            <summary>
            移除一个带返回值的数值变更处理委托
            </summary>
            <param name="handler">需要移除的委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.op_Implicit(XFrame.Core.Binder.TriggerBinder{`0})~`0">
            <summary>
            返回绑定的值
            </summary>
            <param name="binder">绑定的值</param>
        </member>
        <member name="M:XFrame.Core.Binder.TriggerBinder`1.ToString">
            <summary>
            返回持有值的字符串
            </summary>
            <returns>持有值的字符串</returns>
        </member>
        <member name="T:XFrame.Core.Binder.ValueBinder`1">
            <summary>
            数值绑定器
            </summary>
            <typeparam name="T">持有数值类型</typeparam>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>
            构造数值绑定器
            </summary>
            <param name="getHandler">获取值委托</param>
            <param name="setHandler">设置值委托</param>
        </member>
        <member name="P:XFrame.Core.Binder.ValueBinder`1.Value">
            <summary>
            持有的数值
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.AddHandler(System.Action{`0,`0},System.Boolean)">
            <summary>
            添加一个数值变更处理委托
            </summary>
            <param name="handler">更新时的处理委托</param>
            <param name="atonceInvoke">是否立即执行</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.RemoveHandler(System.Action{`0,`0})">
            <summary>
            移除一个数值变更处理委托
            </summary>
            <param name="handler">要移除的委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.AddCondHandler(System.Func{`0,`0,System.Boolean})">
            <summary>
            添加一个带返回值的数值变更处理委托
            </summary>
            <param name="handler">需要添加的委托，当委托返回true时，在通知完后会移除掉该委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.RemoveCondHandler(System.Func{`0,`0,System.Boolean})">
            <summary>
            移除一个带返回值的数值变更处理委托
            </summary>
            <param name="handler">需要移除的委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.op_Implicit(XFrame.Core.Binder.ValueBinder{`0})~`0">
            <summary>
            返回绑定的值
            </summary>
            <param name="binder">绑定的值</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`1.ToString">
            <summary>
            返回持有值的字符串
            </summary>
            <returns>持有值的字符串</returns>
        </member>
        <member name="T:XFrame.Core.Binder.ValueBinder`2">
            <summary>
            数值绑定器
            </summary>
            <typeparam name="T">绑定类型</typeparam>
            <typeparam name="VT">监听绑定器类型</typeparam>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.#ctor(System.Func{`0},XFrame.Core.Binder.ValueBinder{`1})">
            <summary>
            构造数值绑定器
            </summary>
            <param name="getHandler">获取值委托</param>
            <param name="changeBinder">值改变绑定器</param>
        </member>
        <member name="P:XFrame.Core.Binder.ValueBinder`2.Value">
            <summary>
            持有的数值
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.AddHandler(System.Action{`0},System.Boolean)">
            <summary>
            添加一个数值变更处理委托
            </summary>
            <param name="handler">更新时的处理委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.RemoveHandler(System.Action{`0})">
            <summary>
            移除一个数值变更处理委托
            </summary>
            <param name="handler">要移除的委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.AddCondHandler(System.Func{`0,System.Boolean})">
            <summary>
            添加一个带返回值的数值变更处理委托
            </summary>
            <param name="handler">需要添加的委托，当委托返回true时，在通知完后会移除掉该委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.RemoveCondHandler(System.Func{`0,System.Boolean})">
            <summary>
            移除一个带返回值的数值变更处理委托
            </summary>
            <param name="handler">需要移除的委托</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.op_Implicit(XFrame.Core.Binder.ValueBinder{`0,`1})~`0">
            <summary>
            返回绑定的值
            </summary>
            <param name="binder">绑定的值</param>
        </member>
        <member name="M:XFrame.Core.Binder.ValueBinder`2.ToString">
            <summary>
            返回持有值的字符串
            </summary>
            <returns>持有值的字符串</returns>
        </member>
        <member name="T:XFrame.Core.Binder.XComplete`1">
            <summary>
            带标记的完成委托
            </summary>
            <typeparam name="T">持有数据类型</typeparam>
        </member>
        <member name="P:XFrame.Core.Binder.XComplete`1.Value">
            <summary>
            持有值
            </summary>
        </member>
        <member name="P:XFrame.Core.Binder.XComplete`1.IsComplete">
            <summary>
            是否已经完成，当设置为true时会自动调用完成回调
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.XComplete`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="defaultValue">持有默认值</param>
        </member>
        <member name="M:XFrame.Core.Binder.XComplete`1.Invoke">
            <summary>
            执行完成委托
            </summary>
        </member>
        <member name="M:XFrame.Core.Binder.XComplete`1.On(System.Action)">
            <summary>
            注册完成回调
            </summary>
            <param name="handler">回调</param>
        </member>
        <member name="M:XFrame.Core.Binder.XComplete`1.On(System.Action{`0})">
            <summary>
            注册带有值的完成回调
            </summary>
            <param name="handler">完成回调</param>
        </member>
        <member name="T:XFrame.Core.DataProvider">
            <summary>
            简单数据提供者
            </summary>
        </member>
        <member name="M:XFrame.Core.DataProvider.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:XFrame.Core.DataProvider.HasData``1">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.HasData``1"/>
        </member>
        <member name="M:XFrame.Core.DataProvider.HasData``1(System.String)">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.HasData``1(System.String)"/>
        </member>
        <member name="M:XFrame.Core.DataProvider.GetData``1">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.GetData``1"/>
        </member>
        <member name="M:XFrame.Core.DataProvider.GetData``1(System.String)">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.GetData``1(System.String)"/>
        </member>
        <member name="M:XFrame.Core.DataProvider.SetData``1(``0)">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.SetData``1(``0)"/>
        </member>
        <member name="M:XFrame.Core.DataProvider.SetData``1(System.String,``0)">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.SetData``1(System.String,``0)"/>
        </member>
        <member name="M:XFrame.Core.DataProvider.ClearData">
            <inheritdoc cref="M:XFrame.Core.IDataProvider.ClearData"/>
        </member>
        <member name="T:XFrame.Core.IDataProvider">
            <summary>
            数据提供者
            </summary>
        </member>
        <member name="M:XFrame.Core.IDataProvider.HasData``1">
            <summary>
            是否含有数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>true为含有</returns>
        </member>
        <member name="M:XFrame.Core.IDataProvider.HasData``1(System.String)">
            <summary>
            是否含有数据
            </summary>
            <param name="name">数据名</param>
            <typeparam name="T">数据类型</typeparam>
            <returns>true为含有</returns>
        </member>
        <member name="M:XFrame.Core.IDataProvider.SetData``1(``0)">
            <summary>
            设置数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="value">数据</param>
        </member>
        <member name="M:XFrame.Core.IDataProvider.GetData``1">
            <summary>
            获取数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:XFrame.Core.IDataProvider.SetData``1(System.String,``0)">
            <summary>
            设置数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="name">数据标识</param>
            <param name="value">数据</param>
        </member>
        <member name="M:XFrame.Core.IDataProvider.GetData``1(System.String)">
            <summary>
            获取数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="name">数据标识</param>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:XFrame.Core.IDataProvider.ClearData">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:XFrame.Core.Entry.Init">
            <summary>
            初始化核心模块
            </summary>
        </member>
        <member name="M:XFrame.Core.Entry.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:XFrame.Core.Entry.ShutDown">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XFrame.Core.Entry.AddHandler``1">
            <summary>
            添加处理器
            </summary>
            <typeparam name="T">处理器类型</typeparam>
        </member>
        <member name="M:XFrame.Core.Entry.AddModules``1">
            <summary>
            添加用户定制模块组
            </summary>
            <typeparam name="T">模块组特性类型</typeparam>
        </member>
        <member name="M:XFrame.Core.Entry.AddModule``1(System.Int32,System.Object)">
            <summary>
            添加用户定制模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <returns>模块</returns>
        </member>
        <member name="M:XFrame.Core.Entry.GetModule``1(System.Int32)">
            <summary>
            获取模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.Entry.GetHelpers``1">
            <summary>
            获取模块辅助器
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
            <returns>辅助器实例</returns>
        </member>
        <member name="M:XFrame.Core.Entry.GetMainHelper``1">
            <summary>
            获取模块主辅助器(第一个注册)
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
            <returns>辅助器实例</returns>
        </member>
        <member name="T:XFrame.Core.IConfigHandler">
            <summary>
            配置处理类，可设置<see cref="T:XFrame.Core.XOrderAttribute"/>特性表明执行顺序
            </summary>
        </member>
        <member name="M:XFrame.Core.IConfigHandler.OnHandle">
            <summary>
            此方法会在TypeModule执行后执行
            </summary>
        </member>
        <member name="T:XFrame.Core.IEntryHandler">
            <summary>
            Entry处理器
            </summary>
        </member>
        <member name="T:XFrame.Core.IInitHandler">
            <summary>
            初始化处理器
            </summary>
        </member>
        <member name="M:XFrame.Core.IInitHandler.EnterHandle">
            <summary>
            入口处理
            </summary>
        </member>
        <member name="M:XFrame.Core.IInitHandler.BeforeHandle">
            <summary>
            初始化之前处理
            </summary>
            <returns>此任务</returns>
        </member>
        <member name="M:XFrame.Core.IInitHandler.AfterHandle">
            <summary>
            初始化之后处理
            </summary>
            <returns>此任务</returns>
        </member>
        <member name="T:XFrame.Core.IStartHandler">
            <summary>
            启动处理器
            </summary>
        </member>
        <member name="M:XFrame.Core.IStartHandler.BeforeHandle">
            <summary>
            启动之前处理
            </summary>
            <returns>此任务</returns>
        </member>
        <member name="M:XFrame.Core.IStartHandler.AfterHandle">
            <summary>
            启动之后处理
            </summary>
            <returns></returns>
        </member>
        <member name="T:XFrame.Core.BaseModuleAttribute">
            <summary>
            基础模块
            </summary>
        </member>
        <member name="T:XFrame.Core.CommonModuleAttribute">
            <summary>
            通用模块
            </summary>
        </member>
        <member name="T:XFrame.Core.CoreModuleAttribute">
            <summary>
            核心模块
            </summary>
        </member>
        <member name="T:XFrame.Core.RequireModuleAttribute">
            <summary>
            依赖模块
            </summary>
        </member>
        <member name="P:XFrame.Core.RequireModuleAttribute.ModuleType">
            <summary>
            依赖类型
            </summary>
        </member>
        <member name="M:XFrame.Core.RequireModuleAttribute.#ctor(System.Type)">
            <summary>
            构造器
            </summary>
            <param name="type">依赖类型</param>
        </member>
        <member name="T:XFrame.Core.XOrderAttribute">
            <summary>
            定义顺序
            </summary>
        </member>
        <member name="P:XFrame.Core.XOrderAttribute.Order">
            <summary>
            顺序
            </summary>
        </member>
        <member name="M:XFrame.Core.XOrderAttribute.#ctor(System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="order">顺序</param>
        </member>
        <member name="T:XFrame.Core.IModule">
            <summary>
            模块 
            </summary>
        </member>
        <member name="P:XFrame.Core.IModule.Domain">
            <summary>
            模块所属域
            </summary>
        </member>
        <member name="M:XFrame.Core.IModule.OnInit(System.Object,XFrame.Core.ModuleConfigAction)">
            <summary>
            初始化生命周期
            </summary>
            <param name="data">初始化数据</param>
            <param name="configCallback">初始化之前可进行模块配置的回调</param>
        </member>
        <member name="M:XFrame.Core.IModule.OnStart">
            <summary>
            开始运行生命周期
            </summary>
        </member>
        <member name="M:XFrame.Core.IModule.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="T:XFrame.Core.IModuleHelper">
            <summary>
            模块辅助器
            </summary>
        </member>
        <member name="M:XFrame.Core.IModuleHelper.OnModuleInit(XFrame.Core.IModule)">
            <summary>
            模块创建生命周期
            </summary>
            <param name="module">被创建的模块</param>
        </member>
        <member name="M:XFrame.Core.IModuleHelper.OnModuleDestroy(XFrame.Core.IModule)">
            <summary>
            模块销毁生命周期
            </summary>
        </member>
        <member name="M:XFrame.Core.IUpdater.OnUpdate(System.Single)">
            <summary>
            更新生命周期
            </summary>
            <param name="escapeTime">逃逸时间</param>
        </member>
        <member name="T:XFrame.Core.ModuleBase">
            <summary>
            模块基类
            </summary>
        </member>
        <member name="P:XFrame.Core.ModuleBase.IsDefaultModule">
            <summary>
            是否是默认模块
            </summary>
        </member>
        <member name="P:XFrame.Core.ModuleBase.Id">
            <summary>
            模块Id
            </summary>
        </member>
        <member name="P:XFrame.Core.ModuleBase.Domain">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Core.ModuleBase.RegisterUseModule(System.Type,System.Int32)">
            <summary>
            注册此模块使用的模块类型的模块Id
            </summary>
            <param name="moduleType">模块类型</param>
            <param name="moduleId">模块Id</param>
        </member>
        <member name="M:XFrame.Core.ModuleBase.GetUseModule``1">
            <summary>
            获取使用的模块
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XFrame.Core.ModuleBase.OnInit(System.Object)">
            <summary>
            初始化生命周期
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XFrame.Core.ModuleBase.OnStart">
            <summary>
            启动生命周期
            </summary>
        </member>
        <member name="M:XFrame.Core.ModuleBase.OnDestroy">
            <summary>
            销魂生命周期
            </summary>
        </member>
        <member name="T:XFrame.Core.SingletonModule`1">
            <summary>
            单例模块基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XFrame.Core.SingletonModule`1.Inst">
            <summary>
            单例实例
            </summary>
        </member>
        <member name="T:XFrame.Core.IParser">
            <summary>
            解析器
            </summary>
        </member>
        <member name="P:XFrame.Core.IParser.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XFrame.Core.IParser.Parse(System.String)">
            <summary>
            解析
            </summary>
            <param name="pattern">源数据</param>
            <returns>结果</returns>
        </member>
        <member name="T:XFrame.Core.IParser`1">
            <summary>
            解析器
            </summary>
        </member>
        <member name="P:XFrame.Core.IParser`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XFrame.Core.IParser`1.Parse(System.String)">
            <summary>
            解析
            </summary>
            <param name="pattern">源数据</param>
            <returns>结果</returns>
        </member>
        <member name="T:XFrame.Core.XCore">
            <summary>
            核心
            </summary>
        </member>
        <member name="M:XFrame.Core.XCore.Init(XFrame.Core.XDomain)">
            <summary>
            初始化核心
            </summary>
        </member>
        <member name="M:XFrame.Core.XCore.Start">
            <summary>
            启动核心
            </summary>
        </member>
        <member name="M:XFrame.Core.XCore.Destroy">
            <summary>
            销毁核心
            </summary>
        </member>
        <member name="M:XFrame.Core.XCore.Register``1(System.Int32)">
            <summary>
            注册模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.Register(System.Type,System.Int32)">
            <summary>
            注册模块
            </summary>
            <param name="moduleType">模块类型</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.Register(System.Type,System.Int32,System.Object)">
            <summary>
            注册模块
            </summary>
            <param name="moduleType">模块类型</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.Register``1(System.Int32,System.Object)">
            <summary>
            注册模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <param name="data">模块初始化数据</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.GetModule``1(System.Int32)">
            <summary>
            获取模块
            </summary>
            <typeparam name="T">模块类型</typeparam>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.GetModule(System.Type,System.Int32)">
            <summary>
            获取模块
            </summary>
            <param name="moduleType">模块类型</param>
            <returns>模块实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.RegisterHelper``2">
            <summary>
            注册模块辅助器
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
            <typeparam name="ModuleT">模块类型</typeparam>
            <returns>辅助器实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.GetHelpers``1">
            <summary>
            获取模块辅助器
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
            <returns>辅助器实例</returns>
        </member>
        <member name="M:XFrame.Core.XCore.GetMainHelper``1">
            <summary>
            获取模块主辅助器(第一个注册)
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
            <returns>辅助器实例</returns>
        </member>
        <member name="T:XFrame.Collections.Csv`1">
            <summary>
            CSV
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.Csv`1.#ctor(System.Int32)">
            <summary>
            构造一个 <paramref name="column"/> 列的Csv
            </summary>
            <param name="column">列数</param>
        </member>
        <member name="M:XFrame.Collections.Csv`1.#ctor(System.String,XFrame.Core.IParser{`0})">
            <summary>
            通过 <paramref name="content"/> 构造Csv
            </summary>
            <param name="content">Csv文本内容</param>
            <param name="parser">解析器</param>
        </member>
        <member name="P:XFrame.Collections.Csv`1.Row">
            <summary>
            行
            </summary>
        </member>
        <member name="P:XFrame.Collections.Csv`1.Column">
            <summary>
            列
            </summary>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Add">
            <summary>
            在尾部添加一行
            </summary>
            <returns>行数据</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Insert(System.Int32)">
            <summary>
            在第 <paramref name="row"/> 行之前插入一行
            </summary>
            <param name="row">行</param>
            <returns>行数据</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Insert(System.Int32,XFrame.Collections.Csv{`0}.Line)">
            <summary>
            在第 <paramref name="row"/> 行之前插入 <paramref name="line"/> 数据行
            </summary>
            <param name="row">行</param>
            <param name="line">行数据</param>
            <returns>行数据</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Delete(System.Int32)">
            <summary>
            删除第 <paramref name="row"/> 行数据
            </summary>
            <param name="row">行</param>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Get(System.Int32)">
            <summary>
            获取第 <paramref name="row"/> 行数据
            </summary>
            <param name="row">行</param>
            <returns>行数据</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Get(System.Int32,System.Int32)">
            <summary>
            获取第 <paramref name="row"/> 行第 <paramref name="column"/> 列的数据
            </summary>
            <param name="row">行</param>
            <param name="column">列</param>
            <returns>数据</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.SetIt(XFrame.Collections.XItType)">
            <summary>
            设置迭代器类型
            </summary>
            <param name="type">迭代器类型</param>
        </member>
        <member name="M:XFrame.Collections.Csv`1.ToString">
            <summary>
            获取Csv数据字符串形式，以换行符分隔
            </summary>
            <returns>构造字符串</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XFrame.Collections.Csv`1.op_Implicit(XFrame.Collections.Csv{`0})~System.String">
            <summary>
            返回csv字符串形式
            </summary>
            <param name="csv">csv实例</param>
            <returns>字符串形式</returns>
        </member>
        <member name="T:XFrame.Collections.Csv`1.Line">
            <summary>
            行数据类
            </summary>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Line.#ctor(System.Int32)">
            <summary>
            构造一个 <paramref name="count"/> 列的行数据
            </summary>
            <param name="count">列数</param>
        </member>
        <member name="P:XFrame.Collections.Csv`1.Line.Count">
            <summary>
            列数
            </summary>
        </member>
        <member name="P:XFrame.Collections.Csv`1.Line.Item(System.Int32)">
            <summary>
            获取或设置数据项
            </summary>
            <param name="index">索引</param>
            <returns>数据</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Line.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Line.SetIt(XFrame.Collections.XItType)">
            <summary>
            设置迭代器类型
            </summary>
            <param name="type">迭代器类型</param>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Line.ToString">
            <summary>
            获取Csv行数据字符串形式，以逗号分隔
            </summary>
            <returns>构造字符串</returns>
        </member>
        <member name="M:XFrame.Collections.Csv`1.Line.op_Implicit(XFrame.Collections.Csv{`0}.Line)~System.String">
            <summary>
            返回csv行数据字符串形式
            </summary>
            <param name="csv">csv行实例</param>
            <returns>字符串形式</returns>
        </member>
        <member name="T:XFrame.Collections.ListExt">
            <summary>
            列表扩展类
            </summary>
        </member>
        <member name="T:XFrame.Collections.ListExt.ForwardIt`1">
            <summary>
            前向迭代器
            </summary>
            <typeparam name="T">持有数据类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.ListExt.ForwardIt`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            构造函数
            </summary>
            <param name="list">目标List</param>
        </member>
        <member name="P:XFrame.Collections.ListExt.ForwardIt`1.Current">
            <summary>
            当前值
            </summary>
        </member>
        <member name="M:XFrame.Collections.ListExt.ForwardIt`1.MoveNext">
            <summary>
            移动至下一个
            </summary>
            <returns>是否还有元素</returns>
        </member>
        <member name="M:XFrame.Collections.ListExt.ForwardIt`1.Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="M:XFrame.Collections.ListExt.ForwardIt`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:XFrame.Collections.ListExt.BackwardIt`1">
            <summary>
            后向迭代器
            </summary>
            <typeparam name="T">数据持有类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.ListExt.BackwardIt`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            构造器
            </summary>
            <param name="list">目标List</param>
        </member>
        <member name="P:XFrame.Collections.ListExt.BackwardIt`1.Current">
            <summary>
            当前值
            </summary>
        </member>
        <member name="M:XFrame.Collections.ListExt.BackwardIt`1.MoveNext">
            <summary>
            下一个
            </summary>
            <returns>是否还有元素</returns>
        </member>
        <member name="M:XFrame.Collections.ListExt.BackwardIt`1.Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="M:XFrame.Collections.ListExt.BackwardIt`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:XFrame.Collections.XItType">
            <summary>
            迭代类型
            </summary>
        </member>
        <member name="F:XFrame.Collections.XItType.Forward">
            <summary>
            前向迭代
            </summary>
        </member>
        <member name="F:XFrame.Collections.XItType.Backward">
            <summary>
            后向迭代
            </summary>
        </member>
        <member name="T:XFrame.Collections.IXEnumerable`1">
            <summary>
            可迭代类型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XFrame.Collections.IXEnumerable`1.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:XFrame.Collections.IXEnumerable`1.SetIt(XFrame.Collections.XItType)">
            <summary>
            设置迭代类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:XFrame.Collections.IXItem">
            <summary>
            XCollection集合元素
            </summary>
        </member>
        <member name="P:XFrame.Collections.IXItem.Id">
            <summary>
            元素Id
            </summary>
        </member>
        <member name="T:XFrame.Collections.SingleValueEnumerator`1">
            <summary>
            单值迭代器
            </summary>
            <typeparam name="T">持有值</typeparam>
        </member>
        <member name="P:XFrame.Collections.SingleValueEnumerator`1.Current">
            <summary>
            当前值
            </summary>
        </member>
        <member name="M:XFrame.Collections.SingleValueEnumerator`1.#ctor(`0)">
            <summary>
            构造器
            </summary>
            <param name="value">持有值</param>
        </member>
        <member name="M:XFrame.Collections.SingleValueEnumerator`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XFrame.Collections.SingleValueEnumerator`1.MoveNext">
            <summary>
            下一个
            </summary>
            <returns>是否还有下一个</returns>
        </member>
        <member name="M:XFrame.Collections.SingleValueEnumerator`1.Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="T:XFrame.Collections.XCollection`1">
            <summary>
            XItem的集合, 可以通过Id快速读取元素
            </summary>
            <typeparam name="T">持有的数据类型</typeparam>
        </member>
        <member name="F:XFrame.Collections.XCollection`1.DEFAULT_CAPACITY">
            <summary>
            默认容量
            </summary>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.#ctor(XFrame.Core.XDomain,System.Int32)">
            <summary>
            构造集合
            </summary>
        </member>
        <member name="P:XFrame.Collections.XCollection`1.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Add(`0)">
            <summary>
            添加一个元素 时间复杂度O(1)
            </summary>
            <param name="entity">要添加的元素</param>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Remove(`0)">
            <summary>
            移除一个元素 时间复杂度O(1)
            </summary>
            <param name="item">要移除的元素</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Clear">
            <summary>
            清空集合
            </summary>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Contains(`0)">
            <summary>
            是否包含某项元素 时间复杂度O(1)
            </summary>
            <param name="item">检查的元素</param>
            <returns>true表是包含</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Get``1">
            <summary>
            获取给定类型的第一个添加到集合中的元素
            </summary>
            <typeparam name="TEntity">类型</typeparam>
            <returns>获取到的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Get(System.Type)">
            <summary>
            获取给定类型的第一个添加到集合中的元素
            </summary>
            <param name="elementType">类型</param>
            <returns>获取到的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Get``1(System.Int32)">
            <summary>
            获取指定id和给定类型的元素 
            </summary>
            <typeparam name="TEntity">需要获取的类型</typeparam>
            <param name="entityId">元素Id</param>
            <returns>获取到的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Get(System.Type,System.Int32)">
            <summary>
            获取指定id和给定类型的元素 
            </summary>
            <param name="elementType">需要获取的类型</param>
            <param name="entityId">元素Id</param>
            <returns>获取到的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.SetIt(XFrame.Collections.XItType)">
            <summary>
            设置迭代器类型
            </summary>
            <param name="type">迭代器类型</param>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="P:XFrame.Collections.XCollection`1.Enumerator.Current">
            <summary>
            当前迭代到的元素
            </summary>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Enumerator.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Enumerator.MoveNext">
            <summary>
            迭代下一个
            </summary>
            <returns>是否还有下一个元素</returns>
        </member>
        <member name="M:XFrame.Collections.XCollection`1.Enumerator.Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="T:XFrame.Collections.XLinkList`1">
            <summary>
            双向链表
            </summary>
            <typeparam name="T">持有类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.#ctor">
            <summary>
            构造一个双向链表, 不使用对象池
            </summary>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.#ctor(System.Boolean)">
            <summary>
            构造一个双向链表
            </summary>
            <param name="usePool">是否使用对象池</param>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.AddLast(`0)">
            <summary>
            添加元素到尾部
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="P:XFrame.Collections.XLinkList`1.First">
            <summary>
            首个元素
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLinkList`1.Last">
            <summary>
            最后一个元素
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLinkList`1.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLinkList`1.Empty">
            <summary>
            列表是否为空
            </summary>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.AddLast(XFrame.Collections.XLinkNode{`0})">
            <summary>
            在列表尾添加一个节点
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.RemoveFirst">
            <summary>
            移除第一个元素
            </summary>
            <returns>移除的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.RemoveFirstNode">
            <summary>
            移除第一个节点
            </summary>
            <returns>移除的节点</returns>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.AddFirst(`0)">
            <summary>
            在表头添加一个元素
            </summary>
            <param name="data">元素</param>
            <returns>节点</returns>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.AddFirst(XFrame.Collections.XLinkNode{`0})">
            <summary>
            在表头添加一个节点
            </summary>
            <param name="node">添加的节点</param>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.RemoveLast">
            <summary>
            移除最后一个元素
            </summary>
            <returns>移除的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.RemoveLastNode">
            <summary>
            移除最后一个节点
            </summary>
            <returns>移除的节点</returns>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.Remove(`0)">
            <summary>
            移除元素
            </summary>
            <param name="value">元素</param>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.Clear">
            <summary>
            清除元素
            </summary>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.SetIt(XFrame.Collections.XItType)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XLinkList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Collections.XLinkList`1.MarkName">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Collections.XLinkNode`1">
            <summary>
            双向链表节点
            </summary>
            <typeparam name="T">存储数据类型</typeparam>
        </member>
        <member name="P:XFrame.Collections.XLinkNode`1.Pre">
            <summary>
            前一个节点，如果当前是头节点，则为null
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLinkNode`1.Next">
            <summary>
            后一个节点，如果当前是尾节点，则为null
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLinkNode`1.Value">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:XFrame.Collections.XLinkNode`1.Delete">
            <summary>
            删除当前节点，并释放节点到池中
            </summary>
        </member>
        <member name="M:XFrame.Collections.XLinkNode`1.AddBefore(`0)">
            <summary>
            在此节点之前添加一个元素
            </summary>
            <param name="value">待添加的元素</param>
            <returns>元素节点</returns>
        </member>
        <member name="M:XFrame.Collections.XLinkNode`1.AddAfter(`0)">
            <summary>
            在此节点之后添加一个元素
            </summary>
            <param name="value">元素</param>
            <returns>元素节点</returns>
        </member>
        <member name="P:XFrame.Collections.XLinkNode`1.MarkName">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Collections.XLoopQueue`1">
            <summary>
            循环队列
            </summary>
            <typeparam name="T">持有的数据类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.#ctor(System.Int32)">
            <summary>
            循环队列
            </summary>
            <param name="capacity">队列容量</param>
        </member>
        <member name="P:XFrame.Collections.XLoopQueue`1.Capacity">
            <summary>
            容量
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLoopQueue`1.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLoopQueue`1.Empty">
            <summary>
            队列是否空
            </summary>
        </member>
        <member name="P:XFrame.Collections.XLoopQueue`1.Full">
            <summary>
            队列是否满
            </summary>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.AddFirst(`0)">
            <summary>
            从队列前端添加一个元素
            如果队列满，则报告错误
            </summary>
            <param name="element">要添加的元素</param>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.RemoveFirst">
            <summary>
            从队列前端移除一个元素
            如果队列空，则报告错误
            </summary>
            <returns>移除掉的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.GetFirst">
            <summary>
            获取队列前端的第一个元素
            </summary>
            <returns>获取到的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.AddLast(`0)">
            <summary>
            从队列后端添加一个元素
            如果队列满，则报告错误
            </summary>
            <param name="element">要添加的元素</param>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.RemoveLast">
            <summary>
            从队列后端移除一个元素
            如果队列空，则报告错误
            </summary>
            <returns>移除掉的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.GetLast">
            <summary>
            获取队列后端的第一个元素
            </summary>
            <returns>获取到的元素</returns>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XLoopQueue`1.SetIt(XFrame.Collections.XItType)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Collections.XNode`1">
            <summary>
            节点数据类型
            </summary>
            <typeparam name="T">持有类型</typeparam>
        </member>
        <member name="M:XFrame.Collections.XNode`1.#ctor">
            <summary>
            构造一个节点
            </summary>
        </member>
        <member name="P:XFrame.Collections.XNode`1.Value">
            <summary>
            持有数据
            </summary>
        </member>
        <member name="P:XFrame.Collections.XNode`1.Level">
            <summary>
            处于层级
            </summary>
        </member>
        <member name="M:XFrame.Collections.XNode`1.Add(`0)">
            <summary>
            添加一个孩子节点
            </summary>
            <param name="value">数据</param>
            <returns>节点</returns>
        </member>
        <member name="M:XFrame.Collections.XNode`1.Add(System.Func{XFrame.Collections.XNode{`0},System.Boolean},`0)">
            <summary>
            在孩子节点中匹配满足条件 <paramref name="condition"/> 的节点并添加节点
            </summary>
            <param name="condition">需要满足的条件</param>
            <param name="value">数据</param>
            <returns>节点</returns>
        </member>
        <member name="M:XFrame.Collections.XNode`1.Get(System.Func{XFrame.Collections.XNode{`0},System.Boolean})">
            <summary>
            获取一个满足 <paramref name="condition"/> 条件的节点
            </summary>
            <param name="condition">条件</param>
            <returns>节点</returns>
        </member>
        <member name="M:XFrame.Collections.XNode`1.ForEachAll(System.Func{XFrame.Collections.XNode{`0},System.Boolean})">
            <summary>
            递归地迭代所有孩子节点
            </summary>
            <param name="callback">处理委托</param>
        </member>
        <member name="M:XFrame.Collections.XNode`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Collections.XNode`1.SetIt(XFrame.Collections.XItType)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Collections.XTypeAttribute">
            <summary>
            映射到类型
            </summary>
        </member>
        <member name="P:XFrame.Collections.XTypeAttribute.Type">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="M:XFrame.Collections.XTypeAttribute.#ctor(System.Type)">
            <summary>
            构造器
            </summary>
            <param name="type">目标类型</param>
        </member>
        <member name="T:XFrame.Modules.Archives.ArchiveAttribute">
            <summary>
            存档标记
            </summary>
        </member>
        <member name="P:XFrame.Modules.Archives.ArchiveAttribute.Suffix">
            <summary>
            后缀，包含'.'
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveAttribute.#ctor(System.String)">
            <summary>
            标记一种存档类型
            </summary>
            <param name="suffix">存档后缀</param>
        </member>
        <member name="T:XFrame.Modules.Archives.ArchiveModule">
            <summary>
            存档模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.GetOrNew``1(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.Delete(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.Delete(XFrame.Modules.Archives.IArchive)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.ArchiveModule.DeleteAll">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Archives.DataArchive">
            <summary>
            二进制存档
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.Save">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.Delete">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Archives.DataArchive.Name">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.Write(System.String,System.Byte[])">
            <summary>
            向存档写入字节数据
            </summary>
            <param name="path">处于存档中的路径</param>
            <param name="data">需要写入的数据</param>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.Read(System.String)">
            <summary>
            读取字节数据
            </summary>
            <param name="path">处于存档中的路径</param>
            <returns>读取到的数据</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.ToBytes">
            <summary>
            获取存档二进制字节数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.ExportDisk(System.String)">
            <summary>
            将存档中的所有数据导出到指定路径
            </summary>
            <param name="toPath"></param>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.ImportDisk(System.String)">
            <summary>
            将指定路径的文件导入到存档中
            </summary>
            <param name="fromPath"></param>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.FromBytes(System.Byte[])">
            <summary>
            从给定字节数据构建存档
            </summary>
            <param name="data">存档字节数据</param>
            <returns>构建的存档</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.DataArchive.LoadPath(System.String,System.String)">
            <summary>
            根据导入路径和导出路径构建存档
            </summary>
            <param name="fromPath">导入路径，存档会将给定路径中的所有文件导入进来</param>
            <param name="toPath">存档的导出路径</param>
            <returns>构建的存档</returns>
        </member>
        <member name="T:XFrame.Modules.Archives.CsvArchive">
            <summary>
            csv存档
            </summary>
        </member>
        <member name="P:XFrame.Modules.Archives.CsvArchive.Data">
            <summary>
            CSV数据
            </summary>
        </member>
        <member name="P:XFrame.Modules.Archives.CsvArchive.Name">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.CsvArchive.Delete">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.CsvArchive.Save">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Archives.IArchive">
            <summary>
            存档
            </summary>
        </member>
        <member name="P:XFrame.Modules.Archives.IArchive.Name">
            <summary>
            存档名
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchive.OnInit(XFrame.Modules.Archives.IArchiveModule,System.String,System.String,System.Object)">
            <summary>
            初始化生命周期
            </summary>
            <param name="module">存档所属模块</param>
            <param name="path">存储路径</param>
            <param name="name">存储名</param>
            <param name="data">用户参数</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchive.Save">
            <summary>
            保存存档
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchive.Delete">
            <summary>
            删除存档
            </summary>
        </member>
        <member name="T:XFrame.Modules.Archives.IArchiveModule">
            <summary>
            存档模块接口
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveModule.GetOrNew``1(System.String,System.Object)">
            <summary>
            获取或创建一个存档实例
            </summary>
            <typeparam name="T">存档类型</typeparam>
            <param name="name">存档名</param>
            <param name="param">参数</param>
            <returns>存档实例</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveModule.Delete(System.String)">
            <summary>
            删除一份存档
            </summary>
            <param name="name">存档名</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveModule.Delete(XFrame.Modules.Archives.IArchive)">
            <summary>
            删除一份存档
            </summary>
            <param name="archive">存档实例</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveModule.DeleteAll">
            <summary>
            删除所有存档 
            </summary>
        </member>
        <member name="T:XFrame.Modules.Archives.IArchiveUtilityHelper">
            <summary>
            存档模块辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveUtilityHelper.ReadAllBytes(System.String)">
            <summary>
            读取二进制数据
            </summary>
            <param name="path">路径</param>
            <returns>二进制数据</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveUtilityHelper.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            写入二进制数据
            </summary>
            <param name="path">路径</param>
            <param name="data">二进制数据</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveUtilityHelper.ReadAllText(System.String)">
            <summary>
            读取文本数据
            </summary>
            <param name="path">路径</param>
            <returns>文本</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IArchiveUtilityHelper.WriteAllText(System.String,System.String)">
            <summary>
            写入文本数据
            </summary>
            <param name="path">路径</param>
            <param name="data">文本</param>
        </member>
        <member name="T:XFrame.Modules.Archives.ISaveable">
            <summary>
            可保存的模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.ISaveable.Save">
            <summary>
            触发保存
            </summary>
        </member>
        <member name="T:XFrame.Modules.Archives.IJsonArchive">
            <summary>
            Json存档
            </summary>
        </member>
        <member name="P:XFrame.Modules.Archives.IJsonArchive.Name">
            <summary>
            存档名
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SetInt(System.String,System.Int32)">
            <summary>
            设置整数
            </summary>
            <param name="key">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SetLong(System.String,System.Int64)">
            <summary>
            设置长整型
            </summary>
            <param name="key">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetInt(System.String,System.Int32)">
            <summary>
            获取整数
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetLong(System.String,System.Int64)">
            <summary>
            获取长整型
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SetFloat(System.String,System.Single)">
            <summary>
            设置浮点值
            </summary>
            <param name="key">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SetDouble(System.String,System.Double)">
            <summary>
            设置双精度浮点值
            </summary>
            <param name="key">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetFloat(System.String,System.Single)">
            <summary>
            获取浮点值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetDouble(System.String,System.Single)">
            <summary>
            设置双精度浮点值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SetBool(System.String,System.Boolean)">
            <summary>
            设置布尔值
            </summary>
            <param name="key">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetBool(System.String,System.Boolean)">
            <summary>
            获取布尔值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.Set(System.String,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.Get``1(System.String,``0)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetOrNewObject(System.String)">
            <summary>
            获取或创建值对象
            </summary>
            <param name="key">键</param>
            <returns>值对象</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.GetOrNewArray(System.String)">
            <summary>
            获取或创建数组对象
            </summary>
            <param name="key">键</param>
            <returns>数组对象</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.Remove(System.String)">
            <summary>
            移除一个值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SpwanDataProvider(System.String)">
            <summary>
            创建一个Json存档并作为子节点
            </summary>
            <param name="name">存档名</param>
            <returns>存档</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.IJsonArchive.SpwanDataProvider">
            <summary>
            创建一个Json存档并作为子节点
            </summary>
            <returns>存档</returns>
        </member>
        <member name="T:XFrame.Modules.Archives.JsonArchive">
            <summary>
            Json存档
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchive.Save">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchive.Delete">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchive.ClearData">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Archives.JsonArchiveBase">
            <summary>
            Json存档基类
            </summary>
        </member>
        <member name="F:XFrame.Modules.Archives.JsonArchiveBase.m_Root">
            <summary>
            根节点对象
            </summary>
        </member>
        <member name="F:XFrame.Modules.Archives.JsonArchiveBase.m_Module">
            <summary>
            所属存档模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Archives.JsonArchiveBase.Name">
            <summary>
            存档名
            </summary>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetInt(System.String,System.Int32)">
            <summary>
            设置int值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetLong(System.String,System.Int64)">
            <summary>
            设置long值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetInt(System.String,System.Int32)">
            <summary>
            获取int值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>如果未设置过此键，则会返回0</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetLong(System.String,System.Int64)">
            <summary>
            获取long值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>如果未设置过此键，则会返回0</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetFloat(System.String,System.Single)">
            <summary>
            设置float值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetDouble(System.String,System.Double)">
            <summary>
            设置double值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetFloat(System.String,System.Single)">
            <summary>
            获取float值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>如果未设置过此键，则会返回0</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetDouble(System.String,System.Single)">
            <summary>
            获取double值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>如果未设置过此键，则会返回0</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetBool(System.String,System.Boolean)">
            <summary>
            设置bool值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <param name="v">值</param>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetBool(System.String,System.Boolean)">
            <summary>
            获取bool值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>如果未设置过此键，则会返回false</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.Set(System.String,System.Object)">
            <summary>
            设置数据，推荐调用Get方法获取设置的值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <param name="v">此值将会被序列化并保存</param>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.Get``1(System.String,``0)">
            <summary>
            获取数据，推荐调用Set此类数据
            </summary>
            <typeparam name="T">数据类型，如果与Set设置的数据类型不匹配，可能导致出错</typeparam>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetOrNewObject(System.String)">
            <summary>
            获取(不存在时创建)一个JsonObject对象，即Json对象{}
            可以使用该对象直接设置键值
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <returns></returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetOrNewArray(System.String)">
            <summary>
            获取(不存在时创建)一个JsonArray对象，即Json数组对象[]
            可以使用该对象直接设置数组数据
            </summary>
            <param name="key">键, 如果键已经存在，则会覆盖原始数据</param>
            <returns>获取到的JsonArray对象</returns>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.HasData``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.HasData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetData``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.GetData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetData``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SetData``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SpwanDataProvider(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.SpwanDataProvider">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Archives.JsonArchiveBase.ClearData">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Caches.CacheObjectAttribute">
            <summary>
            Cache对象工厂
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.CacheObjectAttribute.Target">
            <summary>
            生产对象的类型
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.CacheObjectAttribute.CacheCount">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="M:XFrame.Modules.Caches.CacheObjectAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="targetType">对象类型</param>
            <param name="cacheCount">缓存数量</param>
        </member>
        <member name="T:XFrame.Modules.Caches.ICacheObject">
            <summary>
            可缓存的对象
            </summary>
        </member>
        <member name="T:XFrame.Modules.Caches.ICacheObjectFactory">
            <summary>
            缓存对象工厂接口
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.ICacheObjectFactory.Result">
            <summary>
            生产的对象
            </summary>
        </member>
        <member name="M:XFrame.Modules.Caches.ICacheObjectFactory.OnFactory">
            <summary>
            开始生产
            </summary>
        </member>
        <member name="M:XFrame.Modules.Caches.ICacheObjectFactory.OnFinish">
            <summary>
            生产完成
            </summary>
        </member>
        <member name="T:XFrame.Modules.Caches.XCache">
            <summary>
            缓存模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.XCache.Event">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.XCache.Collections">
            <summary>
            缓存对象集合
            </summary>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.OnStart">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.GetFactory``1">
            <summary>
            获取对象工厂
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns>工厂实例</returns>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.GetFactory(System.Type)">
            <summary>
            获取对象工厂
            </summary>
            <param name="type">对象类型</param>
            <returns>工厂实例</returns>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.Check``1">
            <summary>
            检查是否存在工厂
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns>true为存在</returns>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.Check(System.Type)">
            <summary>
            检查是否存在工厂
            </summary>
            <param name="type">对象类型</param>
            <returns>true为存在</returns>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.Require``1">
            <summary>
            请求一个对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns>对象实例</returns>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.Require(System.Type)">
            <summary>
            请求一个对象
            </summary>
            <param name="type">对象类型</param>
            <returns>对象实例</returns>
        </member>
        <member name="T:XFrame.Modules.Caches.XCache.ObjectCollection">
            <summary>
            缓存对象集合
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.XCache.ObjectCollection.Factory">
            <summary>
            生成工厂
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.XCache.ObjectCollection.TargetType">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.XCache.ObjectCollection.Count">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="P:XFrame.Modules.Caches.XCache.ObjectCollection.HasItem">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.ObjectCollection.#ctor(System.Type,XFrame.Modules.Caches.ICacheObjectFactory,System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="target">对象类型</param>
            <param name="factory">对象工厂</param>
            <param name="cacheCount">缓存数量</param>
        </member>
        <member name="M:XFrame.Modules.Caches.XCache.ObjectCollection.Get">
            <summary>
            获取一个缓存对象
            </summary>
            <returns>缓存对象</returns>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionData">
            <summary>
            条件配置数据(可有多个条件项)
            <para>
            默认多个条件项用逗号分隔，条件的类型和参数用|分隔，参数为一个<see cref="T:XFrame.Core.UniversalParser"/>,
            可调用<see cref="M:XFrame.Core.UniversalParser.AddParser(System.Type)"/>自定义数值转换器
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionData.Parser">
            <summary>
            条件项列表
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionData.First">
            <summary>
            第一个条件项
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionData.Last">
            <summary>
            最后一个条件项
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.#ctor(System.String)">
            <summary>
            使用原始条件构造条件配置
            </summary>
            <param name="originData">原始配置，多个项由逗号分隔，条件类型和参数用|分隔</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.#ctor(XFrame.Core.ArrayParser{XFrame.Core.PairParser{XFrame.Core.IntOrHashParser,XFrame.Core.UniversalParser}})">
            <summary>
            使用转换器构造条件配置
            </summary>
            <param name="parser"></param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.Has(System.Int32)">
            <summary>
            此配置是否包含目标类型的条件
            </summary>
            <param name="target">条件目标类型</param>
            <returns> true为包含，否则不包含 </returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.Find(System.Int32)">
            <summary>
            查找第一个符合目标条件类型的条件项
            </summary>
            <param name="target">条件目标类型</param>
            <returns>查找到的条件项</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.FindAll(System.Int32)">
            <summary>
            查找所有符合目标条件类型的条件项
            </summary>
            <param name="target">条件目标类型</param>
            <returns>查找到的条件项列表</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.ToString">
            <summary>
            输出条件列表
            </summary>
            <returns>条件项列表</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.GetEnumerator">
            <summary>
            正向迭代条件项
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionData.SetIt(XFrame.Collections.XItType)">
            <summary>
            迭代类型设置未支持
            </summary>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionEvent">
            <summary>
            条件事件
            <para>
            此事件会影响所有条件组
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionEvent.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionEvent.Target">
            <summary>
            条件目标，即条件的类型
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionEvent.Param">
            <summary>
            触发参数
            <para>
            可为数量等, 定义为<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>和
            <see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.Check(XFrame.Modules.Conditions.IConditionHandle,`0)"/>的接受参数, 由<see cref="T:XFrame.Modules.Conditions.IConditionCompare"/>的具体实现类解析判断。
            </para>
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionEvent.Create(System.Int32,System.Object)">
            <summary>
            创建事件实例(从对象池中创建)
            </summary>
            <param name="target">条件目标</param>
            <param name="param">触发参数</param>
            <returns>事件实例</returns>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionGroupEvent">
            <summary>
            条件组时间触发, 此条件仅会影响目标条件组句柄中的条件，
            但当触发的条件是全局条件时，则会触发全局<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>
            <para>
            当条件为全局条件时，首先会触发<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>，接着触发条件组事件,
            当条件为组内条件时，仅仅发某个条件组中的事件，不对其他组产生影响
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionGroupEvent.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionGroupEvent.Handle">
            <summary>
            触发的目标条件组句柄
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionGroupEvent.Target">
            <summary>
            触发目标条件类型
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionGroupEvent.Param">
            <summary>
            触发目标条件参数
            <para>
            可为数量等, 定义为<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>和
            <see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.Check(XFrame.Modules.Conditions.IConditionHandle,`0)"/>的接受参数, 由<see cref="T:XFrame.Modules.Conditions.IConditionCompare"/>的具体实现类解析判断。
            </para>
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionGroupEvent.Create(XFrame.Modules.Conditions.IConditionGroupHandle,System.Int32,System.Object)">
            <summary>
            创建事件实例(从对象池中创建)
            </summary>
            <param name="handle">目标条件组句柄</param>
            <param name="target">目标条件类型</param>
            <param name="param">目标条件参数</param>
            <returns>事件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionGroupEvent.OnReleaseFromPool">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionModule">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionModule.Event">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionModule.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionModule.Register(XFrame.Modules.Conditions.ConditionSetting)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionModule.UnRegister(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionModule.UnRegister(XFrame.Modules.Conditions.IConditionGroupHandle)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionParser">
            <summary>
            条件转换器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionParser.Value">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionParser.PoolKey">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionParser.MarkName">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionParser.Parse(System.String)">
            <summary>
            构造器
            </summary>
            <param name="pattern">数据</param>
            <returns>解析结果</returns>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionHelperSetting">
            <summary>
            条件辅助器配置
            <para>
            用于配置条件组<see cref="T:XFrame.Modules.Conditions.IConditionHelper"/>辅助器或条件<see cref="T:XFrame.Modules.Conditions.IConditionCompare"/>辅助器
            </para>
            </summary>
        </member>
        <member name="F:XFrame.Modules.Conditions.ConditionHelperSetting.DEFAULT_INSTANCE">
            <summary>
            全局辅助器实例Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionHelperSetting.UseInstance">
            <summary>
            使用的辅助器实例
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionHelperSetting.UsePersistData">
            <summary>
            是否使用持久化的数据
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionHelperSetting.IsUseInstance">
            <summary>
            是否使用非全局辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionHelperSetting.#ctor(System.Int32,System.Boolean)">
            <summary>
            构造器
            </summary>
            <param name="useInstance">使用实例</param>
            <param name="usePersistData">数据是否持久化</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionHelperSetting.#ctor(System.Boolean)">
            <summary>
            构造器，使用默认实例
            </summary>
            <param name="usePersistData">数据是否持久化</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionHelperSetting.Equals(System.Object)">
            <summary>
            比较连个配置是否相等
            </summary>
            <param name="obj">其它配置</param>
            <returns>true为相等</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionHelperSetting.GetHashCode">
            <summary>
            获取hash码
            </summary>
            <returns>hash码</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionHelperSetting.op_Equality(XFrame.Modules.Conditions.ConditionHelperSetting,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            判断连个配置是否相等
            </summary>
            <param name="a">配置a</param>
            <param name="b">配置b</param>
            <returns>true为相等</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionHelperSetting.op_Inequality(XFrame.Modules.Conditions.ConditionHelperSetting,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            判断连个配置是否不相等
            </summary>
            <param name="a">配置a</param>
            <param name="b">配置b</param>
            <returns>true为不相等</returns>
        </member>
        <member name="T:XFrame.Modules.Conditions.ConditionSetting">
            <summary>
            条件配置
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionSetting.Name">
            <summary>
            条件名称
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionSetting.UseGroupHelper">
            <summary>
            条件组使用的辅助器 <see cref="T:XFrame.Modules.Conditions.IConditionHelper"/> 类型，与<see cref="P:XFrame.Modules.Conditions.IConditionHelper.Type"/>相匹配
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionSetting.HelperSetting">
            <summary>
            条件组辅助器配置
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.ConditionSetting.AutoRemove">
            <summary>
            在条件组完成时自动清理并从模块移除
            当为 true 时，在条件达成时自动从<see cref="T:XFrame.Modules.Conditions.IConditionModule"/>模块中移除此条件，会调用<see cref="M:XFrame.Modules.Conditions.ConditionGroupHandle.Dispose"/>清理监听，
            此时通过<see cref="M:XFrame.Modules.Conditions.IConditionModule.Get(System.String)"/>将获取不到条件实例。
            当为 false 时，在条件达成时不会自动从<see cref="T:XFrame.Modules.Conditions.IConditionModule"/>模块中移除此条件，但仍会调用<see cref="M:XFrame.Modules.Conditions.ConditionGroupHandle.Dispose"/>清理。
            置为false时，需要调用者在不使用条件句柄后手动调用<see cref="M:XFrame.Modules.Conditions.IConditionModule.UnRegister(System.String)"/>移除条件的句柄，
            否则将一直存在于条件模块<see cref="T:XFrame.Modules.Conditions.IConditionModule"/>中
            </summary>
        </member>
        <member name="F:XFrame.Modules.Conditions.ConditionSetting.Data">
            <summary>
            原始条件数据
            例：
            [条件1],[条件2]...
            [条件1] : {条件类型|目标参数} 其中条件类型<see cref="T:System.Int32"/>即 <see cref="P:XFrame.Modules.Conditions.ConditionEvent.Target"/> 需要触发的类型
            目标参数类型为 <see cref="T:XFrame.Core.UniversalParser"/> ，可二次分析
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionSetting.SetConditionHelperSetting(System.Int32,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            设置条件项辅助器配置
            </summary>
            <param name="target">条件项目标类型</param>
            <param name="settting">辅助器配置</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionSetting.GetConditionHelperSettting(System.Int32)">
            <summary>
            获取条件项辅助器配置
            </summary>
            <param name="target">条件项目标类型</param>
            <returns>辅助器配置</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionSetting.#ctor(System.String,XFrame.Modules.Conditions.ConditionData,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            构造条件配置，默认<see cref="P:XFrame.Modules.Conditions.ConditionSetting.AutoRemove"/> 为 true, <see cref="P:XFrame.Modules.Conditions.ConditionSetting.UseGroupHelper"/> 为 0
            </summary>
            <param name="name">条件名称</param>
            <param name="data">原始条件配置</param>
            <param name="helper">条件辅助器设置</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionSetting.#ctor(System.String,XFrame.Modules.Conditions.ConditionData,System.Int32,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            构造条件配置，默认<see cref="P:XFrame.Modules.Conditions.ConditionSetting.AutoRemove"/> 为 true
            </summary>
            <param name="name">条件名称</param>
            <param name="data">原始条件配置</param>
            <param name="useHelper">使用条件组辅助器</param>
            <param name="helper">使用条件辅助器</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionSetting.#ctor(System.String,XFrame.Modules.Conditions.ConditionData,System.Boolean,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            构造条件配置，默认<see cref="P:XFrame.Modules.Conditions.ConditionSetting.UseGroupHelper"/> 为 0
            </summary>
            <param name="name">条件名称</param>
            <param name="data">原始条件配置</param>
            <param name="autoRemove">是否自动移除</param>
            <param name="helper">条件辅助设置</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.ConditionSetting.#ctor(System.String,XFrame.Modules.Conditions.ConditionData,System.Boolean,System.Int32,XFrame.Modules.Conditions.ConditionHelperSetting)">
            <summary>
            构造条件配置
            </summary>
            <param name="name">条件名称</param>
            <param name="data">原始条件配置</param>
            <param name="autoRemove">是否自动移除</param>
            <param name="useHelper">使用条件组辅助器</param>
            <param name="helper">使用条件辅助器</param>
        </member>
        <member name="T:XFrame.Modules.Conditions.IConditionCompare">
            <summary>
            条件项(单项条件)检查器，比较器
            <para>
            一般不直接实现此接口，而实现泛型接口<see cref="T:XFrame.Modules.Conditions.IConditionCompare`1"/>
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionCompare.Target">
            <summary>
            匹配条件目标，类型
            <para>
            与<see cref="P:XFrame.Modules.Conditions.ConditionEvent.Target"/>以及<see cref="P:XFrame.Modules.Conditions.IConditionHandle.Target"/>相匹配
            </para>
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionCompare.CheckFinish(XFrame.Modules.Conditions.IConditionHandle)">
            <summary>
            检查条件是否处于完成状态，在条件句柄初始化时会执行一次
            </summary>
            <param name="info">句柄</param>
            <returns>true为完成状态，反之亦然</returns>
        </member>
        <member name="T:XFrame.Modules.Conditions.IConditionCompare`1">
            <summary>
            条件检查器需要实现此接口，检查条件完成情况
            </summary>
            <typeparam name="T">条件参数类型</typeparam>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionCompare`1.Check(XFrame.Modules.Conditions.IConditionHandle,`0)">
            <summary>
            检查条件是否完成，当<see cref="T:XFrame.Modules.Conditions.ConditionEvent"/>事件触发时，会将<see cref="P:XFrame.Modules.Conditions.ConditionEvent.Param"/>传入此方法方法检查
            条件是否可以完成，一般需要此方法中检查到条件的目标数量等发生变化时，调用<see cref="M:XFrame.Modules.Conditions.ConditionHandle.Trigger(System.Object,System.Object)"/>方法来触发
            条件的目标数量更新
            <para>
            注意若<see cref="M:XFrame.Modules.Conditions.ConditionHandle.Trigger(System.Object,System.Object)"/>方法没有执行，则通过<see cref="M:XFrame.Modules.Conditions.ConditionHandle.OnUpdate(System.Action{System.Object,System.Object})"/>注册的回调永远不会执行，
            即使在句柄完成之后，即完成之后(此方法返回true)只会执行<see cref="M:XFrame.Modules.Conditions.ConditionHandle.OnComplete(System.Action{XFrame.Modules.Conditions.IConditionHandle})"/>的回调
             此方法在<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>之后执行
            </para>
            </summary>
            <param name="info">条件句柄</param>
            <param name="param">参数(事件参数<see cref="P:XFrame.Modules.Conditions.ConditionEvent.Param"/>)</param>
            <returns>返回true时，句柄会进入完成状态。反之亦然</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)">
            <summary>
            当事件<see cref="T:XFrame.Modules.Conditions.ConditionEvent"/>触发时，与<see cref="P:XFrame.Modules.Conditions.ConditionEvent.Target"/>相匹配的<see cref="P:XFrame.Modules.Conditions.IConditionCompare.Target"/>实现类
            的此方法会执行，与<see cref="P:XFrame.Modules.Conditions.ConditionGroupEvent.Target"/>相匹配的<see cref="P:XFrame.Modules.Conditions.IConditionCompare.Target"/>实现类的条件组
            的所有此方法会执行，与<see cref="P:XFrame.Modules.Conditions.SpecificConditionEvent.Handle"/>相匹配的<see cref="P:XFrame.Modules.Conditions.IConditionCompare.Target"/>实现类的特定组的特定实例
            的此方法会执行，一般可以在此方法执行时执行一些存储状态的操作, 此方法在<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.Check(XFrame.Modules.Conditions.IConditionHandle,`0)"/>之前执行
            </summary>
            <param name="param">参数(事件参数<see cref="P:XFrame.Modules.Conditions.ConditionEvent.Param"/>)，随后执行check时的<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.Check(XFrame.Modules.Conditions.IConditionHandle,`0)"/>的param与此为同一值</param>
        </member>
        <member name="T:XFrame.Modules.Conditions.IConditionGroupHandle">
            <summary>
            条件组句柄
            <para>
            条件组内可有多个条件项，多个条件类型可以相同。
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionGroupHandle.InstanceId">
            <summary>
            条件辅助器<see cref="T:XFrame.Modules.Conditions.IConditionHelper"/>的实例Id，默认使用全局辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionGroupHandle.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionGroupHandle.Complete">
            <summary>
            条件是否完成
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionGroupHandle.Setting">
            <summary>
            条件配置
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionGroupHandle.AllInfo">
            <summary>
            组内所有的条件项句柄
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionGroupHandle.NotInfo">
            <summary>
            组内还未达成的条件项句柄
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionGroupHandle.OnComplete(System.Action{XFrame.Modules.Conditions.IConditionGroupHandle})">
            <summary>
            注册条件组完成事件回调
            </summary>
            <param name="callback">回调</param>
        </member>
        <member name="T:XFrame.Modules.Conditions.IConditionHandle">
            <summary>
            条件项句柄(单个条件)
            <para>
            在初始化时会调用<see cref="M:XFrame.Modules.Conditions.IConditionCompare.CheckFinish(XFrame.Modules.Conditions.IConditionHandle)"/>检查条件完成状态
            当触发<see cref="T:XFrame.Modules.Conditions.ConditionEvent"/>事件时，会调用<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>,
            接着调用所有满足条件项的句柄<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.Check(XFrame.Modules.Conditions.IConditionHandle,`0)"/>检查是否完成，
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionHandle.InstanceId">
            <summary>
            条件项辅助器<see cref="T:XFrame.Modules.Conditions.IConditionCompare"/>的实例Id，默认使用全局辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionHandle.Target">
            <summary>
            条件目标
            <para>
            <see cref="P:XFrame.Modules.Conditions.ConditionEvent.Target"/> 触发的目标会根据此值匹配句柄实例
            </para>
            <para>
            <see cref="P:XFrame.Modules.Conditions.IConditionCompare.Target"/> 具体的实现类会匹配到此值
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionHandle.IsComplete">
            <summary>
            条件是否达成
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionHandle.Param">
            <summary>
            条件需要达成的目标参数，如数量等
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionHandle.Group">
            <summary>
            条件句柄所有条件组
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionHandle.Trigger(System.Object,System.Object)">
            <summary>
            调用此方法触发条件句柄的更新(通过<see cref="M:XFrame.Modules.Conditions.IConditionHandle.OnUpdate(System.Action{System.Object,System.Object})"/>注册的事件)事件，
            一般通过<see cref="T:XFrame.Modules.Conditions.IConditionCompare"/>实现类来触发。
            </summary>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionHandle.OnUpdate(System.Action{System.Object,System.Object})">
            <summary>
            注册条件项更新事件回调
            <para>
            若提前触发了更新事件，则会立即触发一次更新，并使用上次的值执行回调
            </para>
            </summary>
            <param name="callback">回调</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionHandle.OnComplete(System.Action{XFrame.Modules.Conditions.IConditionHandle})">
            <summary>
            注册条件项完成事件回调
            <para>
            当条件已经完成时，会立刻执行回调
            </para>
            </summary>
            <param name="callback">回调</param>
        </member>
        <member name="T:XFrame.Modules.Conditions.IConditionHelper">
            <summary>
            条件(组)辅助器
            <para>
            在条件组初始化时首先会调用<see cref="M:XFrame.Modules.Conditions.IConditionHelper.CheckFinish(XFrame.Modules.Conditions.IConditionGroupHandle)"/>检查条件组完成状态，若为完成则直接进入完成状态。若未完成则会开始监听条件的完成，
            在达成完成条件时会调用<see cref="M:XFrame.Modules.Conditions.IConditionHelper.MarkFinish(XFrame.Modules.Conditions.IConditionGroupHandle)"/>标记未完成状态
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionHelper.Type">
            <summary>
            辅助器类型 
            <para>
            注意不同于 <see cref="P:XFrame.Modules.Conditions.ConditionEvent.Target"/>，<see cref="P:XFrame.Modules.Conditions.ConditionHandle.Target"/>, <see cref="P:XFrame.Modules.Conditions.IConditionCompare.Target"/>
            </para>
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionHelper.MarkFinish(XFrame.Modules.Conditions.IConditionGroupHandle)">
            <summary>
            标记条件组完成
            </summary>
            <param name="group">条件组</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionHelper.CheckFinish(XFrame.Modules.Conditions.IConditionGroupHandle)">
            <summary>
            检查条件组是否完成
            </summary>
            <param name="group">条件组</param>
            <returns>true为完成，反之亦然</returns>
        </member>
        <member name="T:XFrame.Modules.Conditions.IConditionModule">
            <summary>
            条件监听模块 
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.IConditionModule.Event">
            <summary>
            当需要触发某个条件时 
            触发 <see cref="T:XFrame.Modules.Conditions.ConditionEvent"/> 
                <see cref="T:XFrame.Modules.Conditions.ConditionGroupEvent"/> 
                <see cref="T:XFrame.Modules.Conditions.SpecificConditionEvent"/> 
            事件到此事件系统
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionModule.Get(System.String)">
            <summary>
            获取条件组句柄
            </summary>
            <param name="name">组名称</param>
            <returns>条件组句柄</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionModule.Register(XFrame.Modules.Conditions.ConditionSetting)">
            <summary>
            注册条件实例 查看<see cref="T:XFrame.Modules.Conditions.ConditionSetting"/>具体参数
            </summary>
            <param name="setting">条件配置</param>
            <returns>条件组句柄</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionModule.UnRegister(System.String)">
            <summary>
            取消条件注册
            </summary>
            <param name="name">条件名</param>
        </member>
        <member name="M:XFrame.Modules.Conditions.IConditionModule.UnRegister(XFrame.Modules.Conditions.IConditionGroupHandle)">
            <summary>
            取消条件注册
            </summary>
            <param name="handle">条件组句柄</param>
        </member>
        <member name="T:XFrame.Modules.Conditions.SpecificConditionEvent">
            <summary>
            条件事件
            <para>
            此事件仅会影响目标句柄<see cref="P:XFrame.Modules.Conditions.SpecificConditionEvent.Handle"/>的指定条件，
            但当触发的条件是全局条件时，则会触发全局<see cref="M:XFrame.Modules.Conditions.IConditionCompare`1.OnEventTrigger(`0)"/>
            </para>
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.SpecificConditionEvent.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.SpecificConditionEvent.Handle">
            <summary>
            目标条件句柄
            </summary>
        </member>
        <member name="P:XFrame.Modules.Conditions.SpecificConditionEvent.Param">
            <summary>
            触发参数
            </summary>
        </member>
        <member name="M:XFrame.Modules.Conditions.SpecificConditionEvent.Create(XFrame.Modules.Conditions.IConditionHandle,System.Object)">
            <summary>
            构造器
            </summary>
            <param name="handle">条件句柄</param>
            <param name="param">触发参数</param>
            <returns>事件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Conditions.SpecificConditionEvent.OnReleaseFromPool">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Config.XConfig">
            <summary>
            模块配置
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.Entrance">
            <summary>
            入口
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.TypeChecker">
            <summary>
            类型系统使用类型
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.ArchivePath">
            <summary>
            存档路径
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.ArchiveUtilityHelper">
            <summary>
            存档辅助器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.ArchiveEncrypt">
            <summary>
            存档是否加密
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.ResPath">
            <summary>
            资源根路径
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.DefaultLogger">
            <summary>
            默认Log辅助器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.DefaultRes">
            <summary>
            默认资源加载辅助器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.DefaultDownloadHelper">
            <summary>
            默认下载辅助器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.DefaultDataTableHelper">
            <summary>
            默认数据表辅助器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.DefaultCryptor">
            <summary>
            默认加密辅助器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Config.XConfig.DefaultPlotHelper">
            <summary>
            默认Plot辅助器
            </summary>
        </member>
        <member name="T:XFrame.Modules.Containers.Com">
            <summary>
            组件基类
            数据为组件所有
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.Com.Active">
            <summary>
            组件激活状态
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.Com.Owner">
            <summary>
            组件所属容器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.Com.OnActive">
            <summary>
            激活生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.Com.OnInactive">
            <summary>
            失活生命周期
            </summary>
        </member>
        <member name="T:XFrame.Modules.Containers.Container">
            <summary>
            通用容器
            </summary>
        </member>
        <member name="F:XFrame.Modules.Containers.Container.m_Module">
            <summary>
            容器所属模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.Container.Master">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Containers.Container.Id">
            <summary>
            容器Id
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.OnUpdate(System.Single)">
            <summary>
            更新生命周期
            </summary>
            <param name="elapseTime">逃逸时间</param>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetCom``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetCom(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.AddCom(XFrame.Modules.Containers.ICom)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.AddCom``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.AddCom``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.AddCom(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.AddCom(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetOrAddCom``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetOrAddCom``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetOrAddCom(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetOrAddCom(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.RemoveCom``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.RemoveCom(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.ClearCom">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.HasData``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.HasData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.SetData``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetData``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.SetData``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.ClearData">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.Container.SetIt(XFrame.Collections.XItType)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Containers.ContainerModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.New``1(System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.New(System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.New(System.Type,System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.New(System.Type,System.Int32,System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.Remove(XFrame.Modules.Containers.IContainer)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ContainerModule.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Containers.ICom">
            <summary>
            容器组件
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.ICom.Active">
            <summary>
            是否处于激活状态
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.ICom.Owner">
            <summary>
            组件拥有者
            </summary>
        </member>
        <member name="T:XFrame.Modules.Containers.IContainer">
            <summary>
            容器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.IContainer.Master">
            <summary>
            根容器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.OnInit(XFrame.Modules.Containers.IContainerModule,System.Int32,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            初始化生命周期
            </summary>
            <param name="module">容器所属模块</param>
            <param name="id">容器Id</param>
            <param name="master">容器拥有者</param>
            <param name="onReady">容器就绪事件</param>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.OnUpdate(System.Single)">
            <summary>
            更新生命周期
            </summary>
            <param name="elapseTime">逃逸时间</param>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.GetCom``1(System.Int32)">
            <summary>
            获取一个组件(Id为默认Id)
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="id">组件Id</param>
            <returns>组件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.GetCom(System.Type,System.Int32)">
            <summary>
            获取一个组件
            </summary>
            <param name="type">组件类型</param>
            <param name="id">组件Id</param>
            <returns>组件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.AddCom``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            添加一个组件(Id为默认Id)
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.AddCom(XFrame.Modules.Containers.ICom)">
            <summary>
            添加一个组件
            </summary>
            <param name="com">组件实例</param>
            <returns>组件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.AddCom``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            添加一个组件
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="id">组件Id</param>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.AddCom(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            添加一个组件(Id为默认Id)
            </summary>
            <param name="type">组件类型</param>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.AddCom(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            添加一个组件
            </summary>
            <param name="type"></param>
            <param name="id"></param>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.GetOrAddCom``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            获取或添加一个组件(Id为默认Id)
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.GetOrAddCom``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            获取或添加一个组件
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="id">组件Id</param>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.GetOrAddCom(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            获取或添加一个组件(Id为默认Id)
            </summary>
            <param name="type">组件类型</param>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.GetOrAddCom(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            获取或添加一个组件
            </summary>
            <param name="type">组件类型</param>
            <param name="id">组件Id</param>
            <param name="onReady">初始化完成事件</param>
            <returns>添加的组件</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.RemoveCom``1(System.Int32)">
            <summary>
            移除组件
            </summary>
            <typeparam name="T">组件类型</typeparam>
            <param name="id">组件Id</param>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.RemoveCom(System.Type,System.Int32)">
            <summary>
            移除组件
            </summary>
            <param name="type">组件类型</param>
            <param name="id">组件Id</param>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainer.ClearCom">
            <summary>
            移除所有组件
            </summary>
        </member>
        <member name="T:XFrame.Modules.Containers.IContainerModule">
            <summary>
            容器类模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainerModule.New``1(System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            请求一个新的容器
            </summary>
            <typeparam name="T">容器类型</typeparam>
            <param name="updateTrusteeship">是否需要模块处理更新</param>
            <param name="master">容器拥有者</param>
            <param name="onReady">数据提供委托</param>
            <returns>容器实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainerModule.New(System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            请求一个新的容器
            </summary>
            <param name="updateTrusteeship">是否需要模块处理更新</param>
            <param name="master">容器拥有者</param>
            <param name="onReady">数据提供委托</param>
            <returns>容器实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainerModule.New(System.Type,System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            请求一个新的容器
            </summary>
            <param name="type">容器类型</param>
            <param name="updateTrusteeship">是否需要模块处理更新</param>
            <param name="master">容器拥有者</param>
            <param name="onReady">数据提供委托</param>
            <returns>容器实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainerModule.New(System.Type,System.Int32,System.Boolean,XFrame.Modules.Containers.IContainer,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            请求一个新的容器
            </summary>
            <param name="type">容器类型</param>
            <param name="id">容器Id</param>
            <param name="updateTrusteeship">是否需要模块处理更新</param>
            <param name="master">容器拥有者</param>
            <param name="onReady">数据提供委托</param>
            <returns>容器实例</returns>
        </member>
        <member name="M:XFrame.Modules.Containers.IContainerModule.Remove(XFrame.Modules.Containers.IContainer)">
            <summary>
            移除一个容器
            </summary>
            <param name="container">容器实例</param>
        </member>
        <member name="T:XFrame.Modules.Containers.OnDataProviderReady">
            <summary>
            数据提供委托
            </summary>
            <param name="container">容器实例</param>
        </member>
        <member name="T:XFrame.Modules.Containers.ShareCom">
            <summary>
            共享组件基类, 会共享容器数据
            </summary>
        </member>
        <member name="F:XFrame.Modules.Containers.ShareCom.m_Module">
            <summary>
            所属容器模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.ShareCom.Active">
            <summary>
            激活状态
            </summary>
        </member>
        <member name="P:XFrame.Modules.Containers.ShareCom.Id">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Containers.ShareCom.Master">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Containers.ShareCom.Owner">
            <summary>
            父容器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.OnUpdate(System.Single)">
            <summary>
            更新生命周期
            </summary>
            <param name="elapseTime">逃逸时间</param>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.OnActive">
            <summary>
            激活生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.OnInactive">
            <summary>
            失活生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetCom``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetCom(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.AddCom``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.AddCom(XFrame.Modules.Containers.ICom)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.AddCom``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.AddCom(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.AddCom(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetOrAddCom``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetOrAddCom``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetOrAddCom(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetOrAddCom(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.RemoveCom``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.RemoveCom(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.ClearCom">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.HasData``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.HasData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.SetData``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetData``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.SetData``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetData``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.ClearData">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Containers.ShareCom.SetIt(XFrame.Collections.XItType)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Crypto.CryptoModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Crypto.CryptoModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Crypto.CryptoModule.New(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Crypto.CryptoModule.New">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Crypto.ICryptoModule">
            <summary>
            数据加密模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptoModule.New(System.String,System.String)">
            <summary>
            创建加密器
            </summary>
            <param name="keyStr">密钥</param>
            <param name="ivStr">密钥</param>
            <returns>加密器</returns>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptoModule.New">
            <summary>
            使用默认密钥创建加密器
            </summary>
            <returns>加密器</returns>
        </member>
        <member name="T:XFrame.Modules.Crypto.ICryptor">
            <summary>
            加密器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptor.OnInit(System.String,System.String)">
            <summary>
            初始化生命周期
            </summary>
            <param name="keyStr">密钥</param>
            <param name="ivStr">密钥</param>
        </member>
        <member name="P:XFrame.Modules.Crypto.ICryptor.Writer">
            <summary>
            加密数据写入流
            </summary>
        </member>
        <member name="P:XFrame.Modules.Crypto.ICryptor.Reader">
            <summary>
            解密数据读取流
            </summary>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptor.BeginEncrypt">
            <summary>
            标记开始加密
            </summary>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptor.EndEncrypt">
            <summary>
            标记加密结束
            </summary>
            <returns>加密好的数据</returns>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptor.BeginDecrypty(System.Byte[])">
            <summary>
            标记开始解密
            </summary>
            <param name="buffer">需要解密的数据</param>
        </member>
        <member name="M:XFrame.Modules.Crypto.ICryptor.EndDecrypty">
            <summary>
            标记解密结束
            </summary>
        </member>
        <member name="T:XFrame.Modules.Datas.DataAttribute">
            <summary>
            数据表
            </summary>
        </member>
        <member name="P:XFrame.Modules.Datas.DataAttribute.TableType">
            <summary>
            数据表类型
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.DataAttribute.#ctor(System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="tableType">数据表类型</param>
        </member>
        <member name="T:XFrame.Modules.Datas.DataModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.Register(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.Add``1(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.Get``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.Get``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.GetOne``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.GetOne``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.GetItem``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Datas.DataModule.GetItem``1(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Datas.IDataHelper">
            <summary>
            数据模块辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataHelper.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataHelper.AddTableType(System.Type)">
            <summary>
            添加可处理的数据表类型
            </summary>
            <param name="type">可以被处理的数据表类型</param>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataHelper.Add(System.String,System.Type,System.Int32)">
            <summary>
            添加数据表
            </summary>
            <param name="json">需要被序列化的数据</param>
            <param name="datatype">数据表持有数据类型</param>
            <param name="textType">文本类型</param>
            <returns>数据表</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataHelper.TryGet(System.Type,System.Collections.Generic.List{XFrame.Modules.Datas.IDataTable}@)">
            <summary>
            尝试获取一种类型的数据表
            </summary>
            <param name="datatype">数据表持有数据类型</param>
            <param name="list">数据表列表</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="T:XFrame.Modules.Datas.IDataModule">
            <summary>
            数据模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.Register(System.Type)">
            <summary>
            注册数据表类型
            </summary>
            <param name="tableType">数据表类型</param>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.Add``1(System.String,System.Int32)">
            <summary>
            添加数据表
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <param name="json">需要被序列化的数据</param>
            <param name="textType">数据类型</param>
            <returns>数据表接口实例</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.Get``1">
            <summary>
            获取数据表(第一个添加的数据表)
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <returns>数据表接口实例</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.Get``1(System.Int32)">
            <summary>
            获取数据表
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <param name="tableIndex">数据表位置(当有多个同类型的数据表时，用此位置可区分)</param>
            <returns>数据表接口实例</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.GetOne``1">
            <summary>
            获取数据表默认项数据(第一个添加的数据表)
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <returns>数据</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.GetOne``1(System.Int32)">
            <summary>
            获取数据表默认项数据
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <param name="tableIndex">数据表位置(当有多个同类型的数据表时，用此位置可区分)</param>
            <returns>数据</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.GetItem``1(System.Int32)">
            <summary>
            获取数据表数据项
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <param name="itemId">数据项Id</param>
            <returns>数据</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataModule.GetItem``1(System.Int32,System.Int32)">
            <summary>
            获取数据表数据项
            </summary>
            <typeparam name="T">数据表持有数据类型</typeparam>
            <param name="tableIndex">数据表位置(当有多个同类型的数据表时，用此位置可区分)</param>
            <param name="itemId">数据项Id</param>
            <returns>数据</returns>
        </member>
        <member name="T:XFrame.Modules.Datas.IDataRaw">
            <summary>
            数据项
            </summary>
        </member>
        <member name="T:XFrame.Modules.Datas.IDataTable">
            <summary>
            数据表
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataTable.OnInit(System.Object)">
            <summary>
            初始化生命周期
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:XFrame.Modules.Datas.IDataTable`1">
            <summary>
            数据表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XFrame.Modules.Datas.IDataTable`1.Count">
            <summary>
            数据个数
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataTable`1.Get">
            <summary>
            获取第一项数据
            </summary>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataTable`1.Get(System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="id">数据Id</param>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataTable`1.GetByIndex(System.Int32)">
            <summary>
            通过下标获取数据
            </summary>
            <param name="index">下标</param>
            <returns>数据</returns>
        </member>
        <member name="M:XFrame.Modules.Datas.IDataTable`1.Select(System.String,System.Object,System.Collections.Generic.List{`0})">
            <summary>
            检索数据
            </summary>
            <param name="name">数据项名</param>
            <param name="value">符合的值</param>
            <param name="target">结果存放列表</param>
            <returns>检索到的数据项</returns>
        </member>
        <member name="T:XFrame.Modules.Datas.TableAttribute">
            <summary>
            数据表
            </summary>
        </member>
        <member name="P:XFrame.Modules.Datas.TableAttribute.TableType">
            <summary>
            数据表类型Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Datas.TableAttribute.JsonType">
            <summary>
            数据表Json类型，此类型需要为泛型类或为空
            </summary>
        </member>
        <member name="M:XFrame.Modules.Datas.TableAttribute.#ctor(System.Int32,System.Type)">
            <summary>
            标记为数据表类型
            </summary>
            <param name="id">类型Id</param>
            <param name="jsonType">Json类型</param>
        </member>
        <member name="M:XFrame.Modules.Datas.TableAttribute.#ctor(System.Int32)">
            <summary>
            标记为数据表类型，Json类型为数据项类型
            </summary>
            <param name="id">类型Id</param>
        </member>
        <member name="T:XFrame.Modules.Datas.TableType">
            <summary>
            数据表类型
            </summary>
        </member>
        <member name="F:XFrame.Modules.Datas.TableType.List">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:XFrame.Modules.Datas.TableType.Object">
            <summary>
            对象
            </summary>
        </member>
        <member name="T:XFrame.Modules.Download.DownloadResult">
            <summary>
            下载结果
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownloadResult.IsSuccess">
            <summary>
            是否下载成功
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownloadResult.Text">
            <summary>
            下载的文件是文本时有值
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownloadResult.Data">
            <summary>
            下载的文件不是文本时为字节数据
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownloadResult.ErrorReason">
            <summary>
            下载失败时的失败原因，成功时为空
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.DownloadResult.#ctor(System.Boolean,System.String,System.Byte[],System.String)">
            <summary>
            构造器
            </summary>
            <param name="isSuccess">是否成功</param>
            <param name="text">文本</param>
            <param name="data">二进制数据</param>
            <param name="errorReason">错误原因</param>
        </member>
        <member name="T:XFrame.Modules.Download.DownloadModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Download.DownloadModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Download.DownloadModule.SetHelper``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Download.DownloadModule.Down(System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Download.DownTask">
            <summary>
            下载任务
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownTask.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownTask.Text">
            <summary>
            文本数据
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.DownTask.Data">
            <summary>
            字节数据
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.DownTask.#ctor(XFrame.Modules.Download.IDownloadHelper,XFrame.Tasks.XTaskCancelToken)">
            <summary>
            构造器
            </summary>
            <param name="handler">下载辅助器</param>
            <param name="cancelToken">取消Token</param>
        </member>
        <member name="M:XFrame.Modules.Download.DownTask.InnerStart">
            <summary>
            开始执行
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.DownTask.GetResult">
            <summary>
            获取结果
            </summary>
            <returns>下载任务</returns>
        </member>
        <member name="M:XFrame.Modules.Download.DownTask.OnCompleted(System.Action{System.Byte[]})">
            <summary>
            设置完成回调
            </summary>
            <param name="callback">回调函数</param>
            <returns>下载任务</returns>
        </member>
        <member name="M:XFrame.Modules.Download.DownTask.OnCompleted(System.Action{System.String})">
            <summary>
            设置完成回调
            </summary>
            <param name="callback">回调函数</param>
            <returns>下载任务</returns>
        </member>
        <member name="M:XFrame.Modules.Download.DownTask.InnerExecComplete">
            <summary>
            任务完成
            </summary>
        </member>
        <member name="T:XFrame.Modules.Download.IDownloadHelper">
            <summary>
            下载辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.IDownloadHelper.IsDone">
            <summary>
            下载是否完成，成功或失败完成时为true
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.IDownloadHelper.Result">
            <summary>
            下载结果
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.IDownloadHelper.Url">
            <summary>
            下载任务url
            </summary>
        </member>
        <member name="P:XFrame.Modules.Download.IDownloadHelper.ReserveUrl">
            <summary>
            备用地址
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.IDownloadHelper.Request">
            <summary>
            请求下载
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:XFrame.Modules.Download.IDownloadHelper.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.IDownloadHelper.OnUpdate">
            <summary>
            更新状态
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.IDownloadHelper.OnDispose">
            <summary>
            释放持有的资源
            </summary>
        </member>
        <member name="T:XFrame.Modules.Download.IDownloadModule">
            <summary>
            下载器模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Download.IDownloadModule.SetHelper``1">
            <summary>
            设置下载辅助器
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
        </member>
        <member name="M:XFrame.Modules.Download.IDownloadModule.Down(System.String,System.String[])">
            <summary>
            下载文件或数据
            </summary>
            <param name="url">url</param>
            <param name="reserveUrls">url链接失败时备用url</param>
        </member>
        <member name="T:XFrame.Modules.Entities.Entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="M:XFrame.Modules.Entities.Entity.OnInit">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Entities.Entity.Event">
            <summary>
            实体事件系统
            </summary>
        </member>
        <member name="T:XFrame.Modules.Entities.EntityCom">
            <summary>
            实体组件
            </summary>
        </member>
        <member name="P:XFrame.Modules.Entities.EntityCom.Event">
            <summary>
            时间系统
            </summary>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityCom.OnInit">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Entities.EntityModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.RegisterEntity``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create``1(XFrame.Modules.Entities.IEntity,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create(System.Type,XFrame.Modules.Entities.IEntity,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create``1(XFrame.Modules.Entities.IEntity,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Create(System.Type,XFrame.Modules.Entities.IEntity,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityModule.Destroy(XFrame.Modules.Entities.IEntity)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Entities.EntityPropAttribute">
            <summary>
            实体属性
            有数据的实体必须声明此属性并提供正确的类型
            </summary>
        </member>
        <member name="P:XFrame.Modules.Entities.EntityPropAttribute.Type">
            <summary>
            类型Id
            </summary>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityPropAttribute.#ctor">
            <summary>
            标记实体
            类型为0
            </summary>
        </member>
        <member name="M:XFrame.Modules.Entities.EntityPropAttribute.#ctor(System.Int32)">
            <summary>
            标记实体
            </summary>
            <param name="type">实体类型Id</param>
        </member>
        <member name="T:XFrame.Modules.Entities.EntityShareCom">
            <summary>
            共享组件实体
            </summary>
        </member>
        <member name="P:XFrame.Modules.Entities.EntityShareCom.Event">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="T:XFrame.Modules.Entities.IEntity">
            <summary>
            实体
            </summary>
        </member>
        <member name="P:XFrame.Modules.Entities.IEntity.Event">
            <summary>
            实体事件系统
            </summary>
        </member>
        <member name="T:XFrame.Modules.Entities.IEntityCom">
            <summary>
            实体组件
            </summary>
        </member>
        <member name="T:XFrame.Modules.Entities.IEntityModule">
            <summary>
            实体模块
            只有根实体才会接受实体模块的更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.RegisterEntity``1">
            <summary>
            注册实体，创建实体前需要注册实体
            </summary>
            <typeparam name="T">实体基类或实体类</typeparam>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create``1(XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create(System.Type,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <param name="type">实体类型</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create``1(XFrame.Modules.Entities.IEntity,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="parent">父实体</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create(System.Type,XFrame.Modules.Entities.IEntity,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <param name="type">实体类型</param>
            <param name="parent">父实体</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create``1(System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="typeId">类型Id</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create(System.Type,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <param name="baseType">实体类型</param>
            <param name="typeId">类型Id</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create``1(XFrame.Modules.Entities.IEntity,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="parent">父实体</param>
            <param name="typeId">类型Id</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Create(System.Type,XFrame.Modules.Entities.IEntity,System.Int32,XFrame.Modules.Containers.OnDataProviderReady)">
            <summary>
            创建实体
            </summary>
            <param name="baseType">实体类型</param>
            <param name="parent">父实体</param>
            <param name="typeId">类型Id</param>
            <param name="onReady">数据提供委托</param>
            <returns>创建的实体</returns>
        </member>
        <member name="M:XFrame.Modules.Entities.IEntityModule.Destroy(XFrame.Modules.Entities.IEntity)">
            <summary>
            销毁一个实体
            </summary>
            <param name="entity">需要销毁的实体</param>
        </member>
        <member name="T:XFrame.Modules.Event.EventModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Event.EventModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Event.EventModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Event.EventModule.NewSys">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Event.EventModule.Remove(XFrame.Modules.Event.IEventSystem)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Event.IEventModule">
            <summary>
            事件模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Event.IEventModule.NewSys">
            <summary>
            创建一个事件系统
            </summary>
            <returns>事件系统</returns>
        </member>
        <member name="M:XFrame.Modules.Event.IEventModule.Remove(XFrame.Modules.Event.IEventSystem)">
            <summary>
            移除一个事件系统 
            </summary>
            <param name="evtSys">事件系统</param>
        </member>
        <member name="T:XFrame.Modules.Event.IEventSystem">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Trigger(System.Int32)">
            <summary>
            触发事件
            </summary>
            <param name="eventId">事件Id</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Trigger(XFrame.Modules.Event.XEvent)">
            <summary>
            触发事件
            </summary>
            <param name="e">事件</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.TriggerNow(System.Int32)">
            <summary>
            立刻触发事件
            </summary>
            <param name="eventId">事件Id</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.TriggerNow(XFrame.Modules.Event.XEvent)">
            <summary>
            立即触发事件
            </summary>
            <param name="e">事件</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Listen(System.Int32,XFrame.Modules.Event.XEventHandler)">
            <summary>
            监听事件
            </summary>
            <param name="eventId">事件Id</param>
            <param name="handler">事件处理委托</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Listen(System.Int32,XFrame.Modules.Event.XEventHandler2)">
            <summary>
            监听事件
            </summary>
            <param name="eventId">事件Id</param>
            <param name="handler">事件处理委托</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Unlisten(System.Int32,XFrame.Modules.Event.XEventHandler)">
            <summary>
            移除事件监听
            </summary>
            <param name="eventId">事件Id</param>
            <param name="handler">需要移除的委托</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Unlisten(System.Int32,XFrame.Modules.Event.XEventHandler2)">
            <summary>
            移除事件监听
            </summary>
            <param name="eventId">事件Id</param>
            <param name="handler">需要移除的委托</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Unlisten(System.Int32)">
            <summary>
            移除事件的所有监听
            </summary>
            <param name="eventId">事件Id</param>
        </member>
        <member name="M:XFrame.Modules.Event.IEventSystem.Unlisten">
            <summary>
            移除所有监听
            </summary>
        </member>
        <member name="T:XFrame.Modules.Event.XEvent">
            <summary>
            事件
            </summary>
        </member>
        <member name="P:XFrame.Modules.Event.XEvent.Id">
            <summary>
            事件Id 
            </summary>
        </member>
        <member name="M:XFrame.Modules.Event.XEvent.#ctor(System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="id">事件Id</param>
        </member>
        <member name="M:XFrame.Modules.Event.XEvent.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Event.XEvent.OnReleaseFromPool">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Event.XEventHandler">
            <summary>
            事件处理委托
            </summary>
            <param name="e">事件</param>
        </member>
        <member name="T:XFrame.Modules.Event.XEventHandler2">
            <summary>
            事件处理委托
            </summary>
            <param name="e">事件</param>
            <returns>返回true时移除此监听</returns>
        </member>
        <member name="T:XFrame.Modules.Event.XEventSystem">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="T:XFrame.Modules.StateMachine.FsmModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.GetOrNew(System.String,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.GetOrNew(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.GetOrNew``1(System.String,``0,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.GetOrNew``1(``0,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmModule.Remove(XFrame.Modules.StateMachine.IFsmBase)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.StateMachine.FsmState">
            <summary>
            有限状态机状态
            </summary>
        </member>
        <member name="F:XFrame.Modules.StateMachine.FsmState.m_Fsm">
            <summary>
            持有状态机
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState.OnInit(XFrame.Modules.StateMachine.IFsm)">
            <summary>
            初始化生命周期
            </summary>
            <param name="fsm">状态机</param>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState.OnEnter">
            <summary>
            进入状态生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState.OnUpdate">
            <summary>
            更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState.OnLeave">
            <summary>
            离开状态生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState.ChangeState``1">
            <summary>
            改变状态机状态
            仅通过内部调用
            </summary>
            <typeparam name="State">状态机类型</typeparam>
        </member>
        <member name="T:XFrame.Modules.StateMachine.FsmState`1">
            <summary>
            有限状态机状态
            </summary>
        </member>
        <member name="F:XFrame.Modules.StateMachine.FsmState`1.m_Fsm">
            <summary>
            持有状态机
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState`1.OnInit(XFrame.Modules.StateMachine.IFsm{`0})">
            <summary>
            初始化生命周期
            </summary>
            <param name="fsm">状态机</param>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState`1.OnEnter">
            <summary>
            进入状态生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState`1.OnUpdate">
            <summary>
            更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState`1.OnLeave">
            <summary>
            离开状态生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState`1.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.FsmState`1.ChangeState``1">
            <summary>
            改变状态机状态
            仅通过内部调用
            </summary>
            <typeparam name="State">状态机类型</typeparam>
        </member>
        <member name="T:XFrame.Modules.StateMachine.IFsm">
            <summary>
            有限状态机
            </summary>
        </member>
        <member name="P:XFrame.Modules.StateMachine.IFsm.Current">
            <summary>
            当前状态
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm.GetState``1">
            <summary>
            获取状态
            </summary>
            <typeparam name="State">状态类型</typeparam>
            <returns>获取到的状态实例</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm.HasState``1">
            <summary>
            是否含有状态
            </summary>
            <typeparam name="State">状态类型</typeparam>
            <returns>true表示含有</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm.HasState(System.Type)">
            <summary>
            是否含有状态
            </summary>
            <param name="type">状态类型</param>
            <returns>true表示含有</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm.Start``1">
            <summary>
            启动状态机
            </summary>
            <typeparam name="State">入口状态类型</typeparam>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm.Start(System.Type)">
            <summary>
            启动状态机
            </summary>
            <param name="type">入口状态类型</param>
        </member>
        <member name="T:XFrame.Modules.StateMachine.IFsmBase">
            <summary>
            有限状态机
            </summary>
        </member>
        <member name="P:XFrame.Modules.StateMachine.IFsmBase.Name">
            <summary>
            状态机名
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmBase.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmBase.OnUpdate">
            <summary>
            更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmBase.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="T:XFrame.Modules.StateMachine.IFsm`1">
            <summary>
            有限状态机
            </summary>
            <typeparam name="T">状态机拥有者类型</typeparam>
        </member>
        <member name="P:XFrame.Modules.StateMachine.IFsm`1.Owner">
            <summary>
            状态机拥有者
            </summary>
        </member>
        <member name="P:XFrame.Modules.StateMachine.IFsm`1.Current">
            <summary>
            当前状态
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm`1.GetState``1">
            <summary>
            获取状态
            </summary>
            <typeparam name="State">状态类型</typeparam>
            <returns>获取到的状态实例</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm`1.HasState``1">
            <summary>
            是否含有状态
            </summary>
            <typeparam name="State">状态类型</typeparam>
            <returns>true表示含有</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsm`1.Start``1">
            <summary>
            启动状态机
            </summary>
            <typeparam name="State">入口状态类型</typeparam>
        </member>
        <member name="T:XFrame.Modules.StateMachine.IFsmModule">
            <summary>
            有限状态机模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmModule.GetOrNew(System.String,System.Type[])">
            <summary>
            获取(不存在时创建)有限状态机
            </summary>
            <param name="name">状态机名</param>
            <param name="states">状态机状态集合</param>
            <returns>获取到的状态机</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmModule.GetOrNew(System.Type[])">
            <summary>
            获取(不存在时创建)有限状态机
            </summary>
            <param name="states">状态机状态集合</param>
            <returns>获取到的状态机</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmModule.GetOrNew``1(System.String,``0,System.Type[])">
            <summary>
            获取(不存在时创建)有限状态机
            </summary>
            <typeparam name="T">状态机拥有者类型</typeparam>
            <param name="name">状态机名</param>
            <param name="owner">状态机拥有者</param>
            <param name="states">状态机状态集合</param>
            <returns>获取到的状态机</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmModule.GetOrNew``1(``0,System.Type[])">
            <summary>
            获取(不存在时创建)有限状态机
            </summary>
            <typeparam name="T">状态机拥有者类型</typeparam>
            <param name="owner">状态机拥有者</param>
            <param name="states">状态机状态集合</param>
            <returns>获取到的状态机</returns>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmModule.Remove(System.String)">
            <summary>
            移除有限状态机
            </summary>
            <param name="name">需要移除的状态机</param>
        </member>
        <member name="M:XFrame.Modules.StateMachine.IFsmModule.Remove(XFrame.Modules.StateMachine.IFsmBase)">
            <summary>
            移除状态机
            </summary>
            <param name="fsm">需要移除的状态机</param>
        </member>
        <member name="T:XFrame.Modules.ID.IdModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.ID.IdModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.ID.IdModule.Next">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.ID.IIdModule">
            <summary>
            Id模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.ID.IIdModule.Next">
            <summary>
            生成一个Id
            </summary>
            <returns>生成的Id</returns>
        </member>
        <member name="T:XFrame.Modules.Local.ILocalizeModule">
            <summary>
            本地化模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Local.ILocalizeModule.Event">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="P:XFrame.Modules.Local.ILocalizeModule.Lang">
            <summary>
            当前语言
            </summary>
        </member>
        <member name="P:XFrame.Modules.Local.ILocalizeModule.ExistLangs">
            <summary>
            存在的语言
            </summary>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.HasLanguage(XFrame.Modules.Local.Language)">
            <summary>
            是否存在语言
            </summary>
            <param name="language">语言</param>
            <returns>true为存在</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.Parse(System.String)">
            <summary>
            配置
            </summary>
            <param name="content">文本内容</param>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.SetFormater(System.ICustomFormatter)">
            <summary>
            设置文本格式化器
            </summary>
            <param name="formatter">自定义格式化</param>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetLine(System.Int32)">
            <summary>
            获取一整行
            </summary>
            <param name="key">Id</param>
            <returns>行</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValue(XFrame.Modules.Local.Language,System.Int32,System.Object[])">
            <summary>
            获取本地化值
            </summary>
            <param name="language">指定语言</param>
            <param name="key">Id</param>
            <param name="values">参数</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValue(System.Int32,System.Object[])">
            <summary>
            获取本地化值
            </summary>
            <param name="key">Id</param>
            <param name="values">参数</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValue(XFrame.Modules.Local.Language,XFrame.Modules.Local.LanguageParam)">
            <summary>
            获取本地化值
            </summary>
            <param name="language">语言</param>
            <param name="param">参数</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValue(XFrame.Modules.Local.LanguageParam)">
            <summary>
            获取本地化值
            </summary>
            <param name="param">参数</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValues(System.Int32[])">
            <summary>
            获取本地化值
            </summary>
            <param name="idList">语言Id列表</param>
            <returns>值列表</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValues(XFrame.Modules.Local.Language,System.Int32[])">
            <summary>
            获取本地化值
            </summary>
            <param name="language">语言</param>
            <param name="idList">语言Id列表</param>
            <returns>值列表</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValueParam(System.Int32,System.Int32[])">
            <summary>
            获取本地化值
            </summary>
            <param name="key">Id</param>
            <param name="args">参数Id</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValueParam(XFrame.Modules.Local.Language,System.Int32,System.Int32[])">
            <summary>
            获取本地化值
            </summary>
            <param name="language">指定语言</param>
            <param name="key">Id</param>
            <param name="args">参数Id</param> 
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValueParam(XFrame.Modules.Local.LanguageIdParam)">
            <summary>
            获取本地化值
            </summary>
            <param name="param">参数</param>
            <returns>值</returns>
        </member>
        <member name="M:XFrame.Modules.Local.ILocalizeModule.GetValueParam(XFrame.Modules.Local.Language,XFrame.Modules.Local.LanguageIdParam)">
            <summary>
            获取本地化值
            </summary>
            <param name="language">语言</param>
            <param name="param">参数</param>
            <returns>值</returns>
        </member>
        <member name="T:XFrame.Modules.Local.Language">
            <summary>
            语言
            </summary>
        </member>
        <member name="F:XFrame.Modules.Local.Language.None">
            <summary>
            无效
            </summary>
        </member>
        <member name="T:XFrame.Modules.Local.LanguageChangeEvent">
            <summary>
            语言改变事件
            </summary>
        </member>
        <member name="P:XFrame.Modules.Local.LanguageChangeEvent.EventId">
            <summary>
            时间Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Local.LanguageChangeEvent.Old">
            <summary>
            旧语言
            </summary>
        </member>
        <member name="P:XFrame.Modules.Local.LanguageChangeEvent.New">
            <summary>
            新语言
            </summary>
        </member>
        <member name="M:XFrame.Modules.Local.LanguageChangeEvent.Create(XFrame.Modules.Local.Language,XFrame.Modules.Local.Language)">
            <summary>
            创建事件
            </summary>
            <param name="oldLang">旧语言</param>
            <param name="newLang">新语言</param>
            <returns>事件实例</returns>
        </member>
        <member name="T:XFrame.Modules.Local.LanguageParam">
            <summary>
            语言参数
            </summary>
        </member>
        <member name="F:XFrame.Modules.Local.LanguageParam.Id">
            <summary>
            语言Id
            </summary>
        </member>
        <member name="F:XFrame.Modules.Local.LanguageParam.Params">
            <summary>
            通配参数
            </summary>
        </member>
        <member name="M:XFrame.Modules.Local.LanguageParam.Create(System.Int32,System.Object[])">
            <summary>
            构造参数
            </summary>
            <param name="id">语言Id</param>
            <param name="args">通配参数</param>
            <returns>参数</returns>
        </member>
        <member name="T:XFrame.Modules.Local.LanguageIdParam">
            <summary>
            语言参数，通配Id
            </summary>
        </member>
        <member name="F:XFrame.Modules.Local.LanguageIdParam.Id">
            <summary>
            语言Id
            </summary>
        </member>
        <member name="F:XFrame.Modules.Local.LanguageIdParam.Params">
            <summary>
            通配符对应语言Id
            </summary>
        </member>
        <member name="M:XFrame.Modules.Local.LanguageIdParam.Create(System.Int32,System.Int32[])">
            <summary>
            创建参数
            </summary>
            <param name="id">语言Id</param>
            <param name="args">通配符对应语言Id</param>
            <returns>参数</returns>
        </member>
        <member name="T:XFrame.Modules.Local.LocalizeModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Local.LocalizeModule.Event">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Local.LocalizeModule.Lang">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Local.LocalizeModule.ExistLangs">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.HasLanguage(XFrame.Modules.Local.Language)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.SetFormater(System.ICustomFormatter)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetLine(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValue(XFrame.Modules.Local.Language,System.Int32,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValue(System.Int32,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValue(XFrame.Modules.Local.Language,XFrame.Modules.Local.LanguageParam)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValue(XFrame.Modules.Local.LanguageParam)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValues(System.Int32[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValues(XFrame.Modules.Local.Language,System.Int32[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValueParam(System.Int32,System.Int32[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValueParam(XFrame.Modules.Local.Language,System.Int32,System.Int32[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValueParam(XFrame.Modules.Local.LanguageIdParam)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Local.LocalizeModule.GetValueParam(XFrame.Modules.Local.Language,XFrame.Modules.Local.LanguageIdParam)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Diagnotics.ICanConfigLog">
            <summary>
            可配置Log等级
            </summary>
        </member>
        <member name="P:XFrame.Modules.Diagnotics.ICanConfigLog.LogLv">
            <summary>
            Log等级
            </summary>
        </member>
        <member name="T:XFrame.Modules.Diagnotics.ILogger">
            <summary>
            Log辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogger.Debug(System.Object[])">
            <summary>
            调试信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogger.Warning(System.Object[])">
            <summary>
            警告信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogger.Error(System.Object[])">
            <summary>
            错误信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogger.Fatal(System.Object[])">
            <summary>
            致命错误信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogger.Exception(System.Exception)">
            <summary>
            异常错误
            </summary>
            <param name="e">异常</param>
        </member>
        <member name="T:XFrame.Modules.Diagnotics.ILogModule">
            <summary>
            Log模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.AddLogger``1">
            <summary>
            添加Log辅助器
            </summary>
            <typeparam name="T">Log辅助器类型</typeparam>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.GetLogger``1">
            <summary>
            获取Log辅助器
            </summary>
            <typeparam name="T">辅助器类型</typeparam>
            <returns>获取到的实例</returns>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.Debug(System.Object[])">
            <summary>
            调试信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.Warning(System.Object[])">
            <summary>
            警告信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.Error(System.Object[])">
            <summary>
            错误信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.Fatal(System.Object[])">
            <summary>
            致命错误信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.ILogModule.Exception(System.Exception)">
            <summary>
            异常错误
            </summary>
            <param name="e">异常</param>
        </member>
        <member name="T:XFrame.Modules.Diagnotics.Log">
            <summary>
            Log
            </summary>
        </member>
        <member name="P:XFrame.Modules.Diagnotics.Log.ToQueue">
            <summary>
            是否将Log输出到队列中
            </summary>
        </member>
        <member name="P:XFrame.Modules.Diagnotics.Log.Power">
            <summary>
            开关
            </summary>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.SetDomain(XFrame.Core.XDomain)">
            <summary>
            设置域
            </summary>
            <param name="domain">域</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.ConsumeWaitQueue">
            <summary>
            消耗队列中的Log输出到Logger中
            </summary>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.Print(XFrame.Modules.Diagnotics.LogLevel,System.Object[])">
            <summary>
            输出Log
            </summary>
            <param name="level">Log等级</param>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.Debug(System.Object[])">
            <summary>
            调试信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.Warning(System.Object[])">
            <summary>
            警告信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.Error(System.Object[])">
            <summary>
            错误信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.Fatal(System.Object[])">
            <summary>
            致命错误信息
            </summary>
            <param name="content">信息</param>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.Log.Exception(System.Exception)">
            <summary>
            异常信息
            </summary>
            <param name="e">异常</param>
        </member>
        <member name="T:XFrame.Modules.Diagnotics.LogLevel">
            <summary>
            Log等级
            </summary>
        </member>
        <member name="F:XFrame.Modules.Diagnotics.LogLevel.Ignore">
            <summary>
            忽略
            </summary>
        </member>
        <member name="F:XFrame.Modules.Diagnotics.LogLevel.Debug">
            <summary>
            正常调试
            </summary>
        </member>
        <member name="F:XFrame.Modules.Diagnotics.LogLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:XFrame.Modules.Diagnotics.LogLevel.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:XFrame.Modules.Diagnotics.LogLevel.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="F:XFrame.Modules.Diagnotics.LogLevel.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:XFrame.Modules.Diagnotics.LogModule">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.AddLogger``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.GetLogger``1">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.Debug(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.Warning(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.Error(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.Fatal(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Diagnotics.LogModule.Exception(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.DirectorAttribute">
            <summary>
            导演
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.DirectorAttribute.Default">
            <summary>
            是否为默认
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.DirectorAttribute.#ctor(System.Boolean)">
            <summary>
            构造器
            </summary>
            <param name="ifDefault">是否为默认导演</param>
        </member>
        <member name="T:XFrame.Modules.Plots.BlockDirector">
            <summary>
            故事导演类(阻塞式), 数据非持久化
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.BlockDirector.Module">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.BlockDirector.Play(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.BlockDirector.Play(XFrame.Modules.Plots.IStory[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.BlockDirector.Remove(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.BlockDirector.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.NonBlockDirector">
            <summary>
            故事导演类(非阻塞式), 数据非持久化
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.NonBlockDirector.Module">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.NonBlockDirector.Play(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.NonBlockDirector.Play(XFrame.Modules.Plots.IStory[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.NonBlockDirector.Remove(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.NonBlockDirector.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.PersistBlockDirector">
            <summary>
            故事导演类(阻塞式), 数据持久化
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.PersistBlockDirector.Module">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistBlockDirector.Play(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistBlockDirector.Play(XFrame.Modules.Plots.IStory[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistBlockDirector.Remove(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistBlockDirector.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.PersistNonBlockDirector">
            <summary>
            故事导演类(非阻塞式), 数据持久化
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.PersistNonBlockDirector.Module">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistNonBlockDirector.Play(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistNonBlockDirector.Play(XFrame.Modules.Plots.IStory[])">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistNonBlockDirector.Remove(XFrame.Modules.Plots.IStory)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PersistNonBlockDirector.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.NewStoryEvent">
            <summary>
            新故事事件
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.NewStoryEvent.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.NewStoryEvent.Stories">
            <summary>
            故事列表
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.NewStoryEvent.Create(XFrame.Modules.Plots.IStory[])">
            <summary>
            创建事件
            </summary>
            <param name="stories">故事列表</param>
            <returns>事件实例</returns>
        </member>
        <member name="M:XFrame.Modules.Plots.NewStoryEvent.Create(XFrame.Modules.Plots.IStory)">
            <summary>
            创建事件
            </summary>
            <param name="story">故事</param>
            <returns>事件实例</returns>
        </member>
        <member name="T:XFrame.Modules.Plots.PlotSectionFinishEvent">
            <summary>
            故事片段完成事件
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.PlotSectionFinishEvent.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.PlotSectionFinishEvent.Seciton">
            <summary>
            片段
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.PlotSectionFinishEvent.Create(XFrame.Modules.Plots.ISection)">
            <summary>
            创建事件
            </summary>
            <param name="section">片段</param>
            <returns>事件实例</returns>
        </member>
        <member name="T:XFrame.Modules.Plots.IDirector">
            <summary>
            故事导演
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IDirector.Module">
            <summary>
            所属模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.Play(XFrame.Modules.Plots.IStory[])">
            <summary>
            播放一组故事
            </summary>
            <param name="stories">故事列表</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.Play(XFrame.Modules.Plots.IStory)">
            <summary>
            播放一个故事
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.Remove(XFrame.Modules.Plots.IStory)">
            <summary>
            移除一个故事
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.Remove(System.String)">
            <summary>
            移除一个故事 
            </summary>
            <param name="storyName">故事名</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.CreateDataProvider(XFrame.Modules.Plots.IStory)">
            <summary>
            创建一个数据提供器
            </summary>
            <returns>数据提供器</returns>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.OnInit(XFrame.Modules.Plots.IPlotModule)">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.OnUpdate">
            <summary>
            更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IDirector.OnDestory">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="T:XFrame.Modules.Plots.IPlotHelper">
            <summary>
            故事辅助类
            </summary>
        </member>
        <member name="T:XFrame.Modules.Plots.IPlotModule">
            <summary>
            故事模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IPlotModule.Event">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IPlotModule.Helper">
            <summary>
            故事处理辅助类
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IPlotModule.NewStory(System.Type,System.Type,System.String)">
            <summary>
            请求一个新故事
            </summary>
            <param name="targetDirector">播放导演</param>
            <param name="helperType">辅助器类型</param>
            <param name="name">故事名</param>
            <returns>故事</returns>
        </member>
        <member name="M:XFrame.Modules.Plots.IPlotModule.NewStory(System.Type,System.String)">
            <summary>
            请求一个新故事
            </summary>
            <param name="targetDirector">播放导演</param>
            <param name="name">故事名</param>
            <returns>故事</returns>
        </member>
        <member name="T:XFrame.Modules.Plots.ISection">
            <summary>
            故事情节
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.ISection.Story">
            <summary>
            所属故事
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.ISection.Data">
            <summary>
            数据提供器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.ISection.IsDone">
            <summary>
            情节是否结束
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.ISection.OnCreate(XFrame.Modules.Plots.IStory,XFrame.Core.IDataProvider)">
            <summary>
            初始化生命周期
            </summary>
            <param name="story">故事</param>
            <param name="data">数据提供器</param>
        </member>
        <member name="M:XFrame.Modules.Plots.ISection.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.ISection.CanStart">
            <summary>
            是否可以开始播放
            </summary>
            <returns>true表示此情节可以开始播放</returns>
        </member>
        <member name="M:XFrame.Modules.Plots.ISection.OnStart">
            <summary>
            开始生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.ISection.OnUpdate">
            <summary>
            更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.ISection.OnFinish">
            <summary>
            完成生命周期
            </summary>
            <returns>返回true表示已处理完完成后的清理工作</returns>
        </member>
        <member name="T:XFrame.Modules.Plots.IStory">
            <summary>
            情节故事
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IStory.Director">
            <summary>
            所属导演类
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IStory.Helper">
            <summary>
            故事辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IStory.Sections">
            <summary>
            故事情节
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IStory.Count">
            <summary>
            故事情节数量
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IStory.Name">
            <summary>
            故事名称
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.IStory.IsFinish">
            <summary>
            故事是否完成
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IStory.AddSection(System.Type)">
            <summary>
            添加一个故事情节
            </summary>
            <param name="type">故事情节实现类</param>
            <returns>故事</returns>
        </member>
        <member name="M:XFrame.Modules.Plots.IStory.OnInit">
            <summary>
            初始化生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IStory.OnStart">
            <summary>
            开始生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IStory.OnUpdate">
            <summary>
            更新生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IStory.OnFinish">
            <summary>
            完成生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IStory.OnDestroy">
            <summary>
            销毁生命周期
            </summary>
        </member>
        <member name="T:XFrame.Modules.Plots.IStoryHelper">
            <summary>
            故事辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Plots.IStoryHelper.OnStoryInit(XFrame.Modules.Plots.IStory)">
            <summary>
            故事被创建
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IStoryHelper.OnStoryStart(XFrame.Modules.Plots.IStory)">
            <summary>
            故事开始
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IStoryHelper.OnStoryUpdate(XFrame.Modules.Plots.IStory)">
            <summary>
            故事更新
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IStoryHelper.OnStoryFinish(XFrame.Modules.Plots.IStory)">
            <summary>
            故事完成
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="M:XFrame.Modules.Plots.IStoryHelper.OnStoryDestory(XFrame.Modules.Plots.IStory)">
            <summary>
            故事销毁
            </summary>
            <param name="story">故事</param>
        </member>
        <member name="T:XFrame.Modules.Plots.PersistPlotDataProvider">
            <summary>
            故事数据提供器
            </summary>
        </member>
        <member name="T:XFrame.Modules.Plots.PlotModule">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Plots.PlotModule.Event">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Plots.PlotModule.Helper">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PlotModule.NewStory(System.Type,System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PlotModule.NewStory(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PlotModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PlotModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.PlotModule.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.SectionBase">
            <summary>
            情节基类
            </summary>
        </member>
        <member name="P:XFrame.Modules.Plots.SectionBase.Story">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Plots.SectionBase.Data">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Plots.SectionBase.IsDone">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.SectionBase.CanStart">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.SectionBase.OnFinish">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.SectionBase.OnStart">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.SectionBase.OnUpdate">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Plots.SectionBase.OnInit">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Plots.SectionState">
            <summary>
            故事情节状态
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.SectionState.WaitInit">
            <summary>
            等待初始化
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.SectionState.WaitStart">
            <summary>
            等待开始
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.SectionState.Running">
            <summary>
            播放中
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.SectionState.Finish">
            <summary>
            已完成
            </summary>
        </member>
        <member name="T:XFrame.Modules.Plots.StoryState">
            <summary>
            故事状态
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.StoryState.WaitStart">
            <summary>
            等待开始
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.StoryState.WaitRunning">
            <summary>
            等待播放
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.StoryState.Running">
            <summary>
            播放中
            </summary>
        </member>
        <member name="F:XFrame.Modules.Plots.StoryState.Complete">
            <summary>
            已完成
            </summary>
        </member>
        <member name="T:XFrame.Modules.Pools.CommonPoolObject`1">
            <summary>
            通用池化对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XFrame.Modules.Pools.CommonPoolObject`1.Target">
            <summary>
            对象实例
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.CommonPoolObject`1.Valid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="T:XFrame.Modules.Pools.IPool">
            <summary>
            对象池
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPool.ObjectType">
            <summary>
            对象池持有类型
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPool.ObjectCount">
            <summary>
            当前池中对象数量
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPool.UseCount">
            <summary>
            使用中数量
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPool.Helper">
            <summary>
            对象池辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPool.Module">
            <summary>
            所属模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPool.AllObjects">
            <summary>
            池中所有对象
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPool.Require(System.Int32,System.Object)">
            <summary>
            获取一个对象
            </summary>
            <param name="poolKey">对象key</param>
            <param name="userData">对象数据</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:XFrame.Modules.Pools.IPool.Release(XFrame.Modules.Pools.IPoolObject)">
            <summary>
            释放一个对象 
            </summary>
            <param name="obj">待释放的对象</param>
        </member>
        <member name="M:XFrame.Modules.Pools.IPool.Spawn(System.Int32,System.Int32,System.Object,XFrame.Collections.XLinkList{XFrame.Modules.Pools.IPoolObject})">
            <summary>
            生成池对象
            </summary>
            <param name="poolKey">对象key</param>
            <param name="count">生成数量</param>
            <param name="userData">数据参数</param>
            <param name="toList">添加到列表</param>
        </member>
        <member name="M:XFrame.Modules.Pools.IPool.ClearObject">
            <summary>
            清除所有池化对象
            </summary>
        </member>
        <member name="T:XFrame.Modules.Pools.IPool`1">
            <summary>
            对象池
            </summary>
            <typeparam name="T">持有对象类型</typeparam>
        </member>
        <member name="M:XFrame.Modules.Pools.IPool`1.Release(`0)">
            <summary>
            释放一个对象
            </summary>
            <param name="obj">要释放的对象</param>
        </member>
        <member name="M:XFrame.Modules.Pools.IPool`1.Require(System.Int32,System.Object)">
            <summary>
            获取一个对象
            </summary>
            <param name="poolKey">对象key</param>
            <param name="userData">数据参数</param>
            <returns>是否是新创建的对象，返回false表示从对象池中创建</returns>
        </member>
        <member name="T:XFrame.Modules.Pools.IPoolHelper">
            <summary>
            对象池辅助器
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPoolHelper.CacheCount">
            <summary>
            池对象数量
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolHelper.Factory(System.Type,System.Int32,System.Object)">
            <summary>
            生成对象
            </summary>
            <param name="type">对象类型</param>
            <param name="poolKey">对象key</param>
            <param name="userData">参数数据</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolHelper.OnObjectCreate(XFrame.Modules.Pools.IPoolObject)">
            <summary>
            对象创建生命周期
            </summary>
            <param name="obj">目标对象</param>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolHelper.OnObjectRequest(XFrame.Modules.Pools.IPoolObject)">
            <summary>
            对象请求生命周期
            </summary>
            <param name="obj">目标对象</param>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolHelper.OnObjectRelease(XFrame.Modules.Pools.IPoolObject)">
            <summary>
            对象释放生命周期
            </summary>
            <param name="obj">目标对象</param>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolHelper.OnObjectDestroy(XFrame.Modules.Pools.IPoolObject)">
            <summary>
            对象释放生命周期
            </summary>
            <param name="obj">目标对象</param>
        </member>
        <member name="T:XFrame.Modules.Pools.IPoolObject">
            <summary>
            可池化对象
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPoolObject.PoolKey">
            <summary>
            对象Key，即使对象类型<see cref="T:System.Type"/>相同,当从对象池中获取对象时也会获取同key的对象。
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPoolObject.MarkName">
            <summary>
            对象名
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.IPoolObject.InPool">
            <summary>
            对象所处对象池
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolObject.OnCreate">
            <summary>
            从对象池中创建时被调用
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolObject.OnRequest">
            <summary>
            从对象池中请求时被调用
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolObject.OnRelease">
            <summary>
            释放到对象池中时被调用
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.IPoolObject.OnDelete">
            <summary>
            从对象池中销毁时被调用
            </summary>
        </member>
        <member name="T:XFrame.Modules.Pools.PoolModule">
            <summary>
            对象池模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.PoolModule.AllPool">
            <summary>
            获取所有对象池的集合
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolModule.GetOrNew``1(XFrame.Modules.Pools.IPoolHelper)">
            <summary>
            创建或获取一个对象池
            </summary>
            <typeparam name="T">对象池持有类型</typeparam>
            <returns>对象池</returns>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolModule.GetOrNew(System.Type,XFrame.Modules.Pools.IPoolHelper)">
            <summary>
            创建或获取一个对象池
            </summary>
            <param name="objType">对象池持有数据类型</param>
            <returns>对象池</returns>
        </member>
        <member name="T:XFrame.Modules.Pools.PoolObjectBase">
            <summary>
            可池化对象基类
            </summary>
        </member>
        <member name="P:XFrame.Modules.Pools.PoolObjectBase.MarkName">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Pools.PoolObjectBase.PoolKey">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolObjectBase.OnCreateFromPool">
            <summary>
            第一次创建时的生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolObjectBase.OnRequestFromPool">
            <summary>
            从对象池中被请求时的生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolObjectBase.OnDestroyFromPool">
            <summary>
            从对象池中销毁的生命周期
            </summary>
        </member>
        <member name="M:XFrame.Modules.Pools.PoolObjectBase.OnReleaseFromPool">
            <summary>
            释放到对象池中时的生命周期
            </summary>
        </member>
        <member name="T:XFrame.Modules.Procedure.ProcedureBase">
            <summary>
            流程基类
            </summary>
        </member>
        <member name="T:XFrame.Modules.Procedure.ProcedureModule">
            <summary>
            流程模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureModule.Redirect(System.String)">
            <summary>
            重定向启动流程
            </summary>
            <param name="name">流程类全名称</param>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureModule.Redirect(System.Type)">
            <summary>
            重定向启动流程
            </summary>
            <param name="type">流程类</param>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureModule.Add(System.Type)">
            <summary>
            添加流程类
            </summary>
            <param name="type">流程类</param>
        </member>
        <member name="M:XFrame.Modules.Procedure.ProcedureModule.Add``1">
            <summary>
            添加流程类
            </summary>
            <typeparam name="T">流程类</typeparam>
        </member>
        <member name="T:XFrame.Modules.Rand.RandModule">
            <summary>
            随机模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Rand.RandModule.RandString(System.Int32)">
            <summary>
            随机产生 <paramref name="num"/> 长度的字符串
            </summary>
            <param name="num">字符串长度</param>
            <returns>字符串</returns>
        </member>
        <member name="T:XFrame.Modules.Resource.IResHandler">
            <summary>
            资源加载任务处理器
            </summary>
        </member>
        <member name="T:XFrame.Modules.Resource.IResourceHelper">
            <summary>
            资源加载辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.OnInit(System.String)">
            <summary>
            资源加载初始化生命周期
            </summary>
            <param name="rootPath">资源根路径</param>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.SetResDirectHelper(XFrame.Modules.Resource.IResRedirectHelper)">
            <summary>
            设置资源重定向辅助器
            </summary>
            <param name="helper">辅助器</param>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.Load(System.String,System.Type)">
            <summary>
            加载资源
            </summary>
            <param name="resPath">资源路径</param>
            <param name="type">资源类型</param>
            <returns>加载到的资源</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.Load``1(System.String)">
            <summary>
            加载资源
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="resPath">资源路径</param>
            <returns>加载到的资源</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.LoadAsync(System.String,System.Type)">
            <summary>
            异步加载资源
            </summary>
            <param name="resPath">资源路径</param>
            <param name="type">资源类型</param>
            <returns>加载到的资源</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.LoadAsync``1(System.String)">
            <summary>
            异步加载资源
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="resPath">资源路径</param>
            <returns>加载到的资源</returns>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.Unload(System.Object)">
            <summary>
            卸载资源
            </summary>
            <param name="target">卸载目标</param>
        </member>
        <member name="M:XFrame.Modules.Resource.IResourceHelper.UnloadAll">
            <summary>
            卸载所有资源
            </summary>
        </member>
        <member name="T:XFrame.Modules.Resource.IResRedirectHelper">
            <summary>
            资源重定位辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Resource.ResLoadTask`1.GetResult">
            <summary>
            加载到的资源
            </summary>
        </member>
        <member name="T:XFrame.Modules.Resource.ResModule">
            <summary>
            资源模块
            </summary>
        </member>
        <member name="T:XFrame.Modules.Serialize.ISerializeHelper">
            <summary>
            Json序列化辅助器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeHelper.Deserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="json">json文本</param>
            <param name="dataType">目标类型</param>
            <returns>反序列化到的对象</returns>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeHelper.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="json">json本文</param>
            <returns>序列化到的对象</returns>
        </member>
        <member name="M:XFrame.Modules.Serialize.ISerializeHelper.Serialize``1(``0)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="obj">需要序列化的对象</param>
            <returns>json本文</returns>
        </member>
        <member name="T:XFrame.Modules.Serialize.SerializeModule">
            <summary>
            序列化模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Serialize.SerializeModule.DeserializeToObject(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="text">text本文</param>
            <param name="type">目标类型</param>
            <returns>序列化到的对象</returns>
        </member>
        <member name="M:XFrame.Modules.Serialize.SerializeModule.DeserializeToObject``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="text">text本文</param>
            <returns>序列化到的对象</returns>
        </member>
        <member name="M:XFrame.Modules.Serialize.SerializeModule.SerializeObjectToRaw(System.Object)">
            <summary>
            序列化 
            </summary>
            <param name="obj">需要序列化的对象</param>
            <returns>json本文</returns>
        </member>
        <member name="T:XFrame.Modules.Tasks.TaskModule">
            <summary>
            任务模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Tasks.TaskModule.OnInit(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Tasks.TaskModule.OnUpdate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Tasks.TaskModule.ExecCount">
            <inheritdoc/>
        </member>
        <member name="P:XFrame.Modules.Tasks.TaskModule.TaskTimeout">
            <summary>
            任务模块最大超时
            </summary>
        </member>
        <member name="M:XFrame.Modules.Tasks.TaskModule.Register(XFrame.Core.IUpdater)">
            <inheritdoc/>
        </member>
        <member name="M:XFrame.Modules.Tasks.TaskModule.UnRegister(XFrame.Core.IUpdater)">
            <inheritdoc/>
        </member>
        <member name="T:XFrame.Modules.Threads.MainSynchronizationContext">
            <summary>
            主线程上下文处理
            </summary>
        </member>
        <member name="P:XFrame.Modules.Threads.MainSynchronizationContext.ExecTimeout">
            <summary>
            最大超时(毫秒)
            </summary>
        </member>
        <member name="T:XFrame.Modules.Times.CDTimer">
            <summary>
            CD计时器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.#ctor">
            <summary>
            构造CD计时器
            </summary>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Create(XFrame.Modules.Times.CDTimer.IUpdater)">
            <summary>
            构造CD计时器
            </summary>
            <param name="updater">时间更新器</param>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Record(System.Int32,System.Single)">
            <summary>
            开始记录一个CD
            </summary>
            <param name="key">CD键(使用此键查看CD状态)</param>
            <param name="cd">cd时间</param>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Reset(System.Int32)">
            <summary>
            重置一个cd, 调用后重置CD时间
            </summary>
            <param name="key">CD键</param>
        </member>
        <member name="M:XFrame.Modules.Times.CDTimer.Check(System.Int32,System.Boolean)">
            <summary>
            检查一个CD的状态
            </summary>
            <param name="key">CD键</param>
            <param name="reset">如果检查到的状态为到期，是否重置CD时间</param>
            <returns>true表示到期，false表示未到CD时间</returns>
        </member>
        <member name="T:XFrame.Modules.Times.TimeModule">
            <summary>
            时间模块
            </summary>
        </member>
        <member name="P:XFrame.Modules.Times.TimeModule.Time">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="P:XFrame.Modules.Times.TimeModule.EscapeTime">
            <summary>
            上帧到此帧逃逸时间
            </summary>
        </member>
        <member name="T:XFrame.Modules.Reflection.TypeModule">
            <summary>
            类型模块
            </summary>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.LoadAssembly(System.Byte[])">
            <summary>
            加载程序集
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.OnTypeChange(System.Action)">
            <summary>
            程序集改变事件
            </summary>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetType(System.String)">
            <summary>
            获取类型
            </summary>
            <param name="name">类型名</param>
            <returns>获取到的类型</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetOrNewWithAttr``1">
            <summary>
            获取(不存在时创建)一个类型系统
            类型都具有所给定的属性类
            </summary>
            <typeparam name="T">Attribute属性类</typeparam>
            <returns>获取到的类型系统</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetOrNewWithAttr(System.Type)">
            <summary>
            获取(不存在时创建)一个类型系统
            类型都具有所给定的属性类
            </summary>
            <param name="pType">Attribute属性类</param>
            <returns>获取到的类型系统</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetOrNew``1">
            <summary>
            获取(不存在时创建)一个类型系统
            类型都是所给定的类型或子类
            </summary>
            <typeparam name="T">基类</typeparam>
            <returns>获取到的类型系统</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetOrNew(System.Type)">
            <summary>
            获取(不存在时创建)一个类型系统
            类型都是所给定的类型或子类
            </summary>
            <param name="baseType">基类</param>
            <returns>获取到的类型系统</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeModule.GetAllType">
            <summary>
            获取所有类型
            </summary>
            <returns>类型列表</returns>
        </member>
        <member name="T:XFrame.Modules.Reflection.TypeSystem">
            <summary>
            类型系统
            </summary>
        </member>
        <member name="P:XFrame.Modules.Reflection.TypeSystem.Main">
            <summary>
            主类
            </summary>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.AddKey(System.Int32,System.Type)">
            <summary>
            以key键标记一个类型
            </summary>
            <param name="key">键</param>
            <param name="type">要标记的类型</param>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.GetKey(System.Int32)">
            <summary>
            获取一个被标记的类型
            </summary>
            <param name="key">键</param>
            <returns>获取到的类型</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.GetByName(System.String)">
            <summary>
            通过名字获取类型
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.TryGetByName(System.String,System.Type@)">
            <summary>
            尝试通过名字获取类型
            </summary>
            <param name="name">类型名</param>
            <param name="type">类型</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.GetOrNewBySub``1">
            <summary>
            获取(不存在时创建)子类类型系统
            </summary>
            <typeparam name="T">基类</typeparam>
            <returns>获取到的类型系统</returns>
        </member>
        <member name="M:XFrame.Modules.Reflection.TypeSystem.GetEnumerator">
            <summary>
            迭代所有类型
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="P:XFrame.Tasks.IProTaskHandler.Data">
            <summary>
            加载到的数据
            </summary>
        </member>
        <member name="P:XFrame.Tasks.IProTaskHandler.IsDone">
            <summary>
            是否加载完成
            </summary>
        </member>
        <member name="P:XFrame.Tasks.IProTaskHandler.Pro">
            <summary>
            加载进度
            </summary>
        </member>
        <member name="M:XFrame.Tasks.IProTaskHandler.OnCancel">
            <summary>
            任务取消生命周期函数
            </summary>
        </member>
        <member name="T:XFrame.Utility.PathUtility">
            <summary>
            路径常用方法
            </summary>
        </member>
        <member name="T:XFrame.Utility.TypeUtility">
            <summary>
            类型常用方法
            </summary>
        </member>
        <member name="M:XFrame.Utility.TypeUtility.GetSimpleName(System.String)">
            <summary>
            取得简易名称
            </summary>
            <param name="fullName">类型全名</param>
            <returns>简易名</returns>
        </member>
        <member name="M:XFrame.Utility.TypeUtility.GetSimpleName(System.Type)">
            <summary>
            取得简易名称
            </summary>
            <param name="type">类型</param>
            <returns>简易名</returns>
        </member>
        <member name="T:CommandLine.BaseAttribute">
            <summary>
            Models a base attribute to define command line syntax.
            </summary>
        </member>
        <member name="M:CommandLine.BaseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.BaseAttribute"/> class.
            </summary>
        </member>
        <member name="P:CommandLine.BaseAttribute.Required">
            <summary>
            Gets or sets a value indicating whether a command line option is required.
            </summary>
        </member>
        <member name="P:CommandLine.BaseAttribute.Min">
            <summary>
            When applied to <see cref="T:System.Collections.Generic.IEnumerable`1"/> properties defines
            the lower range of items.
            </summary>
            <remarks>If not set, no lower range is enforced.</remarks>
        </member>
        <member name="P:CommandLine.BaseAttribute.Max">
            <summary>
            When applied to <see cref="T:System.Collections.Generic.IEnumerable`1"/> properties defines
            the upper range of items.
            </summary>
            <remarks>If not set, no upper range is enforced.</remarks>
        </member>
        <member name="P:CommandLine.BaseAttribute.Default">
            <summary>
            Gets or sets mapped property default value.
            </summary>
        </member>
        <member name="P:CommandLine.BaseAttribute.HelpText">
            <summary>
            Gets or sets a short description of this command line option. Usually a sentence summary.
            </summary>
        </member>
        <member name="P:CommandLine.BaseAttribute.MetaValue">
            <summary>
            Gets or sets mapped property meta value. Usually an uppercase hint of required value type.
            </summary>
        </member>
        <member name="P:CommandLine.BaseAttribute.Hidden">
            <summary>
            Gets or sets a value indicating whether a command line option is visible in the help text.
            </summary>
        </member>
        <member name="P:CommandLine.BaseAttribute.ResourceType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that contains the resources for <see cref="P:CommandLine.BaseAttribute.HelpText"/>.
            </summary>
        </member>
        <member name="P:CommandLine.Core.OptionSpecification.FlagCounter">
            <summary>
            Whether this is an int option that counts how many times a flag was set rather than taking a value on the command line
            </summary>
        </member>
        <member name="F:CommandLine.Core.Specification.conversionType">
            This information is denormalized to decouple Specification from PropertyInfo.
        </member>
        <member name="P:CommandLine.Core.Value.ExplicitlyAssigned">
            <summary>
            Whether this value came from a long option with "=" separating the name from the value
            </summary>
        </member>
        <member name="P:CommandLine.Core.Value.FromSeparator">
            <summary>
            Whether this value came from a sequence specified with a separator (e.g., "--files a.txt,b.txt,c.txt")
            </summary>
        </member>
        <member name="P:CommandLine.Core.Value.Forced">
            <summary>
            Whether this value came from args after the -- separator (when EnableDashDash = true)
            </summary>
        </member>
        <member name="M:CommandLine.Core.Tokenizer.Normalize(System.Collections.Generic.IEnumerable{CommandLine.Core.Token},System.Func{System.String,System.Boolean})">
            <summary>
            Normalizes the given <paramref name="tokens"/>.
            </summary>
            <returns>The given <paramref name="tokens"/> minus all names, and their value if one was present, that are not found using <paramref name="nameLookup"/>.</returns>
        </member>
        <member name="T:CommandLine.ErrorType">
            <summary>
            Discriminator enumeration of <see cref="T:CommandLine.Error"/> derivates.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.BadFormatTokenError">
            <summary>
            Value of <see cref="T:CommandLine.BadFormatTokenError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.MissingValueOptionError">
            <summary>
            Value of <see cref="T:CommandLine.MissingValueOptionError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.UnknownOptionError">
            <summary>
            Value of <see cref="T:CommandLine.UnknownOptionError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.MissingRequiredOptionError">
            <summary>
            Value of <see cref="T:CommandLine.MissingRequiredOptionError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.MutuallyExclusiveSetError">
            <summary>
            Value of <see cref="T:CommandLine.MutuallyExclusiveSetError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.BadFormatConversionError">
            <summary>
            Value of <see cref="T:CommandLine.BadFormatConversionError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.SequenceOutOfRangeError">
            <summary>
            Value of <see cref="T:CommandLine.SequenceOutOfRangeError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.RepeatedOptionError">
            <summary>
            Value of <see cref="T:CommandLine.RepeatedOptionError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.NoVerbSelectedError">
            <summary>
            Value of <see cref="T:CommandLine.NoVerbSelectedError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.BadVerbSelectedError">
            <summary>
            Value of <see cref="T:CommandLine.BadVerbSelectedError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.HelpRequestedError">
            <summary>
            Value of <see cref="T:CommandLine.HelpRequestedError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.HelpVerbRequestedError">
            <summary>
            Value of <see cref="T:CommandLine.HelpVerbRequestedError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.VersionRequestedError">
            <summary>
            Value of <see cref="T:CommandLine.VersionRequestedError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.SetValueExceptionError">
            <summary>
            Value of <see cref="T:CommandLine.SetValueExceptionError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.InvalidAttributeConfigurationError">
            <summary>
            Value of <see cref="T:CommandLine.InvalidAttributeConfigurationError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.MissingGroupOptionError">
            <summary>
            Value of <see cref="T:CommandLine.MissingGroupOptionError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.GroupOptionAmbiguityError">
            <summary>
            Value of <see cref="T:CommandLine.GroupOptionAmbiguityError"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ErrorType.MultipleDefaultVerbsError">
            <summary>
            Value of <see cref="T:CommandLine.MultipleDefaultVerbsError"/> type.
            </summary>
        </member>
        <member name="T:CommandLine.Error">
            <summary>
            Base type of all errors.
            </summary>
            <remarks>All errors are defined within the system. There's no reason to create custom derivate types.</remarks>
        </member>
        <member name="M:CommandLine.Error.#ctor(CommandLine.ErrorType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Error"/> class.
            </summary>
            <param name="tag">Type discriminator tag.</param>
            <param name="stopsProcessing">Tells if error stops parsing process.</param>
        </member>
        <member name="M:CommandLine.Error.#ctor(CommandLine.ErrorType)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Error"/> class.
            </summary>
            <param name="tag">Type discriminator tag.</param>
        </member>
        <member name="P:CommandLine.Error.Tag">
            <summary>
            Error type discriminator, defined as <see cref="T:CommandLine.ErrorType"/> enumeration.
            </summary>
        </member>
        <member name="P:CommandLine.Error.StopsProcessing">
            <summary>
            Tells if error stops parsing process.
            Filtered by <see cref="M:CommandLine.ErrorExtensions.OnlyMeaningfulOnes(System.Collections.Generic.IEnumerable{CommandLine.Error})"/>.
            </summary>
        </member>
        <member name="M:CommandLine.Error.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><value>true</value> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:CommandLine.Error.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>A hash code for the current <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:CommandLine.Error.Equals(CommandLine.Error)">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:CommandLine.Error"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:CommandLine.Error"/> instance to compare.</param>
            <returns><value>true</value> if this instance of <see cref="T:CommandLine.Error"/> and <paramref name="other"/> have the same value; otherwise, <value>false</value>.</returns>
        </member>
        <member name="T:CommandLine.TokenError">
            <summary>
            Base type of all errors related to bad token detection.
            </summary>
        </member>
        <member name="M:CommandLine.TokenError.#ctor(CommandLine.ErrorType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.TokenError"/> class.
            </summary>
            <param name="tag">Error type.</param>
            <param name="token">Problematic token.</param>
        </member>
        <member name="P:CommandLine.TokenError.Token">
            <summary>
            The string containing the token text.
            </summary>
        </member>
        <member name="M:CommandLine.TokenError.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><value>true</value> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:CommandLine.TokenError.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>A hash code for the current <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:CommandLine.TokenError.Equals(CommandLine.TokenError)">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:CommandLine.TokenError"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:CommandLine.TokenError"/> instance to compare.</param>
            <returns><value>true</value> if this instance of <see cref="T:CommandLine.TokenError"/> and <paramref name="other"/> have the same value; otherwise, <value>false</value>.</returns>
        </member>
        <member name="T:CommandLine.BadFormatTokenError">
            <summary>
            Models an error generated when an invalid token is detected.
            </summary>
        </member>
        <member name="T:CommandLine.NamedError">
            <summary>
            Base type of all erros with name information.
            </summary>
        </member>
        <member name="M:CommandLine.NamedError.#ctor(CommandLine.ErrorType,CommandLine.NameInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.NamedError"/> class.
            </summary>
            <param name="tag">Error type.</param>
            <param name="nameInfo">Problematic name.</param>
        </member>
        <member name="P:CommandLine.NamedError.NameInfo">
            <summary>
            Name information relative to this error instance.
            </summary>
        </member>
        <member name="M:CommandLine.NamedError.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><value>true</value> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:CommandLine.NamedError.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>A hash code for the current <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:CommandLine.NamedError.Equals(CommandLine.NamedError)">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:CommandLine.NamedError"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:CommandLine.NamedError"/> instance to compare.</param>
            <returns><value>true</value> if this instance of <see cref="T:CommandLine.NamedError"/> and <paramref name="other"/> have the same value; otherwise, <value>false</value>.</returns>
        </member>
        <member name="T:CommandLine.MissingValueOptionError">
            <summary>
            Models an error generated when an option lacks its value.
            </summary>
        </member>
        <member name="T:CommandLine.UnknownOptionError">
            <summary>
            Models an error generated when an unknown option is detected.
            </summary>
        </member>
        <member name="T:CommandLine.MissingRequiredOptionError">
            <summary>
            Models an error generated when a required option is required.
            </summary>
        </member>
        <member name="T:CommandLine.MutuallyExclusiveSetError">
            <summary>
            Models an error generated when a an option from another set is defined.
            </summary>
        </member>
        <member name="P:CommandLine.MutuallyExclusiveSetError.SetName">
            <summary>
            Option's set name.
            </summary>
        </member>
        <member name="T:CommandLine.BadFormatConversionError">
            <summary>
            Models an error generated when a value conversion fails.
            </summary>
        </member>
        <member name="T:CommandLine.SequenceOutOfRangeError">
            <summary>
            Models an error generated when a sequence value lacks elements.
            </summary>
        </member>
        <member name="T:CommandLine.RepeatedOptionError">
            <summary>
            Models an error generated when an option is repeated two or more times.
            </summary>
        </member>
        <member name="T:CommandLine.BadVerbSelectedError">
            <summary>
            Models an error generated when an unknown verb is detected.
            </summary>
        </member>
        <member name="T:CommandLine.HelpRequestedError">
            <summary>
            Models an error generated when a user explicitly requests help.
            </summary>
        </member>
        <member name="T:CommandLine.HelpVerbRequestedError">
            <summary>
            Models an error generated when a user explicitly requests help in verb commands scenario.
            </summary>
        </member>
        <member name="P:CommandLine.HelpVerbRequestedError.Verb">
            <summary>
            Verb command string.
            </summary>
        </member>
        <member name="P:CommandLine.HelpVerbRequestedError.Type">
            <summary>
            <see cref="T:System.Type"/> of verb command.
            </summary>
        </member>
        <member name="P:CommandLine.HelpVerbRequestedError.Matched">
            <summary>
            <value>true</value> if verb command is found; otherwise <value>false</value>.
            </summary>
        </member>
        <member name="T:CommandLine.NoVerbSelectedError">
            <summary>
            Models an error generated when no verb is selected.
            </summary>
        </member>
        <member name="T:CommandLine.VersionRequestedError">
            <summary>
            Models an error generated when a user explicitly requests version.
            </summary>
        </member>
        <member name="T:CommandLine.SetValueExceptionError">
            <summary>
            Models as error generated when exception is thrown at Property.SetValue
            </summary>
        </member>
        <member name="P:CommandLine.SetValueExceptionError.Exception">
            <summary>
            The expection thrown from Property.SetValue
            </summary>
        </member>
        <member name="P:CommandLine.SetValueExceptionError.Value">
            <summary>
            The value that had to be set to the property
            </summary>
        </member>
        <member name="T:CommandLine.InvalidAttributeConfigurationError">
            <summary>
            Models an error generated when an invalid token is detected.
            </summary>
        </member>
        <member name="T:CommandLine.MultipleDefaultVerbsError">
            <summary>
            Models an error generated when multiple default verbs are defined.
            </summary>
        </member>
        <member name="M:CommandLine.HelpTextExtensions.IsHelp(System.Collections.Generic.IEnumerable{CommandLine.Error})">
            <summary>
             return true when errors contain HelpXXXError
            </summary>
        </member>
        <member name="M:CommandLine.HelpTextExtensions.IsVersion(System.Collections.Generic.IEnumerable{CommandLine.Error})">
            <summary>
             return true when errors contain VersionXXXError
            </summary>
        </member>
        <member name="M:CommandLine.HelpTextExtensions.Output(System.Collections.Generic.IEnumerable{CommandLine.Error})">
            <summary>
             redirect errs to Console.Error, and to Console.Out for help/version error
            </summary>
        </member>
        <member name="M:CommandLine.Infrastructure.EnumerableExtensions.Group``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Breaks a collection into groups of a specified size.
            </summary>
            <param name="source">A collection of <typeparam name="T"/>.</param>
            <param name="groupSize">The number of items each group shall contain.</param>
            <returns>An enumeration of T[].</returns>
            <remarks>An incomplete group at the end of the source collection will be silently dropped.</remarks>
        </member>
        <member name="F:CommandLine.Infrastructure.ReflectionHelper._overrides">
            <summary>
            Per thread assembly attribute overrides for testing.
            </summary>
        </member>
        <member name="M:CommandLine.Infrastructure.ReflectionHelper.SetAttributeOverride(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Assembly attribute overrides for testing.
            </summary>
            <remarks>
            The implementation will fail if two or more attributes of the same type
            are included in <paramref name="overrides"/>.
            </remarks>
            <param name="overrides">
            Attributes that replace the existing assembly attributes or null,
            to clear any testing attributes.
            </param>
        </member>
        <member name="M:CommandLine.Infrastructure.StringBuilderExtensions.SafeStartsWith(System.Text.StringBuilder,System.String)">
            <summary>
            Indicates whether the string value of a <see cref="T:System.Text.StringBuilder"/>
            starts with the input <see cref="T:System.String"/> parameter. Returns false if either 
            the StringBuilder or input string is null or empty.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to test.</param>
            <param name="s">The <see cref="T:System.String"/> to look for.</param>
            <returns></returns>
        </member>
        <member name="M:CommandLine.Infrastructure.StringBuilderExtensions.SafeEndsWith(System.Text.StringBuilder,System.String)">
            <summary>
            Indicates whether the string value of a <see cref="T:System.Text.StringBuilder"/>
            ends with the input <see cref="T:System.String"/> parameter. Returns false if either 
            the StringBuilder or input string is null or empty.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to test.</param>
            <param name="s">The <see cref="T:System.String"/> to look for.</param>
            <returns></returns>
        </member>
        <member name="T:CommandLine.NameInfo">
            <summary>
            Models name information, used in <see cref="T:CommandLine.Error"/> instances.
            </summary>
        </member>
        <member name="F:CommandLine.NameInfo.EmptyName">
            <summary>
            Represents an empty name information. Used when <see cref="T:CommandLine.Error"/> are tied to values,
            rather than options.
            </summary>
        </member>
        <member name="P:CommandLine.NameInfo.ShortName">
            <summary>
            Gets the short name of the name information.
            </summary>
        </member>
        <member name="P:CommandLine.NameInfo.LongName">
            <summary>
            Gets the long name of the name information.
            </summary>
        </member>
        <member name="P:CommandLine.NameInfo.NameText">
            <summary>
            Gets a formatted text with unified name information.
            </summary>
        </member>
        <member name="M:CommandLine.NameInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><value>true</value> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:CommandLine.NameInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>A hash code for the current <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:CommandLine.NameInfo.Equals(CommandLine.NameInfo)">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:CommandLine.NameInfo"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:CommandLine.NameInfo"/> instance to compare.</param>
            <returns><value>true</value> if this instance of <see cref="T:CommandLine.NameInfo"/> and <paramref name="other"/> have the same value; otherwise, <value>false</value>.</returns>
        </member>
        <member name="T:CommandLine.NullInstance">
            <summary>
            Models a null result when constructing a <see cref="T:CommandLine.ParserResult`1"/> in a faling verbs scenario.
            </summary>
        </member>
        <member name="T:CommandLine.OptionAttribute">
            <summary>
            Models an option specification.
            </summary>
        </member>
        <member name="M:CommandLine.OptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionAttribute"/> class.
            The default long name will be inferred from target property.
            </summary>
        </member>
        <member name="M:CommandLine.OptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionAttribute"/> class.
            </summary>
            <param name="longName">The long name of the option.</param>
        </member>
        <member name="M:CommandLine.OptionAttribute.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="M:CommandLine.OptionAttribute.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option..</param>
        </member>
        <member name="P:CommandLine.OptionAttribute.LongName">
            <summary>
            Gets long name of this command line option. This name is usually a single english word.
            </summary>
        </member>
        <member name="P:CommandLine.OptionAttribute.ShortName">
            <summary>
            Gets a short name of this command line option, made of one character.
            </summary>
        </member>
        <member name="P:CommandLine.OptionAttribute.SetName">
            <summary>
            Gets or sets the option's mutually exclusive set name.
            </summary>
        </member>
        <member name="P:CommandLine.OptionAttribute.FlagCounter">
            <summary>
            If true, this is an int option that counts how many times a flag was set (e.g. "-v -v -v" or "-vvv" would return 3).
            The property must be of type int (signed 32-bit integer).
            </summary>
        </member>
        <member name="P:CommandLine.OptionAttribute.Separator">
            <summary>
            When applying attribute to <see cref="T:System.Collections.Generic.IEnumerable`1"/> target properties,
            it allows you to split an argument and consume its content as a sequence.
            </summary>
        </member>
        <member name="P:CommandLine.OptionAttribute.Group">
            <summary>
            Gets or sets the option group name. When one or more options are grouped, at least one of them should have value. Required rules are ignored.
            </summary>
        </member>
        <member name="T:CommandLine.Parser">
            <summary>
            Provides methods to parse command line arguments.
            </summary>
        </member>
        <member name="M:CommandLine.Parser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Parser"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.Parser.#ctor(System.Action{CommandLine.ParserSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Parser"/> class,
            configurable with <see cref="T:CommandLine.ParserSettings"/> using a delegate.
            </summary>
            <param name="configuration">The <see cref="T:System.Action`1"/> delegate used to configure
            aspects and behaviors of the parser.</param>
        </member>
        <member name="M:CommandLine.Parser.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:CommandLine.Parser"/> class.
            </summary>
        </member>
        <member name="P:CommandLine.Parser.Default">
            <summary>
            Gets the singleton instance created with basic defaults.
            </summary>
        </member>
        <member name="P:CommandLine.Parser.Settings">
            <summary>
            Gets the instance that implements <see cref="T:CommandLine.ParserSettings"/> in use.
            </summary>
        </member>
        <member name="M:CommandLine.Parser.ParseArguments``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments constructing values in an instance of type <typeparamref name="T"/>.
            Grammar rules are defined decorating public properties with appropriate attributes.
            </summary>
            <typeparam name="T">Type of the target instance built with parsed value.</typeparam>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing an instance of type <typeparamref name="T"/> with parsed values
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
        </member>
        <member name="M:CommandLine.Parser.ParseArguments``1(System.Func{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments constructing values in an instance of type <typeparamref name="T"/>.
            Grammar rules are defined decorating public properties with appropriate attributes.
            </summary>
            <typeparam name="T">Type of the target instance built with parsed value.</typeparam>
            <param name="factory">A <see cref="T:System.Func`1"/> delegate used to initialize the target instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing an instance of type <typeparamref name="T"/> with parsed values
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
        </member>
        <member name="M:CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable{System.String},System.Type[])">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from the array of types supplied by <paramref name="types"/>.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <param name="types">A <see cref="T:System.Type"/> array used to supply verb alternatives.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="types"/> array is empty.</exception>
            <remarks>All types must expose a parameterless constructor. It's strongly recommended to use a generic overload.</remarks>
        </member>
        <member name="M:CommandLine.Parser.Dispose">
            <summary>
            Frees resources owned by the instance.
            </summary>
        </member>
        <member name="T:CommandLine.ParserExtensions">
            <summary>
            Defines generic overloads for <see cref="M:CommandLine.Parser.ParseArguments(System.Collections.Generic.IEnumerable{System.String},System.Type[])"/>.
            </summary>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``2(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``3(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``4(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``5(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``6(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``7(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``8(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``9(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``10(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``11(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <typeparam name="T11">The type of the eleventh verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``12(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <typeparam name="T11">The type of the eleventh verb.</typeparam>
            <typeparam name="T12">The type of the twelfth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``13(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <typeparam name="T11">The type of the eleventh verb.</typeparam>
            <typeparam name="T12">The type of the twelfth verb.</typeparam>
            <typeparam name="T13">The type of the thirteenth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``14(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <typeparam name="T11">The type of the eleventh verb.</typeparam>
            <typeparam name="T12">The type of the twelfth verb.</typeparam>
            <typeparam name="T13">The type of the thirteenth verb.</typeparam>
            <typeparam name="T14">The type of the fourteenth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``15(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <typeparam name="T11">The type of the eleventh verb.</typeparam>
            <typeparam name="T12">The type of the twelfth verb.</typeparam>
            <typeparam name="T13">The type of the thirteenth verb.</typeparam>
            <typeparam name="T14">The type of the fourteenth verb.</typeparam>
            <typeparam name="T15">The type of the fifteenth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="M:CommandLine.ParserExtensions.ParseArguments``16(CommandLine.Parser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a string array of command line arguments for verb commands scenario, constructing the proper instance from types as generic arguments.
            Grammar rules are defined decorating public properties with appropriate attributes.
            The <see cref="T:CommandLine.VerbAttribute"/> must be applied to types in the array.
            </summary>
            <typeparam name="T1">The type of the first verb.</typeparam>
            <typeparam name="T2">The type of the second verb.</typeparam>
            <typeparam name="T3">The type of the third verb.</typeparam>
            <typeparam name="T4">The type of the fourth verb.</typeparam>
            <typeparam name="T5">The type of the fifth verb.</typeparam>
            <typeparam name="T6">The type of the sixth verb.</typeparam>
            <typeparam name="T7">The type of the seventh verb.</typeparam>
            <typeparam name="T8">The type of the eighth verb.</typeparam>
            <typeparam name="T9">The type of the ninth verb.</typeparam>
            <typeparam name="T10">The type of the tenth verb.</typeparam>
            <typeparam name="T11">The type of the eleventh verb.</typeparam>
            <typeparam name="T12">The type of the twelfth verb.</typeparam>
            <typeparam name="T13">The type of the thirteenth verb.</typeparam>
            <typeparam name="T14">The type of the fourteenth verb.</typeparam>
            <typeparam name="T15">The type of the fifteenth verb.</typeparam>
            <typeparam name="T16">The type of the sixteenth verb.</typeparam>
            <param name="parser">A <see cref="T:CommandLine.Parser"/> instance.</param>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments, normally supplied by application entry point.</param>
            <returns>A <see cref="T:CommandLine.ParserResult`1"/> containing the appropriate instance with parsed values as a <see cref="T:System.Object"/>
            and a sequence of <see cref="T:CommandLine.Error"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one or more arguments are null.</exception>
            <remarks>All types must expose a parameterless constructor.</remarks>
        </member>
        <member name="T:CommandLine.ParserResultType">
            <summary>
            Discriminator enumeration of <see cref="T:CommandLine.ParserResultType"/> derivates.
            </summary>
        </member>
        <member name="F:CommandLine.ParserResultType.Parsed">
            <summary>
            Value of <see cref="T:CommandLine.Parsed`1"/> type.
            </summary>
        </member>
        <member name="F:CommandLine.ParserResultType.NotParsed">
            <summary>
            Value of <see cref="T:CommandLine.NotParsed`1"/> type.
            </summary>
        </member>
        <member name="T:CommandLine.ParserResult`1">
            <summary>
            Models a parser result. When inherited by <see cref="T:CommandLine.Parsed`1"/>, it contains an instance of type <typeparamref name="T"/>
            with parsed values.
            When inherited by <see cref="T:CommandLine.NotParsed`1"/>, it contains a sequence of <see cref="T:CommandLine.Error"/>.
            </summary>
            <typeparam name="T">The type with attributes that define the syntax of parsing rules.</typeparam>
        </member>
        <member name="P:CommandLine.ParserResult`1.Tag">
            <summary>
            Parser result type discriminator, defined as <see cref="T:CommandLine.ParserResultType"/> enumeration.
            </summary>
        </member>
        <member name="P:CommandLine.ParserResult`1.Value">
            <summary>
            Gets the instance with parsed values. If one or more errors occures, <see langword="default"/> is returned.
            </summary>
        </member>
        <member name="P:CommandLine.ParserResult`1.Errors">
            <summary>
            Gets the sequence of parsing errors. If there are no errors, then an empty IEnumerable is returned.
            </summary>
        </member>
        <member name="T:CommandLine.Parsed`1">
            <summary>
            It contains an instance of type <typeparamref name="T"/> with parsed values.
            </summary>
            <typeparam name="T">The type with attributes that define the syntax of parsing rules.</typeparam>
        </member>
        <member name="M:CommandLine.Parsed`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><value>true</value> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:CommandLine.Parsed`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>A hash code for the current <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:CommandLine.Parsed`1.Equals(CommandLine.Parsed{`0})">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:CommandLine.Parsed`1"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:CommandLine.Parsed`1"/> instance to compare.</param>
            <returns><value>true</value> if this instance of <see cref="T:CommandLine.Parsed`1"/> and <paramref name="other"/> have the same value; otherwise, <value>false</value>.</returns>
        </member>
        <member name="T:CommandLine.NotParsed`1">
            <summary>
            It contains a sequence of <see cref="T:CommandLine.Error"/>.
            </summary>
            <typeparam name="T">The type with attributes that define the syntax of parsing rules.</typeparam>
        </member>
        <member name="M:CommandLine.NotParsed`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><value>true</value> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:CommandLine.NotParsed`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>A hash code for the current <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:CommandLine.NotParsed`1.Equals(CommandLine.NotParsed{`0})">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:CommandLine.NotParsed`1"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:CommandLine.NotParsed`1"/> instance to compare.</param>
            <returns><value>true</value> if this instance of <see cref="T:CommandLine.NotParsed`1"/> and <paramref name="other"/> have the same value; otherwise, <value>false</value>.</returns>
        </member>
        <member name="T:CommandLine.ParserResultExtensions">
            <summary>
            Provides convenience extension methods for <see cref="T:CommandLine.ParserResult`1"/>.
            </summary>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.WithParsed``1(CommandLine.ParserResult{``0},System.Action{``0})">
            <summary>
            Executes <paramref name="action"/> if <see cref="T:CommandLine.ParserResult`1"/> contains
            parsed values.
            </summary>
            <typeparam name="T">Type of the target instance built with parsed value.</typeparam>
            <param name="result">An <see cref="T:CommandLine.ParserResult`1"/> instance.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to execute.</param>
            <returns>The same <paramref name="result"/> instance.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.WithParsed``1(CommandLine.ParserResult{System.Object},System.Action{``0})">
            <summary>
            Executes <paramref name="action"/> if parsed values are of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the target instance built with parsed value.</typeparam>
            <param name="result">An verb result instance.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to execute.</param>
            <returns>The same <paramref name="result"/> instance.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.WithNotParsed``1(CommandLine.ParserResult{``0},System.Action{System.Collections.Generic.IEnumerable{CommandLine.Error}})">
            <summary>
            Executes <paramref name="action"/> if <see cref="T:CommandLine.ParserResult`1"/> lacks
            parsed values and contains errors.
            </summary>
            <typeparam name="T">Type of the target instance built with parsed value.</typeparam>
            <param name="result">An <see cref="T:CommandLine.ParserResult`1"/> instance.</param>
            <param name="action">The <see cref="T:System.Action"/> delegate to execute.</param>
            <returns>The same <paramref name="result"/> instance.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``2(CommandLine.ParserResult{``0},System.Func{``0,``1},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``1})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="TSource">Type of the target instance built with parsed value.</typeparam>
            <typeparam name="TResult">The type of the new value.</typeparam>
            <param name="result">An <see cref="T:CommandLine.ParserResult`1"/> instance.</param>
            <param name="parsedFunc">Lambda executed on successful parsing.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``2(CommandLine.ParserResult{System.Object},System.Func{``0,``1},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``1})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``3(CommandLine.ParserResult{System.Object},System.Func{``0,``2},System.Func{``1,``2},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``2})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``4(CommandLine.ParserResult{System.Object},System.Func{``0,``3},System.Func{``1,``3},System.Func{``2,``3},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``3})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``5(CommandLine.ParserResult{System.Object},System.Func{``0,``4},System.Func{``1,``4},System.Func{``2,``4},System.Func{``3,``4},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``4})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``6(CommandLine.ParserResult{System.Object},System.Func{``0,``5},System.Func{``1,``5},System.Func{``2,``5},System.Func{``3,``5},System.Func{``4,``5},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``5})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="T5">Fifth verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="parsedFunc5">Lambda executed on successful parsing of <typeparamref name="T5"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``7(CommandLine.ParserResult{System.Object},System.Func{``0,``6},System.Func{``1,``6},System.Func{``2,``6},System.Func{``3,``6},System.Func{``4,``6},System.Func{``5,``6},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``6})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="T5">Fifth verb type.</typeparam>
            <typeparam name="T6">Sixth verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="parsedFunc5">Lambda executed on successful parsing of <typeparamref name="T5"/>.</param>
            <param name="parsedFunc6">Lambda executed on successful parsing of <typeparamref name="T6"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``8(CommandLine.ParserResult{System.Object},System.Func{``0,``7},System.Func{``1,``7},System.Func{``2,``7},System.Func{``3,``7},System.Func{``4,``7},System.Func{``5,``7},System.Func{``6,``7},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``7})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="T5">Fifth verb type.</typeparam>
            <typeparam name="T6">Sixth verb type.</typeparam>
            <typeparam name="T7">Seventh verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="parsedFunc5">Lambda executed on successful parsing of <typeparamref name="T5"/>.</param>
            <param name="parsedFunc6">Lambda executed on successful parsing of <typeparamref name="T6"/>.</param>
            <param name="parsedFunc7">Lambda executed on successful parsing of <typeparamref name="T7"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``9(CommandLine.ParserResult{System.Object},System.Func{``0,``8},System.Func{``1,``8},System.Func{``2,``8},System.Func{``3,``8},System.Func{``4,``8},System.Func{``5,``8},System.Func{``6,``8},System.Func{``7,``8},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``8})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="T5">Fifth verb type.</typeparam>
            <typeparam name="T6">Sixth verb type.</typeparam>
            <typeparam name="T7">Seventh verb type.</typeparam>
            <typeparam name="T8">Eighth verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="parsedFunc5">Lambda executed on successful parsing of <typeparamref name="T5"/>.</param>
            <param name="parsedFunc6">Lambda executed on successful parsing of <typeparamref name="T6"/>.</param>
            <param name="parsedFunc7">Lambda executed on successful parsing of <typeparamref name="T7"/>.</param>
            <param name="parsedFunc8">Lambda executed on successful parsing of <typeparamref name="T8"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``10(CommandLine.ParserResult{System.Object},System.Func{``0,``9},System.Func{``1,``9},System.Func{``2,``9},System.Func{``3,``9},System.Func{``4,``9},System.Func{``5,``9},System.Func{``6,``9},System.Func{``7,``9},System.Func{``8,``9},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``9})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="T5">Fifth verb type.</typeparam>
            <typeparam name="T6">Sixth verb type.</typeparam>
            <typeparam name="T7">Seventh verb type.</typeparam>
            <typeparam name="T8">Eighth verb type.</typeparam>
            <typeparam name="T9">Ninth verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="parsedFunc5">Lambda executed on successful parsing of <typeparamref name="T5"/>.</param>
            <param name="parsedFunc6">Lambda executed on successful parsing of <typeparamref name="T6"/>.</param>
            <param name="parsedFunc7">Lambda executed on successful parsing of <typeparamref name="T7"/>.</param>
            <param name="parsedFunc8">Lambda executed on successful parsing of <typeparamref name="T8"/>.</param>
            <param name="parsedFunc9">Lambda executed on successful parsing of <typeparamref name="T9"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``11(CommandLine.ParserResult{System.Object},System.Func{``0,``10},System.Func{``1,``10},System.Func{``2,``10},System.Func{``3,``10},System.Func{``4,``10},System.Func{``5,``10},System.Func{``6,``10},System.Func{``7,``10},System.Func{``8,``10},System.Func{``9,``10},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``10})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="T5">Fifth verb type.</typeparam>
            <typeparam name="T6">Sixth verb type.</typeparam>
            <typeparam name="T7">Seventh verb type.</typeparam>
            <typeparam name="T8">Eighth verb type.</typeparam>
            <typeparam name="T9">Ninth verb type.</typeparam>
            <typeparam name="T10">Tenth verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="parsedFunc5">Lambda executed on successful parsing of <typeparamref name="T5"/>.</param>
            <param name="parsedFunc6">Lambda executed on successful parsing of <typeparamref name="T6"/>.</param>
            <param name="parsedFunc7">Lambda executed on successful parsing of <typeparamref name="T7"/>.</param>
            <param name="parsedFunc8">Lambda executed on successful parsing of <typeparamref name="T8"/>.</param>
            <param name="parsedFunc9">Lambda executed on successful parsing of <typeparamref name="T9"/>.</param>
            <param name="parsedFunc10">Lambda executed on successful parsing of <typeparamref name="T10"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``12(CommandLine.ParserResult{System.Object},System.Func{``0,``11},System.Func{``1,``11},System.Func{``2,``11},System.Func{``3,``11},System.Func{``4,``11},System.Func{``5,``11},System.Func{``6,``11},System.Func{``7,``11},System.Func{``8,``11},System.Func{``9,``11},System.Func{``10,``11},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``11})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="T5">Fifth verb type.</typeparam>
            <typeparam name="T6">Sixth verb type.</typeparam>
            <typeparam name="T7">Seventh verb type.</typeparam>
            <typeparam name="T8">Eighth verb type.</typeparam>
            <typeparam name="T9">Ninth verb type.</typeparam>
            <typeparam name="T10">Tenth verb type.</typeparam>
            <typeparam name="T11">Eleventh verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="parsedFunc5">Lambda executed on successful parsing of <typeparamref name="T5"/>.</param>
            <param name="parsedFunc6">Lambda executed on successful parsing of <typeparamref name="T6"/>.</param>
            <param name="parsedFunc7">Lambda executed on successful parsing of <typeparamref name="T7"/>.</param>
            <param name="parsedFunc8">Lambda executed on successful parsing of <typeparamref name="T8"/>.</param>
            <param name="parsedFunc9">Lambda executed on successful parsing of <typeparamref name="T9"/>.</param>
            <param name="parsedFunc10">Lambda executed on successful parsing of <typeparamref name="T10"/>.</param>
            <param name="parsedFunc11">Lambda executed on successful parsing of <typeparamref name="T11"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``13(CommandLine.ParserResult{System.Object},System.Func{``0,``12},System.Func{``1,``12},System.Func{``2,``12},System.Func{``3,``12},System.Func{``4,``12},System.Func{``5,``12},System.Func{``6,``12},System.Func{``7,``12},System.Func{``8,``12},System.Func{``9,``12},System.Func{``10,``12},System.Func{``11,``12},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``12})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="T5">Fifth verb type.</typeparam>
            <typeparam name="T6">Sixth verb type.</typeparam>
            <typeparam name="T7">Seventh verb type.</typeparam>
            <typeparam name="T8">Eighth verb type.</typeparam>
            <typeparam name="T9">Ninth verb type.</typeparam>
            <typeparam name="T10">Tenth verb type.</typeparam>
            <typeparam name="T11">Eleventh verb type.</typeparam>
            <typeparam name="T12">Twelfth verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="parsedFunc5">Lambda executed on successful parsing of <typeparamref name="T5"/>.</param>
            <param name="parsedFunc6">Lambda executed on successful parsing of <typeparamref name="T6"/>.</param>
            <param name="parsedFunc7">Lambda executed on successful parsing of <typeparamref name="T7"/>.</param>
            <param name="parsedFunc8">Lambda executed on successful parsing of <typeparamref name="T8"/>.</param>
            <param name="parsedFunc9">Lambda executed on successful parsing of <typeparamref name="T9"/>.</param>
            <param name="parsedFunc10">Lambda executed on successful parsing of <typeparamref name="T10"/>.</param>
            <param name="parsedFunc11">Lambda executed on successful parsing of <typeparamref name="T11"/>.</param>
            <param name="parsedFunc12">Lambda executed on successful parsing of <typeparamref name="T12"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``14(CommandLine.ParserResult{System.Object},System.Func{``0,``13},System.Func{``1,``13},System.Func{``2,``13},System.Func{``3,``13},System.Func{``4,``13},System.Func{``5,``13},System.Func{``6,``13},System.Func{``7,``13},System.Func{``8,``13},System.Func{``9,``13},System.Func{``10,``13},System.Func{``11,``13},System.Func{``12,``13},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``13})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="T5">Fifth verb type.</typeparam>
            <typeparam name="T6">Sixth verb type.</typeparam>
            <typeparam name="T7">Seventh verb type.</typeparam>
            <typeparam name="T8">Eighth verb type.</typeparam>
            <typeparam name="T9">Ninth verb type.</typeparam>
            <typeparam name="T10">Tenth verb type.</typeparam>
            <typeparam name="T11">Eleventh verb type.</typeparam>
            <typeparam name="T12">Twelfth verb type.</typeparam>
            <typeparam name="T13">Thirteenth verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="parsedFunc5">Lambda executed on successful parsing of <typeparamref name="T5"/>.</param>
            <param name="parsedFunc6">Lambda executed on successful parsing of <typeparamref name="T6"/>.</param>
            <param name="parsedFunc7">Lambda executed on successful parsing of <typeparamref name="T7"/>.</param>
            <param name="parsedFunc8">Lambda executed on successful parsing of <typeparamref name="T8"/>.</param>
            <param name="parsedFunc9">Lambda executed on successful parsing of <typeparamref name="T9"/>.</param>
            <param name="parsedFunc10">Lambda executed on successful parsing of <typeparamref name="T10"/>.</param>
            <param name="parsedFunc11">Lambda executed on successful parsing of <typeparamref name="T11"/>.</param>
            <param name="parsedFunc12">Lambda executed on successful parsing of <typeparamref name="T12"/>.</param>
            <param name="parsedFunc13">Lambda executed on successful parsing of <typeparamref name="T13"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``15(CommandLine.ParserResult{System.Object},System.Func{``0,``14},System.Func{``1,``14},System.Func{``2,``14},System.Func{``3,``14},System.Func{``4,``14},System.Func{``5,``14},System.Func{``6,``14},System.Func{``7,``14},System.Func{``8,``14},System.Func{``9,``14},System.Func{``10,``14},System.Func{``11,``14},System.Func{``12,``14},System.Func{``13,``14},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``14})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="T5">Fifth verb type.</typeparam>
            <typeparam name="T6">Sixth verb type.</typeparam>
            <typeparam name="T7">Seventh verb type.</typeparam>
            <typeparam name="T8">Eighth verb type.</typeparam>
            <typeparam name="T9">Ninth verb type.</typeparam>
            <typeparam name="T10">Tenth verb type.</typeparam>
            <typeparam name="T11">Eleventh verb type.</typeparam>
            <typeparam name="T12">Twelfth verb type.</typeparam>
            <typeparam name="T13">Thirteenth verb type.</typeparam>
            <typeparam name="T14">Fourteenth verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="parsedFunc5">Lambda executed on successful parsing of <typeparamref name="T5"/>.</param>
            <param name="parsedFunc6">Lambda executed on successful parsing of <typeparamref name="T6"/>.</param>
            <param name="parsedFunc7">Lambda executed on successful parsing of <typeparamref name="T7"/>.</param>
            <param name="parsedFunc8">Lambda executed on successful parsing of <typeparamref name="T8"/>.</param>
            <param name="parsedFunc9">Lambda executed on successful parsing of <typeparamref name="T9"/>.</param>
            <param name="parsedFunc10">Lambda executed on successful parsing of <typeparamref name="T10"/>.</param>
            <param name="parsedFunc11">Lambda executed on successful parsing of <typeparamref name="T11"/>.</param>
            <param name="parsedFunc12">Lambda executed on successful parsing of <typeparamref name="T12"/>.</param>
            <param name="parsedFunc13">Lambda executed on successful parsing of <typeparamref name="T13"/>.</param>
            <param name="parsedFunc14">Lambda executed on successful parsing of <typeparamref name="T14"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``16(CommandLine.ParserResult{System.Object},System.Func{``0,``15},System.Func{``1,``15},System.Func{``2,``15},System.Func{``3,``15},System.Func{``4,``15},System.Func{``5,``15},System.Func{``6,``15},System.Func{``7,``15},System.Func{``8,``15},System.Func{``9,``15},System.Func{``10,``15},System.Func{``11,``15},System.Func{``12,``15},System.Func{``13,``15},System.Func{``14,``15},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``15})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="T5">Fifth verb type.</typeparam>
            <typeparam name="T6">Sixth verb type.</typeparam>
            <typeparam name="T7">Seventh verb type.</typeparam>
            <typeparam name="T8">Eighth verb type.</typeparam>
            <typeparam name="T9">Ninth verb type.</typeparam>
            <typeparam name="T10">Tenth verb type.</typeparam>
            <typeparam name="T11">Eleventh verb type.</typeparam>
            <typeparam name="T12">Twelfth verb type.</typeparam>
            <typeparam name="T13">Thirteenth verb type.</typeparam>
            <typeparam name="T14">Fourteenth verb type.</typeparam>
            <typeparam name="T15">Fifteenth verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="parsedFunc5">Lambda executed on successful parsing of <typeparamref name="T5"/>.</param>
            <param name="parsedFunc6">Lambda executed on successful parsing of <typeparamref name="T6"/>.</param>
            <param name="parsedFunc7">Lambda executed on successful parsing of <typeparamref name="T7"/>.</param>
            <param name="parsedFunc8">Lambda executed on successful parsing of <typeparamref name="T8"/>.</param>
            <param name="parsedFunc9">Lambda executed on successful parsing of <typeparamref name="T9"/>.</param>
            <param name="parsedFunc10">Lambda executed on successful parsing of <typeparamref name="T10"/>.</param>
            <param name="parsedFunc11">Lambda executed on successful parsing of <typeparamref name="T11"/>.</param>
            <param name="parsedFunc12">Lambda executed on successful parsing of <typeparamref name="T12"/>.</param>
            <param name="parsedFunc13">Lambda executed on successful parsing of <typeparamref name="T13"/>.</param>
            <param name="parsedFunc14">Lambda executed on successful parsing of <typeparamref name="T14"/>.</param>
            <param name="parsedFunc15">Lambda executed on successful parsing of <typeparamref name="T15"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.MapResult``17(CommandLine.ParserResult{System.Object},System.Func{``0,``16},System.Func{``1,``16},System.Func{``2,``16},System.Func{``3,``16},System.Func{``4,``16},System.Func{``5,``16},System.Func{``6,``16},System.Func{``7,``16},System.Func{``8,``16},System.Func{``9,``16},System.Func{``10,``16},System.Func{``11,``16},System.Func{``12,``16},System.Func{``13,``16},System.Func{``14,``16},System.Func{``15,``16},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},``16})">
            <summary>
            Provides a way to transform result data into another value.
            </summary>
            <typeparam name="T1">First verb type.</typeparam>
            <typeparam name="T2">Second verb type.</typeparam>
            <typeparam name="T3">Third verb type.</typeparam>
            <typeparam name="T4">Fourth verb type.</typeparam>
            <typeparam name="T5">Fifth verb type.</typeparam>
            <typeparam name="T6">Sixth verb type.</typeparam>
            <typeparam name="T7">Seventh verb type.</typeparam>
            <typeparam name="T8">Eighth verb type.</typeparam>
            <typeparam name="T9">Ninth verb type.</typeparam>
            <typeparam name="T10">Tenth verb type.</typeparam>
            <typeparam name="T11">Eleventh verb type.</typeparam>
            <typeparam name="T12">Twelfth verb type.</typeparam>
            <typeparam name="T13">Thirteenth verb type.</typeparam>
            <typeparam name="T14">Fourteenth verb type.</typeparam>
            <typeparam name="T15">Fifteenth verb type.</typeparam>
            <typeparam name="T16">Sixteenth verb type.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result">The result in verb scenario.</param>
            <param name="parsedFunc1">Lambda executed on successful parsing of <typeparamref name="T1"/>.</param>
            <param name="parsedFunc2">Lambda executed on successful parsing of <typeparamref name="T2"/>.</param>
            <param name="parsedFunc3">Lambda executed on successful parsing of <typeparamref name="T3"/>.</param>
            <param name="parsedFunc4">Lambda executed on successful parsing of <typeparamref name="T4"/>.</param>
            <param name="parsedFunc5">Lambda executed on successful parsing of <typeparamref name="T5"/>.</param>
            <param name="parsedFunc6">Lambda executed on successful parsing of <typeparamref name="T6"/>.</param>
            <param name="parsedFunc7">Lambda executed on successful parsing of <typeparamref name="T7"/>.</param>
            <param name="parsedFunc8">Lambda executed on successful parsing of <typeparamref name="T8"/>.</param>
            <param name="parsedFunc9">Lambda executed on successful parsing of <typeparamref name="T9"/>.</param>
            <param name="parsedFunc10">Lambda executed on successful parsing of <typeparamref name="T10"/>.</param>
            <param name="parsedFunc11">Lambda executed on successful parsing of <typeparamref name="T11"/>.</param>
            <param name="parsedFunc12">Lambda executed on successful parsing of <typeparamref name="T12"/>.</param>
            <param name="parsedFunc13">Lambda executed on successful parsing of <typeparamref name="T13"/>.</param>
            <param name="parsedFunc14">Lambda executed on successful parsing of <typeparamref name="T14"/>.</param>
            <param name="parsedFunc15">Lambda executed on successful parsing of <typeparamref name="T15"/>.</param>
            <param name="parsedFunc16">Lambda executed on successful parsing of <typeparamref name="T16"/>.</param>
            <param name="notParsedFunc">Lambda executed on failed parsing.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.WithParsedAsync``1(CommandLine.ParserResult{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Executes asynchronously <paramref name="action"/> if <see cref="T:CommandLine.ParserResult`1"/> contains
            parsed values.
            </summary>
            <typeparam name="T">Type of the target instance built with parsed value.</typeparam>
            <param name="result">An <see cref="T:CommandLine.ParserResult`1"/> instance.</param>
            <param name="action">The <see cref="T:System.Func`2"/> to execute.</param>
            <returns>The same <paramref name="result"/> instance as a <see cref="T:System.Threading.Tasks.Task"/> instance.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.WithParsedAsync``1(CommandLine.ParserResult{System.Object},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Executes asynchronously <paramref name="action"/> if parsed values are of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the target instance built with parsed value.</typeparam>
            <param name="result">An verb result instance.</param>
            <param name="action">The <see cref="T:System.Func`2"/> to execute.</param>
            <returns>The same <paramref name="result"/> instance as a <see cref="T:System.Threading.Tasks.Task"/> instance.</returns>
        </member>
        <member name="M:CommandLine.ParserResultExtensions.WithNotParsedAsync``1(CommandLine.ParserResult{``0},System.Func{System.Collections.Generic.IEnumerable{CommandLine.Error},System.Threading.Tasks.Task})">
            <summary>
            Executes asynchronously <paramref name="action"/> if <see cref="T:CommandLine.ParserResult`1"/> lacks
            parsed values and contains errors.
            </summary>
            <typeparam name="T">Type of the target instance built with parsed value.</typeparam>
            <param name="result">An <see cref="T:CommandLine.ParserResult`1"/> instance.</param>
            <param name="action">The <see cref="T:System.Func`1"/> delegate to execute.</param>
            <returns>The same <paramref name="result"/> instance as a <see cref="T:System.Threading.Tasks.Task"/> instance.</returns>
        </member>
        <member name="T:CommandLine.ParserSettings">
            <summary>
            Provides settings for <see cref="T:CommandLine.Parser"/>. Once consumed cannot be reused.
            </summary>
        </member>
        <member name="M:CommandLine.ParserSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ParserSettings"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.ParserSettings.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:CommandLine.ParserSettings"/> class.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether perform case sensitive comparisons.
            Note that case insensitivity only applies to <i>parameters</i>, not the values
            assigned to them (for example, enum parsing).
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.CaseInsensitiveEnumValues">
            <summary>
            Gets or sets a value indicating whether perform case sensitive comparisons of <i>values</i>.
            Note that case insensitivity only applies to <i>values</i>, not the parameters.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.ParsingCulture">
            <summary>
            Gets or sets the culture used when parsing arguments to typed properties.
            </summary>
            <remarks>
            Default is invariant culture, <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
        </member>
        <member name="P:CommandLine.ParserSettings.HelpWriter">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> used for help method output.
            Setting this property to null, will disable help screen.
            </summary>
            <remarks>
            It is the caller's responsibility to dispose or close the <see cref="T:System.IO.TextWriter"/>.
            </remarks>
        </member>
        <member name="P:CommandLine.ParserSettings.IgnoreUnknownArguments">
            <summary>
            Gets or sets a value indicating whether the parser shall move on to the next argument and ignore the given argument if it
            encounter an unknown arguments
            </summary>
            <value>
            <c>true</c> to allow parsing the arguments with different class options that do not have all the arguments.
            </value>
            <remarks>
            This allows fragmented version class parsing, useful for project with add-on where add-ons also requires command line arguments but
            when these are unknown by the main program at build time.
            </remarks>
        </member>
        <member name="P:CommandLine.ParserSettings.AutoHelp">
            <summary>
            Gets or sets a value indicating whether implicit option or verb 'help' should be supported.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.AutoVersion">
            <summary>
            Gets or sets a value indicating whether implicit option or verb 'version' should be supported.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.EnableDashDash">
            <summary>
            Gets or sets a value indicating whether enable double dash '--' syntax,
            that forces parsing of all subsequent tokens as values.
            If GetoptMode is true, this defaults to true, but can be turned off by explicitly specifying EnableDashDash = false.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.MaximumDisplayWidth">
            <summary>
            Gets or sets the maximum width of the display.  This determines word wrap when displaying the text.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.AllowMultiInstance">
            <summary>
            Gets or sets a value indicating whether options are allowed to be specified multiple times.
            If GetoptMode is true, this defaults to true, but can be turned off by explicitly specifying AllowMultiInstance = false.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.GetoptMode">
            <summary>
            Whether strict getopt-like processing is applied to option values; if true, AllowMultiInstance and EnableDashDash will default to true as well.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.PosixlyCorrect">
            <summary>
            Whether getopt-like processing should follow the POSIX rules (the equivalent of using the "+" prefix in the C getopt() call).
            If not explicitly set, will default to false unless the POSIXLY_CORRECT environment variable is set, in which case it will default to true.
            </summary>
        </member>
        <member name="M:CommandLine.ParserSettings.Dispose">
            <summary>
            Frees resources owned by the instance.
            </summary>
        </member>
        <member name="T:CommandLine.Text.AssemblyLicenseAttribute">
            <summary>
            Models a multiline assembly license text.
            </summary>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with one line of text.
            </summary>
            <param name="line1">First line of license text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with two lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with three lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
            <param name="line3">Third line of license text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with four lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
            <param name="line3">Third line of license text.</param>
            <param name="line4">Fourth line of license text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with five lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
            <param name="line3">Third line of license text.</param>
            <param name="line4">Fourth line of license text.</param>
            <param name="line5">Fifth line of license text.</param>
        </member>
        <member name="T:CommandLine.Text.AssemblyUsageAttribute">
            <summary>
            Models a multiline assembly usage text.
            </summary>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with one line of text.
            </summary>
            <param name="line1">First line of usage text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with two lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with three lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
            <param name="line3">Third line of usage text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with four lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
            <param name="line3">Third line of usage text.</param>
            <param name="line4">Fourth line of usage text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with five lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
            <param name="line3">Third line of usage text.</param>
            <param name="line4">Fourth line of usage text.</param>
            <param name="line5">Fifth line of usage text.</param>
        </member>
        <member name="T:CommandLine.Text.CopyrightInfo">
            <summary>
            Models the copyright part of an help text.
            You can assign it where you assign any <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="P:CommandLine.Text.CopyrightInfo.Empty">
            <summary>
            An empty object used for initialization.
            </summary>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            specifying author and year.
            </summary>
            <param name="author">The company or person holding the copyright.</param>
            <param name="year">The year of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            specifying author and copyrightYears.
            </summary>
            <param name="author">The company or person holding the copyright.</param>
            <param name="years">The copyrightYears of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author"/> is null or empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when parameter <paramref name="years"/> is not supplied.</exception>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.Boolean,System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            specifying symbol case, author and copyrightYears.
            </summary>
            <param name="isSymbolUpper">The case of the copyright symbol.</param>
            <param name="author">The company or person holding the copyright.</param>
            <param name="copyrightYears">The copyrightYears of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author"/> is null or empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when parameter <paramref name="copyrightYears"/> is not supplied.</exception>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.Reflection.AssemblyCopyrightAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            with an assembly attribute, this overrides all formatting.
            </summary>
            <param name="attribute">The attribute which text to use.</param>
        </member>
        <member name="P:CommandLine.Text.CopyrightInfo.Default">
            <summary>
            Gets the default copyright information.
            Retrieved from <see cref="T:System.Reflection.AssemblyCopyrightAttribute"/>, if it exists,
            otherwise it uses <see cref="T:System.Reflection.AssemblyCompanyAttribute"/> as copyright holder with the current year.
            If neither exists it throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="P:CommandLine.Text.CopyrightInfo.CopyrightWord">
            <summary>
            Gets a different copyright word when overridden in a derived class.
            </summary>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.op_Implicit(CommandLine.Text.CopyrightInfo)~System.String">
            <summary>
            Converts the copyright instance to a <see cref="T:System.String"/>.
            </summary>
            <param name="info">This <see cref="T:CommandLine.Text.CopyrightInfo"/> instance.</param>
            <returns>The <see cref="T:System.String"/> that contains the copyright.</returns>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.ToString">
            <summary>
            Returns the copyright as a <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the copyright.</returns>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.FormatYears(System.Int32[])">
            <summary>
            When overridden in a derived class, allows to specify a new algorithm to render copyright copyrightYears
            as a <see cref="T:System.String"/> instance.
            </summary>
            <param name="years">A <see cref="T:System.Int32"/> array of copyrightYears.</param>
            <returns>A <see cref="T:System.String"/> instance with copyright copyrightYears.</returns>
        </member>
        <member name="T:CommandLine.Text.Example">
            <summary>
            Models a command line usage example.
            </summary>
        </member>
        <member name="M:CommandLine.Text.Example.#ctor(System.String,System.Collections.Generic.IEnumerable{CommandLine.UnParserSettings},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.Example"/> class.
            </summary>
            <param name="helpText">Example description.</param>
            <param name="formatStyles">A <see cref="T:CommandLine.UnParserSettings"/> instances sequence that defines command line arguments format.</param>
            <param name="sample">A sample instance.</param>
        </member>
        <member name="M:CommandLine.Text.Example.#ctor(System.String,CommandLine.UnParserSettings,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.Example"/> class.
            </summary>
            <param name="helpText">Example description.</param>
            <param name="formatStyle">A <see cref="T:CommandLine.UnParserSettings"/> instance that defines command line arguments format.</param>
            <param name="sample">A sample instance.</param>
        </member>
        <member name="M:CommandLine.Text.Example.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.Example"/> class.
            </summary>
            <param name="helpText">Example description.</param>
            <param name="sample">A sample instance.</param>
        </member>
        <member name="P:CommandLine.Text.Example.HelpText">
            <summary>
            Example description. 
            </summary>
        </member>
        <member name="P:CommandLine.Text.Example.FormatStyles">
            <summary>
            A sequence of format styles.
            </summary>
        </member>
        <member name="P:CommandLine.Text.Example.Sample">
            <summary>
            A sample instance.
            </summary>
        </member>
        <member name="M:CommandLine.Text.Example.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><value>true</value> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:CommandLine.Text.Example.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <remarks>A hash code for the current <see cref="T:System.Object"/>.</remarks>
        </member>
        <member name="M:CommandLine.Text.Example.Equals(CommandLine.Text.Example)">
            <summary>
            Returns a value that indicates whether the current instance and a specified <see cref="T:CommandLine.Text.Example"/> have the same value.
            </summary>
            <param name="other">The <see cref="T:CommandLine.Text.Example"/> instance to compare.</param>
            <returns><value>true</value> if this instance of <see cref="T:CommandLine.Text.Example"/> and <paramref name="other"/> have the same value; otherwise, <value>false</value>.</returns>
        </member>
        <member name="T:CommandLine.Text.HeadingInfo">
            <summary>
            Models the heading part of an help text.
            You can assign it where you assign any <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HeadingInfo"/> class
            specifying program name and version.
            </summary>
            <param name="programName">The name of the program.</param>
            <param name="version">The version of the program.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="programName"/> is null or empty string.</exception>
        </member>
        <member name="P:CommandLine.Text.HeadingInfo.Empty">
            <summary>
            An empty object used for initialization. 
            </summary>
        </member>
        <member name="P:CommandLine.Text.HeadingInfo.Default">
            <summary>
            Gets the default heading instance.
            The title is retrieved from <see cref="T:System.Reflection.AssemblyTitleAttribute"/>,
            or the assembly short name if its not defined.
            The version is retrieved from <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/>,
            or the assembly version if its not defined.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.op_Implicit(CommandLine.Text.HeadingInfo)~System.String">
            <summary>
            Converts the heading to a <see cref="T:System.String"/>.
            </summary>
            <param name="info">This <see cref="T:CommandLine.Text.HeadingInfo"/> instance.</param>
            <returns>The <see cref="T:System.String"/> that contains the heading.</returns>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.ToString">
            <summary>
            Returns the heading as a <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the heading.</returns>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.WriteMessage(System.String,System.IO.TextWriter)">
            <summary>
            Writes out a string and a new line using the program name specified in the constructor
            and <paramref name="message"/> parameter.
            </summary>
            <param name="message">The <see cref="T:System.String"/> message to write.</param>
            <param name="writer">The target <see cref="T:System.IO.TextWriter"/> derived type.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message"/> is null or empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.WriteMessage(System.String)">
            <summary>
            Writes out a string and a new line using the program name specified in the constructor
            and <paramref name="message"/> parameter to standard output stream.
            </summary>
            <param name="message">The <see cref="T:System.String"/> message to write.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.WriteError(System.String)">
            <summary>
            Writes out a string and a new line using the program name specified in the constructor
            and <paramref name="message"/> parameter to standard error stream.
            </summary>
            <param name="message">The <see cref="T:System.String"/> message to write.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message"/> is null or empty string.</exception>
        </member>
        <member name="T:CommandLine.Text.ComparableOption">
            <summary>
            Provides means to format an help screen.
            You can assign it in place of a <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="F:CommandLine.Text.HelpText.OptionToHelpTextSeparatorWidth">
            <summary>
            The number of spaces between an option and its associated help text
            </summary>
        </member>
        <member name="F:CommandLine.Text.HelpText.OptionPrefixWidth">
            <summary>
            The width of the option prefix (either "--" or "  "
            </summary>
        </member>
        <member name="F:CommandLine.Text.HelpText.TotalOptionPadding">
            <summary>
            The total amount of extra space that needs to accounted for when indenting Option help text
            </summary>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(CommandLine.Text.SentenceBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class 
            specifying the sentence builder.
            </summary>
            <param name="sentenceBuilder">
            A <see cref="P:CommandLine.Text.HelpText.SentenceBuilder"/> instance.
            </param>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading string.
            </summary>
            <param name="heading">An heading string or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="heading"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(CommandLine.Text.SentenceBuilder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying the sentence builder and heading string.
            </summary>
            <param name="sentenceBuilder">A <see cref="P:CommandLine.Text.HelpText.SentenceBuilder"/> instance.</param>
            <param name="heading">A string with heading or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading and copyright strings.
            </summary>
            <param name="heading">A string with heading or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <param name="copyright">A string with copyright or an instance of <see cref="T:CommandLine.Text.CopyrightInfo"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more parameters are null or empty strings.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(CommandLine.Text.SentenceBuilder,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading and copyright strings.
            </summary>
            <param name="sentenceBuilder">A <see cref="P:CommandLine.Text.HelpText.SentenceBuilder"/> instance.</param>
            <param name="heading">A string with heading or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <param name="copyright">A string with copyright or an instance of <see cref="T:CommandLine.Text.CopyrightInfo"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more parameters are null or empty strings.</exception>
        </member>
        <member name="P:CommandLine.Text.HelpText.Heading">
            <summary>
            Gets or sets the heading string.
            You can directly assign a <see cref="T:CommandLine.Text.HeadingInfo"/> instance.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.Copyright">
            <summary>
            Gets or sets the copyright string.
            You can directly assign a <see cref="T:CommandLine.Text.CopyrightInfo"/> instance.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.MaximumDisplayWidth">
            <summary>
            Gets or sets the maximum width of the display.  This determines word wrap when displaying the text.
            </summary>
            <value>The maximum width of the display.</value>
        </member>
        <member name="P:CommandLine.Text.HelpText.AddDashesToOption">
            <summary>
            Gets or sets a value indicating whether the format of options should contain dashes.
            It modifies behavior of <see cref="M:CommandLine.Text.HelpText.AddOptions``1(CommandLine.ParserResult{``0})"/> method.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.AdditionalNewLineAfterOption">
            <summary>
            Gets or sets a value indicating whether to add an additional line after the description of the specification.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.AddNewLineBetweenHelpSections">
            <summary>
            Gets or sets a value indicating whether to add newlines between help sections.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.AddEnumValuesToHelpText">
            <summary>
            Gets or sets a value indicating whether to add the values of an enum after the description of the specification.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.AutoHelp">
            <summary>
            Gets or sets a value indicating whether implicit option or verb 'help' should be supported.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.AutoVersion">
            <summary>
            Gets or sets a value indicating whether implicit option or verb 'version' should be supported.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.SentenceBuilder">
            <summary>
            Gets the <see cref="P:CommandLine.Text.HelpText.SentenceBuilder"/> instance specified in constructor.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HelpText.AutoBuild``1(CommandLine.ParserResult{``0},System.Func{CommandLine.Text.HelpText,CommandLine.Text.HelpText},System.Func{CommandLine.Text.Example,CommandLine.Text.Example},System.Boolean,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class using common defaults.
            </summary>
            <returns>
            An instance of <see cref="T:CommandLine.Text.HelpText"/> class.
            </returns>
            <param name='parserResult'>The <see cref="T:CommandLine.ParserResult`1"/> containing the instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <param name='onError'>A delegate used to customize the text block of reporting parsing errors text block.</param>
            <param name='onExample'>A delegate used to customize <see cref="T:CommandLine.Text.Example"/> model used to render text block of usage examples.</param>
            <param name="verbsIndex">If true the output style is consistent with verb commands (no dashes), otherwise it outputs options.</param>
            <param name="maxDisplayWidth">The maximum width of the display.</param>
            <remarks>The parameter <paramref name="verbsIndex"/> is not ontly a metter of formatting, it controls whether to handle verbs or options.</remarks>
        </member>
        <member name="M:CommandLine.Text.HelpText.AutoBuild``1(CommandLine.ParserResult{``0},System.Int32)">
            <summary>
            Creates a default instance of the <see cref="T:CommandLine.Text.HelpText"/> class,
            automatically handling verbs or options scenario.
            </summary>
            <param name='parserResult'>The <see cref="T:CommandLine.ParserResult`1"/> containing the instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <param name="maxDisplayWidth">The maximum width of the display.</param>
            <returns>
            An instance of <see cref="T:CommandLine.Text.HelpText"/> class.
            </returns>
            <remarks>This feature is meant to be invoked automatically by the parser, setting the HelpWriter property
            of <see cref="T:CommandLine.ParserSettings"/>.</remarks>
        </member>
        <member name="M:CommandLine.Text.HelpText.AutoBuild``1(CommandLine.ParserResult{``0},System.Func{CommandLine.Text.HelpText,CommandLine.Text.HelpText},System.Int32)">
            <summary>
            Creates a custom instance of the <see cref="T:CommandLine.Text.HelpText"/> class,
            automatically handling verbs or options scenario.
            </summary>
            <param name='parserResult'>The <see cref="T:CommandLine.ParserResult`1"/> containing the instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
             <param name='onError'>A delegate used to customize the text block of reporting parsing errors text block.</param>
            <param name="maxDisplayWidth">The maximum width of the display.</param>
            <returns>
            An instance of <see cref="T:CommandLine.Text.HelpText"/> class.
            </returns>
            <remarks>This feature is meant to be invoked automatically by the parser, setting the HelpWriter property
            of <see cref="T:CommandLine.ParserSettings"/>.</remarks>
        </member>
        <member name="M:CommandLine.Text.HelpText.DefaultParsingErrorsHandler``1(CommandLine.ParserResult{``0},CommandLine.Text.HelpText)">
            <summary>
            Supplies a default parsing error handler implementation.
            </summary>
            <param name='parserResult'>The <see cref="T:CommandLine.ParserResult`1"/> containing the instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <param name="current">The <see cref="T:CommandLine.Text.HelpText"/> instance.</param>
        </member>
        <member name="M:CommandLine.Text.HelpText.op_Implicit(CommandLine.Text.HelpText)~System.String">
            <summary>
            Converts the help instance to a <see cref="T:System.String"/>.
            </summary>
            <param name="info">This <see cref="T:CommandLine.Text.HelpText"/> instance.</param>
            <returns>The <see cref="T:System.String"/> that contains the help screen.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddPreOptionsLine(System.String)">
            <summary>
            Adds a text line after copyright and before options usage strings.
            </summary>
            <param name="value">A <see cref="T:System.String"/> instance.</param>
            <returns>Updated <see cref="T:CommandLine.Text.HelpText"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="value"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddPostOptionsLine(System.String)">
            <summary>
            Adds a text line at the bottom, after options usage string.
            </summary>
            <param name="value">A <see cref="T:System.String"/> instance.</param>
            <returns>Updated <see cref="T:CommandLine.Text.HelpText"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="value"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddPreOptionsLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds text lines after copyright and before options usage strings.
            </summary>
            <param name="lines">A <see cref="T:System.String"/> sequence of line to add.</param>
            <returns>Updated <see cref="T:CommandLine.Text.HelpText"/> instance.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddPostOptionsLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds text lines at the bottom, after options usage string.
            </summary>
            <param name="lines">A <see cref="T:System.String"/> sequence of line to add.</param>
            <returns>Updated <see cref="T:CommandLine.Text.HelpText"/> instance.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddPreOptionsText(System.String)">
            <summary>
            Adds a text block of lines after copyright and before options usage strings.
            </summary>
            <param name="text">A <see cref="T:System.String"/> text block.</param>
            <returns>Updated <see cref="T:CommandLine.Text.HelpText"/> instance.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddPostOptionsText(System.String)">
            <summary>
            Adds a text block of lines at the bottom, after options usage string.
            </summary>
            <param name="text">A <see cref="T:System.String"/> text block.</param>
            <returns>Updated <see cref="T:CommandLine.Text.HelpText"/> instance.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddOptions``1(CommandLine.ParserResult{``0})">
            <summary>
            Adds a text block with options usage string.
            </summary>
            <param name="result">A parsing computation result.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="result"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddVerbs(System.Type[])">
            <summary>
            Adds a text block with verbs usage string.
            </summary>
            <param name="types">The array of <see cref="T:System.Type"/> with verb commands.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="types"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="types"/> array is empty.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddOptions``1(System.Int32,CommandLine.ParserResult{``0})">
            <summary>
            Adds a text block with options usage string.
            </summary>
            <param name="maximumLength">The maximum length of the help screen.</param>
            <param name="result">A parsing computation result.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="result"/> is null.</exception>    
        </member>
        <member name="M:CommandLine.Text.HelpText.AddVerbs(System.Int32,System.Type[])">
            <summary>
            Adds a text block with verbs usage string.
            </summary>
            <param name="maximumLength">The maximum length of the help screen.</param>
            <param name="types">The array of <see cref="T:System.Type"/> with verb commands.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="types"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="types"/> array is empty.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.RenderParsingErrorsText``1(CommandLine.ParserResult{``0},System.Func{CommandLine.Error,System.String},System.Func{System.Collections.Generic.IEnumerable{CommandLine.MutuallyExclusiveSetError},System.String},System.Int32)">
            <summary>
            Builds a string that contains a parsing error message.
            </summary>
            <param name='parserResult'>The <see cref="T:CommandLine.ParserResult`1"/> containing the instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <param name="formatError">The error formatting delegate.</param>
            <param name="formatMutuallyExclusiveSetErrors">The specialized <see cref="T:CommandLine.MutuallyExclusiveSetError"/> sequence formatting delegate.</param>
            <param name="indent">Number of spaces used to indent text.</param>
            <returns>The <see cref="T:System.String"/> that contains the parsing error message.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.RenderParsingErrorsTextAsLines``1(CommandLine.ParserResult{``0},System.Func{CommandLine.Error,System.String},System.Func{System.Collections.Generic.IEnumerable{CommandLine.MutuallyExclusiveSetError},System.String},System.Int32)">
            <summary>
            Builds a sequence of string that contains a parsing error message.
            </summary>
            <param name='parserResult'>The <see cref="T:CommandLine.ParserResult`1"/> containing the instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <param name="formatError">The error formatting delegate.</param>
            <param name="formatMutuallyExclusiveSetErrors">The specialized <see cref="T:CommandLine.MutuallyExclusiveSetError"/> sequence formatting delegate.</param>
            <param name="indent">Number of spaces used to indent text.</param>
            <returns>A sequence of <see cref="T:System.String"/> that contains the parsing error message.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.RenderUsageText``1(CommandLine.ParserResult{``0})">
            <summary>
            Builds a string with usage text block created using <see cref="T:CommandLine.Text.UsageAttribute"/> data and metadata.
            </summary>
            <typeparam name="T">Type of parsing computation result.</typeparam>
            <param name="parserResult">A parsing computation result.</param>
            <returns>Resulting formatted text.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.RenderUsageText``1(CommandLine.ParserResult{``0},System.Func{CommandLine.Text.Example,CommandLine.Text.Example})">
            <summary>
            Builds a string with usage text block created using <see cref="T:CommandLine.Text.UsageAttribute"/> data and metadata.
            </summary>
            <typeparam name="T">Type of parsing computation result.</typeparam>
            <param name="parserResult">A parsing computation result.</param>
            <param name="mapperFunc">A mapping lambda normally used to translate text in other languages.</param>
            <returns>Resulting formatted text.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.RenderUsageTextAsLines``1(CommandLine.ParserResult{``0},System.Func{CommandLine.Text.Example,CommandLine.Text.Example})">
            <summary>
            Builds a string sequence with usage text block created using <see cref="T:CommandLine.Text.UsageAttribute"/> data and metadata.
            </summary>
            <typeparam name="T">Type of parsing computation result.</typeparam>
            <param name="parserResult">A parsing computation result.</param>
            <param name="mapperFunc">A mapping lambda normally used to translate text in other languages.</param>
            <returns>Resulting formatted text.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.ToString">
            <summary>
            Returns the help screen as a <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the help screen.</returns>
        </member>
        <member name="T:CommandLine.Text.MultilineTextAttribute">
            <summary>
            Provides base properties for creating an attribute, used to define multiple lines of text.
            </summary>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> class. Used in derived type
            using one line of text.
            </summary>
            <param name="line1">The first line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> class. Used in  type
            using two lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> class. Used in  type
            using three lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
            <param name="line3">The third line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> class. Used in type
            using four lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
            <param name="line3">The third line of text.</param>
            <param name="line4">The fourth line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> class. Used in type
            using five lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
            <param name="line3">The third line of text.</param>
            <param name="line4">The fourth line of text.</param>
            <param name="line5">The fifth line of text.</param>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Value">
            <summary>
            Gets the all non-blank lines as string.
            </summary>
            <value>A string of all non-blank lines.</value>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line1">
            <summary>
            Gets the first line of text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line2">
            <summary>
            Gets the second line of text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line3">
            <summary>
            Gets third line of text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line4">
            <summary>
            Gets the fourth line of text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line5">
            <summary>
            Gets the fifth line of text.
            </summary>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.GetLastLineWithText(System.String[])">
            <summary>
            Returns the last line with text. Preserves blank lines if user intended by skipping a line.
            </summary>
            <returns>The last index of line of the non-blank line.
            </returns>
            <param name='value'>The string array to process.</param>
        </member>
        <member name="T:CommandLine.Text.SentenceBuilder">
            <summary>
            Exposes standard delegates to provide a mean to customize part of help screen generation.
            This type is consumed by <see cref="T:CommandLine.Text.HelpText"/>.
            </summary>
        </member>
        <member name="M:CommandLine.Text.SentenceBuilder.Create">
            <summary>
            Create instance of <see cref="T:CommandLine.Text.SentenceBuilder"/>,
            </summary>
            <returns>The <see cref="T:CommandLine.Text.SentenceBuilder"/> instance.</returns>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.Factory">
            <summary>
            Factory to allow custom SentenceBuilder injection
            </summary>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.RequiredWord">
            <summary>
            Gets a delegate that returns the word 'required'.
            </summary>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.OptionGroupWord">
            <summary>
            Gets a delegate that returns the word 'group'.
            </summary>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.ErrorsHeadingText">
            <summary>
            Gets a delegate that returns that errors block heading text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.UsageHeadingText">
            <summary>
            Gets a delegate that returns usage text block heading text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.HelpCommandText">
            <summary>
            Get a delegate that returns the help text of help command.
            The delegates must accept a boolean that is equal <value>true</value> for options; otherwise <value>false</value> for verbs.
            </summary>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.VersionCommandText">
            <summary>
            Get a delegate that returns the help text of vesion command.
            The delegates must accept a boolean that is equal <value>true</value> for options; otherwise <value>false</value> for verbs.
            </summary>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.FormatError">
            <summary>
            Gets a delegate that handles singular error formatting.
            The delegates must accept an <see cref="T:CommandLine.Error"/> and returns a string.
            </summary>
        </member>
        <member name="P:CommandLine.Text.SentenceBuilder.FormatMutuallyExclusiveSetErrors">
            <summary>
            Gets a delegate that handles mutually exclusive set errors formatting.
            The delegates must accept a sequence of <see cref="T:CommandLine.MutuallyExclusiveSetError"/> and returns a string.
            </summary>
        </member>
        <member name="T:CommandLine.Text.TextWrapper">
            <summary>
            A utility class to word-wrap and indent blocks of text
            </summary>
        </member>
        <member name="M:CommandLine.Text.TextWrapper.WordWrap(System.Int32)">
            <summary>
            Splits a string into a words and performs wrapping while also preserving line-breaks and sub-indentation
            </summary>
            <param name="columnWidth">The number of characters we can use for text</param>
            <remarks>
            This method attempts to wrap text without breaking words 
            For example, if columnWidth is 10 , the input
            "a string for wrapping 01234567890123"
            would return
            "a string
            "for 
            "wrapping
            "0123456789
            "0123"          
            </remarks>
            <returns>this</returns>
        </member>
        <member name="M:CommandLine.Text.TextWrapper.Indent(System.Int32)">
            <summary>
            Indent all lines in the TextWrapper by the desired number of spaces
            </summary>
            <param name="numberOfSpaces">The number of spaces to indent by</param>
            <returns>this</returns>
        </member>
        <member name="M:CommandLine.Text.TextWrapper.ToText">
            <summary>
            Returns the current state of the TextWrapper as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommandLine.Text.TextWrapper.WrapAndIndentText(System.String,System.Int32,System.Int32)">
            <summary>
            Convenience method to wraps and indent a string in a single operation
            </summary>
            <param name="input">The string to operate on</param>
            <param name="indentLevel">The number of spaces to indent by</param>
            <param name="columnWidth">The width of the column used for wrapping</param>
            <remarks>
            The string is wrapped _then_ indented so the columnWidth is the width of the
            usable text block, and does NOT include the indentLevel.
            </remarks>
            <returns>the processed string</returns>
        </member>
        <member name="M:CommandLine.Text.TextWrapper.AddWordToLastLineOrCreateNewLineIfNecessary(System.Collections.Generic.List{System.Text.StringBuilder},System.String,System.Int32)">
            <summary>
            When presented with a word, either append to the last line in the list or start a new line
            </summary>
            <param name="lines">A list of StringBuilders containing results so far</param>
            <param name="word">The individual word to append</param>
            <param name="columnWidth">The usable text space</param>
            <remarks>
            The 'word' can actually be an empty string.  It's important to keep these -
            empty strings allow us to preserve indentation and extra spaces within a line.
            </remarks>
            <returns>The same list as is passed in</returns>
        </member>
        <member name="M:CommandLine.Text.TextWrapper.RightString(System.String,System.Int32)">
            <summary>
            Return the right part of a string in a way that compensates for Substring's deficiencies
            </summary>
        </member>
        <member name="M:CommandLine.Text.TextWrapper.LeftString(System.String,System.Int32)">
            <summary>
            Return the left part of a string in a way that compensates for Substring's deficiencies
            </summary>
        </member>
        <member name="T:CommandLine.Text.UsageAttribute">
            <summary>
            Applied to a static property that yields a sequence of <see cref="T:CommandLine.Text.Example"/>,
            provides data to render usage section of help screen.
            </summary>
        </member>
        <member name="P:CommandLine.Text.UsageAttribute.ApplicationAlias">
            <summary>
            Application name, script or any means that starts current program.
            </summary>
        </member>
        <member name="T:CommandLine.UnParserSettings">
            <summary>
            Provides settings for when formatting command line from an options instance../>.
            </summary>
        </member>
        <member name="P:CommandLine.UnParserSettings.PreferShortName">
            <summary>
            Gets or sets a value indicating whether unparsing process shall prefer short or long names.
            </summary>
        </member>
        <member name="P:CommandLine.UnParserSettings.GroupSwitches">
            <summary>
            Gets or sets a value indicating whether unparsing process shall group switches.
            </summary>
        </member>
        <member name="P:CommandLine.UnParserSettings.UseEqualToken">
            <summary>
            Gets or sets a value indicating whether unparsing process shall use equal sign with long names.
            </summary>
        </member>
        <member name="P:CommandLine.UnParserSettings.ShowHidden">
            <summary>
            Gets or sets a value indicating whether unparsing process shall expose hidden options.
            </summary>
        </member>
        <member name="P:CommandLine.UnParserSettings.SkipDefault">
            <summary>
            Gets or sets a value indicating whether unparsing process shall skip options with DefaultValue.
            </summary>
        </member>
        <member name="M:CommandLine.UnParserSettings.WithGroupSwitchesOnly">
            <summary>
            Factory method that creates an instance of <see cref="T:CommandLine.UnParserSettings"/> with GroupSwitches set to true.
            </summary>
            <returns>A properly initalized <see cref="T:CommandLine.UnParserSettings"/> instance.</returns>
        </member>
        <member name="M:CommandLine.UnParserSettings.WithUseEqualTokenOnly">
            <summary>
            Factory method that creates an instance of <see cref="T:CommandLine.UnParserSettings"/> with UseEqualToken set to true.
            </summary>
            <returns>A properly initalized <see cref="T:CommandLine.UnParserSettings"/> instance.</returns>
        </member>
        <member name="T:CommandLine.UnParserExtensions">
            <summary>
            Provides overloads to unparse options instance.
            </summary>
        </member>
        <member name="M:CommandLine.UnParserExtensions.FormatCommandLine``1(CommandLine.Parser,``0)">
            <summary>
            Format a command line argument string from a parsed instance. 
            </summary>
            <typeparam name="T">Type of <paramref name="options"/>.</typeparam>
            <param name="parser">Parser instance.</param>
            <param name="options">A parsed (or manually correctly constructed instance).</param>
            <returns>A string with command line arguments.</returns>
        </member>
        <member name="M:CommandLine.UnParserExtensions.FormatCommandLineArgs``1(CommandLine.Parser,``0)">
            <summary>
            Format a command line argument string from a parsed instance in the form of string[]. 
            </summary>
            <typeparam name="T">Type of <paramref name="options"/>.</typeparam>
            <param name="parser">Parser instance.</param>
            <param name="options">A parsed (or manually correctly constructed instance).</param>
            <returns>A string[] with command line arguments.</returns>
        </member>
        <member name="M:CommandLine.UnParserExtensions.FormatCommandLine``1(CommandLine.Parser,``0,System.Action{CommandLine.UnParserSettings})">
            <summary>
            Format a command line argument string from a parsed instance. 
            </summary>
            <typeparam name="T">Type of <paramref name="options"/>.</typeparam>
            <param name="parser">Parser instance.</param>
            <param name="options">A parsed (or manually correctly constructed instance).</param>
            <param name="configuration">The <see cref="T:System.Action`1"/> lambda used to configure
            aspects and behaviors of the unparsersing process.</param>
            <returns>A string with command line arguments.</returns>
        </member>
        <member name="M:CommandLine.UnParserExtensions.FormatCommandLineArgs``1(CommandLine.Parser,``0,System.Action{CommandLine.UnParserSettings})">
            <summary>
            Format a command line argument string[] from a parsed instance. 
            </summary>
            <typeparam name="T">Type of <paramref name="options"/>.</typeparam>
            <param name="parser">Parser instance.</param>
            <param name="options">A parsed (or manually correctly constructed instance).</param>
            <param name="configuration">The <see cref="T:System.Action`1"/> lambda used to configure
            aspects and behaviors of the unparsersing process.</param>
            <returns>A string[] with command line arguments.</returns>
        </member>
        <member name="M:CommandLine.UnParserExtensions.SplitArgs(System.String,System.Boolean)">
            <summary>
            Returns a string array that contains the substrings in this instance that are delimited by space considering string between double quote.
            </summary>
            <param name="command">the commandline string</param>
            <param name="keepQuote">don't remove the quote</param>
            <returns>a string array that contains the substrings in this instance</returns>
        </member>
        <member name="T:CommandLine.ValueAttribute">
            <summary>
            Models an value specification, or better how to handle values not bound to options.
            </summary>
        </member>
        <member name="M:CommandLine.ValueAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ValueAttribute"/> class.
            </summary>
        </member>
        <member name="P:CommandLine.ValueAttribute.Index">
            <summary>
            Gets the position this option has on the command line.
            </summary>
        </member>
        <member name="P:CommandLine.ValueAttribute.MetaName">
            <summary>
            Gets or sets name of this positional value specification.
            </summary>
        </member>
        <member name="T:CommandLine.VerbAttribute">
            <summary>
            Models a verb command specification.
            </summary>
        </member>
        <member name="M:CommandLine.VerbAttribute.#ctor(System.String,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.VerbAttribute"/> class.
            </summary>
            <param name="name">The long name of the verb command.</param>
            <param name="isDefault">Whether the verb is the default verb.</param>
            <param name="aliases">aliases for this verb. i.e. "move" and "mv"</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> is null, empty or whitespace and <paramref name="isDefault"/> is false.</exception>
        </member>
        <member name="P:CommandLine.VerbAttribute.Name">
            <summary>
            Gets the verb name.
            </summary>
        </member>
        <member name="P:CommandLine.VerbAttribute.Hidden">
            <summary>
            Gets or sets a value indicating whether a command line verb is visible in the help text.
            </summary>
        </member>
        <member name="P:CommandLine.VerbAttribute.HelpText">
            <summary>
            Gets or sets a short description of this command line option. Usually a sentence summary. 
            </summary>
        </member>
        <member name="P:CommandLine.VerbAttribute.ResourceType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that contains the resources for <see cref="P:CommandLine.VerbAttribute.HelpText"/>.
            </summary>
        </member>
        <member name="P:CommandLine.VerbAttribute.IsDefault">
            <summary>
            Gets whether this verb is the default verb.
            </summary>
        </member>
        <member name="P:CommandLine.VerbAttribute.Aliases">
            <summary>
            Gets or sets the aliases
            </summary>
        </member>
        <member name="F:CSharpx.EitherType.Left">
            <summary>
            Failed computation case.
            </summary>
        </member>
        <member name="F:CSharpx.EitherType.Right">
            <summary>
            Sccessful computation case.
            </summary>
        </member>
        <member name="M:CSharpx.Either.Return``1(``0)">
            <summary>
            Inject a value into the Either type, returning Right case.
            </summary>
        </member>
        <member name="M:CSharpx.Either.Fail``1(System.String)">
            <summary>
            Fail with a message. Not part of mathematical definition of a monad.
            </summary>
        </member>
        <member name="M:CSharpx.Either.Bind``3(CSharpx.Either{``0,``1},System.Func{``1,CSharpx.Either{``0,``2}})">
            <summary>
            Monadic bind.
            </summary>
        </member>
        <member name="M:CSharpx.Either.Map``3(CSharpx.Either{``0,``1},System.Func{``1,``2})">
            <summary>
            Transforms a Either's right value by using a specified mapping function.
            </summary>
        </member>
        <member name="M:CSharpx.Either.Bimap``4(CSharpx.Either{``0,``1},System.Func{``0,``2},System.Func{``1,``3})">
            <summary>
            Maps both parts of a Either type. Applies the first function if Either is Left.
            Otherwise applies the second function.
            </summary>
        </member>
        <member name="M:CSharpx.Either.Select``3(CSharpx.Either{``0,``1},System.Func{``1,``2})">
            <summary>
            Map operation compatible with Linq.
            </summary>
        </member>
        <member name="M:CSharpx.Either.GetOrFail``2(CSharpx.Either{``0,``1})">
            <summary>
            Returns a Either Right or fail with an exception.
            </summary>
        </member>
        <member name="M:CSharpx.Either.GetLeftOrDefault``2(CSharpx.Either{``0,``1},``0)">
            <summary>
            Returns a Either Left or a defualt value.
            </summary>
        </member>
        <member name="M:CSharpx.Either.GetRightOrDefault``2(CSharpx.Either{``0,``1},``1)">
            <summary>
            Returns a Either Right or a defualt value.
            </summary>
        </member>
        <member name="M:CSharpx.Either.Try``1(System.Func{``0})">
            <summary>
            Wraps a function, encapsulates any exception thrown within to a Either.
            </summary>
        </member>
        <member name="M:CSharpx.Either.Cast``1(System.Object)">
            <summary>
            Attempts to cast an object.
            Stores the cast value in 1Of2 if successful, otherwise stores the exception in 2Of2
            </summary>
        </member>
        <member name="M:CSharpx.EitherExtensions.ToEither``1(``0)">
            <summary>
            Equivalent to monadic <see cref="M:CSharpx.Either.Return``1(``0)"/> operation.
            Builds a <see cref="T:CSharpx.Right`2"/> value in case <paramref name="value"/> by default.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.TryHead``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Safe function that returns Just(first element) or None.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.ToMaybe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Turns an empty sequence to Nothing, otherwise Just(sequence).
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Cartesian``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Returns the Cartesian product of two sequences by combining each element of the first set with each in the second
            and applying the user=define projection to the pair.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends a single value to a sequence.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Concat``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence consisting of the head element and the given tail elements.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns a sequence consisting of the head elements and the given tail element.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Excludes <paramref name="count"/> elements from a sequence starting at a given index
            </summary>
            <typeparam name="T">The type of the elements of the sequence</typeparam>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Index``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 
            where the key is the zero-based index of the value in the source 
            sequence.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Index``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 
            where the key is the index of the value in the source sequence.
            An additional parameter specifies the starting index.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of 
            1 element.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of 
            2 elements.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of 
            3 elements.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of 
            4 elements.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Immediately executes the given action on each element in the source sequence.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Pairwise``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
            Returns a sequence resulting from applying a function to each 
            element in the source sequence and its 
            predecessor, with the exception of the first element which is 
            only returned as the predecessor of the second element.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a delimited string from a sequence of values. The 
            delimiter used depends on the current culture of the executing thread.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Tail``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return everything except first element and throws exception if empty.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.TailNoFail``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return everything except first element without throwing exception if empty.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Memoize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Captures current state of a sequence.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Materialize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an immutable copy of a sequence.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Choice``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Selects a random element.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.Intersperse``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Takes an element and a sequence and `intersperses' that element between its elements.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.FlattenOnce``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens a sequence by one level.
            </summary>
        </member>
        <member name="M:CSharpx.EnumerableExtensions.FlattenOnce(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reduces a sequence of strings to a sequence of parts, splitted by space,
            of each original string.
            </summary>
        </member>
        <member name="T:CSharpx.MaybeType">
            <summary>
            Discriminator for <see cref="T:CSharpx.Maybe"/>.
            </summary>
        </member>
        <member name="T:CSharpx.Maybe`1">
            <summary>
            The Maybe type models an optional value. A value of type Maybe a either contains a value of type a (represented as Just a),
            or it is empty (represented as Nothing).
            </summary>
        </member>
        <member name="P:CSharpx.Maybe`1.Tag">
            <summary>
            Type discriminator.
            </summary>
        </member>
        <member name="M:CSharpx.Maybe`1.MatchJust(`0@)">
            <summary>
            Matches a value returning <c>true</c> and value itself via output parameter.
            </summary>
        </member>
        <member name="M:CSharpx.Maybe`1.MatchNothing">
            <summary>
            Matches an empty value returning <c>true</c>.
            </summary>
        </member>
        <member name="T:CSharpx.Nothing`1">
            <summary>
            Models a <see cref="T:CSharpx.Maybe"/> when in empty state.
            </summary>
        </member>
        <member name="T:CSharpx.Just`1">
            <summary>
            Models a <see cref="T:CSharpx.Maybe"/> when contains a value.
            </summary>
        </member>
        <member name="P:CSharpx.Just`1.Value">
            <summary>
            The wrapped value.
            </summary>
        </member>
        <member name="T:CSharpx.Maybe">
            <summary>
            Provides static methods for manipulating <see cref="T:CSharpx.Maybe"/>.
            </summary>
        </member>
        <member name="M:CSharpx.Maybe.Nothing``1">
            <summary>
            Builds the empty case of <see cref="T:CSharpx.Maybe"/>.
            </summary>
        </member>
        <member name="M:CSharpx.Maybe.Just``1(``0)">
            <summary>
            Builds the case when <see cref="T:CSharpx.Maybe"/> contains a value.
            </summary>
        </member>
        <member name="M:CSharpx.Maybe.Return``1(``0)">
            <summary>
            Inject a value into the monadic <see cref="T:CSharpx.Maybe`1"/> type.
            </summary>
        </member>
        <member name="M:CSharpx.Maybe.Bind``2(CSharpx.Maybe{``0},System.Func{``0,CSharpx.Maybe{``1}})">
            <summary>
            Sequentially compose two actions, passing any value produced by the first as an argument to the second.
            </summary>
        </member>
        <member name="M:CSharpx.Maybe.Map``2(CSharpx.Maybe{``0},System.Func{``0,``1})">
            <summary>
            Transforms an maybe value by using a specified mapping function.
            </summary>
        </member>
        <member name="M:CSharpx.Maybe.Merge``2(CSharpx.Maybe{``0},CSharpx.Maybe{``1})">
            <summary>
            If both maybes contain a value, it merges them into a maybe with a tupled value.
            </summary>
        </member>
        <member name="T:CSharpx.MaybeExtensions">
            <summary>
            Provides convenience extension methods for <see cref="T:CSharpx.Maybe"/>.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.Match``1(CSharpx.Maybe{``0},System.Action{``0},System.Action)">
            <summary>
            Provides pattern matching using <see cref="T:System.Action"/> delegates.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.Match``2(CSharpx.Maybe{System.Tuple{``0,``1}},System.Action{``0,``1},System.Action)">
            <summary>
            Provides pattern matching using <see cref="T:System.Action"/> delegates over maybe with tupled wrapped value.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.MatchJust``2(CSharpx.Maybe{System.Tuple{``0,``1}},``0@,``1@)">
            <summary>
            Matches a value returning <c>true</c> and tupled value itself via two output parameters.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.ToMaybe``1(``0)">
            <summary>
            Equivalent to monadic <see cref="M:CSharpx.Maybe.Return``1(``0)"/> operation.
            Builds a <see cref="T:CSharpx.Just`1"/> value in case <paramref name="value"/> is different from its default.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.Bind``2(CSharpx.Maybe{``0},System.Func{``0,CSharpx.Maybe{``1}})">
            <summary>
            Invokes a function on this maybe value that itself yields a maybe.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.Map``2(CSharpx.Maybe{``0},System.Func{``0,``1})">
            <summary>
            Transforms this maybe value by using a specified mapping function.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.Select``2(CSharpx.Maybe{``0},System.Func{``0,``1})">
            <summary>
            Map operation compatible with Linq.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.SelectMany``3(CSharpx.Maybe{``0},System.Func{``0,CSharpx.Maybe{``1}},System.Func{``0,``1,``2})">
            <summary>
            Bind operation compatible with Linq.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.Do``1(CSharpx.Maybe{``0},System.Action{``0})">
            <summary>
            If contains a value executes an <see cref="T:System.Action`1"/> delegate over it.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.Do``2(CSharpx.Maybe{System.Tuple{``0,``1}},System.Action{``0,``1})">
            <summary>
            If contans a value executes an <see cref="T:System.Action`2"/> delegate over it.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.IsJust``1(CSharpx.Maybe{``0})">
            <summary>
            Returns <c>true</c> iffits argument is of the form <see cref="T:CSharpx.Just`1"/>.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.IsNothing``1(CSharpx.Maybe{``0})">
            <summary>
            Returns <c>true</c> iffits argument is of the form <see cref="T:CSharpx.Nothing`1"/>.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.FromJust``1(CSharpx.Maybe{``0})">
            <summary>
            Extracts the element out of a <see cref="T:CSharpx.Just`1"/> and returns a default value if its argument is <see cref="T:CSharpx.Nothing`1"/>.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.FromJustOrFail``1(CSharpx.Maybe{``0},System.Exception)">
            <summary>
            Extracts the element out of a <see cref="T:CSharpx.Just`1"/> and throws an error if its argument is <see cref="T:CSharpx.Nothing`1"/>.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.GetValueOrDefault``1(CSharpx.Maybe{``0},``0)">
            <summary>
            If contains a values returns  it, otherwise returns <paramref name="noneValue"/>.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.MapValueOrDefault``2(CSharpx.Maybe{``0},System.Func{``0,``1},``1)">
            <summary>
            If contains a values executes a mapping function over it, otherwise returns <paramref name="noneValue"/>.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.MapValueOrDefault``2(CSharpx.Maybe{``0},System.Func{``0,``1},System.Func{``1})">
            <summary>
            If contains a values executes a mapping function over it, otherwise returns the value from <paramref name="noneValueFactory"/>.
            </summary>
        </member>
        <member name="M:CSharpx.MaybeExtensions.ToEnumerable``1(CSharpx.Maybe{``0})">
            <summary>
            Returns an empty list when given <see cref="T:CSharpx.Nothing`1"/> or a singleton list when given a <see cref="T:CSharpx.Just`1"/>.
            </summary>
        </member>
        <member name="T:RailwaySharp.ErrorHandling.Result`2">
            <summary>
            Represents the result of a computation.
            </summary>
            <typeparam name="TSuccess">Type that models the result of a successful computation.</typeparam>
            <typeparam name="TMessage">Type that model a message related to a computation.</typeparam> 
        </member>
        <member name="T:RailwaySharp.ErrorHandling.Ok`2">
            <summary>
            Represents the result of a successful computation.
            </summary>
            <typeparam name="TSuccess">Type that models the result of a successful computation.</typeparam>
            <typeparam name="TMessage">Type that model a message related to a computation.</typeparam> 
        </member>
        <member name="T:RailwaySharp.ErrorHandling.Bad`2">
            <summary>
            Represents the result of a failed computation.
            </summary>
            <typeparam name="TSuccess">Type that models the result of a successful computation.</typeparam>
            <typeparam name="TMessage">Type that model a message related to a computation.</typeparam> 
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Result.FailWith``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Creates a Failure result with the given messages.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Result.FailWith``2(``1)">
            <summary>
            Creates a Failure result with the given message.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Result.Succeed``2(``0)">
            <summary>
            Creates a Success result with the given value.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Result.Succeed``2(``0,``1)">
            <summary>
            Creates a Success result with the given value and the given message.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Result.Succeed``2(``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Creates a Success result with the given value and the given messages.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Result.Try``1(System.Func{``0})">
            <summary>
            Executes the given function on a given success or captures the failure.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.Ok``2(``0)">
            <summary>
            Wraps a value in a Success.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.Pass``2(``0)">
            <summary>
            Wraps a value in a Success.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.Warn``2(``1,``0)">
            <summary>
            Wraps a value in a Success and adds a message.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.Fail``2(``1)">
            <summary>
            Wraps a message in a Failure.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.Failed``2(RailwaySharp.ErrorHandling.Result{``0,``1})">
            <summary>
            Returns true if the result was not successful.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.Either``3(System.Func{``0,System.Collections.Generic.IEnumerable{``1},``2},System.Func{System.Collections.Generic.IEnumerable{``1},``2},RailwaySharp.ErrorHandling.Result{``0,``1})">
            <summary>
            Takes a Result and maps it with successFunc if it is a Success otherwise it maps it with failureFunc.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.ReturnOrFail``2(RailwaySharp.ErrorHandling.Result{``0,``1})">
            <summary>
            If the given result is a Success the wrapped value will be returned. 
            Otherwise the function throws an exception with Failure message of the result.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.MergeMessages``2(System.Collections.Generic.IEnumerable{``1},RailwaySharp.ErrorHandling.Result{``0,``1})">
            <summary>
            Appends the given messages with the messages in the given result.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.Bind``3(System.Func{``0,RailwaySharp.ErrorHandling.Result{``1,``2}},RailwaySharp.ErrorHandling.Result{``0,``2})">
            <summary>
            If the result is a Success it executes the given function on the value.
            Otherwise the exisiting failure is propagated.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.Flatten``2(RailwaySharp.ErrorHandling.Result{RailwaySharp.ErrorHandling.Result{``0,``1},``1})">
            <summary>
            Flattens a nested result given the Failure types are equal.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.Apply``3(RailwaySharp.ErrorHandling.Result{System.Func{``0,``1},``2},RailwaySharp.ErrorHandling.Result{``0,``2})">
            <summary>
            If the wrapped function is a success and the given result is a success the function is applied on the value. 
            Otherwise the exisiting error messages are propagated.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.Lift``3(System.Func{``0,``1},RailwaySharp.ErrorHandling.Result{``0,``2})">
            <summary>
            Lifts a function into a Result container and applies it on the given result.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.Lift2``4(System.Func{``0,System.Func{``1,``2}},RailwaySharp.ErrorHandling.Result{``0,``3},RailwaySharp.ErrorHandling.Result{``1,``3})">
            <summary>
            Promote a function to a monad/applicative, scanning the monadic/applicative arguments from left to right.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.Trial.Collect``2(System.Collections.Generic.IEnumerable{RailwaySharp.ErrorHandling.Result{``0,``1}})">
            <summary>
            Collects a sequence of Results and accumulates their values.
            If the sequence contains an error the error will be propagated.
            </summary>
        </member>
        <member name="T:RailwaySharp.ErrorHandling.ResultExtensions">
            <summary>
            Extensions methods for easier usage.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.ResultExtensions.Match``2(RailwaySharp.ErrorHandling.Result{``0,``1},System.Action{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Allows pattern matching on Results.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.ResultExtensions.Either``3(RailwaySharp.ErrorHandling.Result{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``2},System.Func{System.Collections.Generic.IEnumerable{``1},``2})">
            <summary>
            Allows pattern matching on Results.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.ResultExtensions.Map``3(RailwaySharp.ErrorHandling.Result{``0,``1},System.Func{``0,``2})">
            <summary>
            Lifts a Func into a Result and applies it on the given result.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.ResultExtensions.Collect``2(System.Collections.Generic.IEnumerable{RailwaySharp.ErrorHandling.Result{``0,``1}})">
            <summary>
            Collects a sequence of Results and accumulates their values.
            If the sequence contains an error the error will be propagated.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.ResultExtensions.Flatten``2(RailwaySharp.ErrorHandling.Result{System.Collections.Generic.IEnumerable{RailwaySharp.ErrorHandling.Result{``0,``1}},``1})">
            <summary>
            Collects a sequence of Results and accumulates their values.
            If the sequence contains an error the error will be propagated.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.ResultExtensions.SelectMany``3(RailwaySharp.ErrorHandling.Result{``0,``1},System.Func{``0,RailwaySharp.ErrorHandling.Result{``2,``1}})">
            <summary>
            If the result is a Success it executes the given Func on the value.
            Otherwise the exisiting failure is propagated.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.ResultExtensions.SelectMany``4(RailwaySharp.ErrorHandling.Result{``0,``1},System.Func{``0,RailwaySharp.ErrorHandling.Result{``2,``1}},System.Func{``0,``2,``3})">
            <summary>
            If the result is a Success it executes the given Func on the value.
            If the result of the Func is a Success it maps it using the given Func.
            Otherwise the exisiting failure is propagated.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.ResultExtensions.Select``3(RailwaySharp.ErrorHandling.Result{``0,``1},System.Func{``0,``2})">
            <summary>
            Lifts a Func into a Result and applies it on the given result.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.ResultExtensions.FailedWith``2(RailwaySharp.ErrorHandling.Result{``0,``1})">
            <summary>
            Returns the error messages or fails if the result was a success.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.ResultExtensions.SucceededWith``2(RailwaySharp.ErrorHandling.Result{``0,``1})">
            <summary>
            Returns the result or fails if the result was an error.
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.ResultExtensions.SuccessMessages``2(RailwaySharp.ErrorHandling.Result{``0,``1})">
            <summary>
            Returns messages in case of success, otherwise an empty sequence. 
            </summary>
        </member>
        <member name="M:RailwaySharp.ErrorHandling.ResultExtensions.ToMaybe``2(RailwaySharp.ErrorHandling.Result{``0,``1})">
            <summary>
            Builds a Maybe type instance from a Result one.
            </summary>
        </member>
        <member name="T:CsvHelper.ArrayHelper">
            <summary>
            Methods to help with arrays.
            </summary>
        </member>
        <member name="M:CsvHelper.ArrayHelper.Trim(System.Char[],System.Int32@,System.Int32@,System.Char[])">
            <summary>
            Trims the characters off the start and end of the buffer
            by updating the start and length arguments.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
            <param name="trimChars">The characters to trim.</param>
        </member>
        <member name="M:CsvHelper.ArrayHelper.Contains(System.Char[],System.Char@)">
            <summary>
            Determines whether this given array contains the given character.
            </summary>
            <param name="array">The array to search.</param>
            <param name="c">The character to look for.</param>
            <returns>
              <c>true</c> if the array contains the characters, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:CsvHelper.BadDataException">
            <summary>
            Represents errors that occur due to bad data.
            </summary>
        </member>
        <member name="F:CsvHelper.BadDataException.Field">
            <summary>
            The full field unedited.
            </summary>
        </member>
        <member name="F:CsvHelper.BadDataException.RawRecord">
            <summary>
            The full row unedited.
            </summary>
        </member>
        <member name="M:CsvHelper.BadDataException.#ctor(System.String,System.String,CsvHelper.CsvContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.BadDataException"/> class.
            </summary>
            <param name="field">The full field unedited.</param>
            <param name="rawRecord">The full row unedited.</param>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper.BadDataException.#ctor(System.String,System.String,CsvHelper.CsvContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.BadDataException"/> class
            with a specified error message.
            </summary>
            <param name="field">The full field unedited.</param>
            <param name="rawRecord">The full row unedited.</param>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.BadDataException.#ctor(System.String,System.String,CsvHelper.CsvContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.BadDataException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="field">The full field unedited.</param>
            <param name="rawRecord">The full row unedited.</param>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.AllowCommentsAttribute">
            <summary>
            A value indicating if comments are allowed.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.AllowCommentsAttribute.AllowComments">
            <summary>
            Gets a value indicating if comments are allowed.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.AllowCommentsAttribute.#ctor(System.Boolean)">
            <summary>
            A value indicating if comments are allowed.
            </summary>
            <param name="allowComments">The value indicating id comments are allowed.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.AllowCommentsAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.BooleanFalseValuesAttribute">
            <summary>
            The string values used to represent a boolean false when converting.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.BooleanFalseValuesAttribute.FalseValues">
            <summary>
            Gets the false values.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.BooleanFalseValuesAttribute.#ctor(System.String)">
            <summary>
            The string values used to represent a boolean false when converting.
            </summary>
            <param name="falseValue">The false values.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.BooleanFalseValuesAttribute.#ctor(System.String[])">
            <summary>
            The string values used to represent a boolean false when converting.
            </summary>
            <param name="falseValues">The false values.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.BooleanFalseValuesAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.BooleanFalseValuesAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.BooleanTrueValuesAttribute">
            <summary>
            The string values used to represent a boolean true when converting.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.BooleanTrueValuesAttribute.TrueValues">
            <summary>
            Gets the true values.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.BooleanTrueValuesAttribute.#ctor(System.String)">
            <summary>
            The string values used to represent a boolean true when converting.
            </summary>
            <param name="trueValue"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.BooleanTrueValuesAttribute.#ctor(System.String[])">
            <summary>
            The string values used to represent a boolean true when converting.
            </summary>
            <param name="trueValues"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.BooleanTrueValuesAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.BooleanTrueValuesAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.BufferSizeAttribute">
            <summary>
            The size of the buffer used for parsing and writing CSV files.
            Default is 0x1000.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.BufferSizeAttribute.BufferSize">
            <summary>
            The buffer size.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.BufferSizeAttribute.#ctor(System.Int32)">
            <summary>
            The size of the buffer used for parsing and writing CSV files.
            </summary>
            <param name="bufferSize"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.BufferSizeAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.CacheFieldsAttribute">
            <summary>
            Cache fields that are created when parsing.
            Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.CacheFieldsAttribute.CacheFields">
            <summary>
            Cache fields that are created when parsing.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.CacheFieldsAttribute.#ctor(System.Boolean)">
            <summary>
            Cache fields that are created when parsing.
            </summary>
            <param name="cacheFields"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.CacheFieldsAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.CommentAttribute">
            <summary>
            The character used to denote a line that is commented out.
            Default is #.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.CommentAttribute.Comment">
            <summary>
            Gets the character used to denote a line that is commented out.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.CommentAttribute.#ctor(System.Char)">
            <summary>
            The character used to denote a line that is commented out.
            </summary>
            <param name="comment">The comment character.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.CommentAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.ConstantAttribute">
            <summary>
            The constant value that will be used for every record when 
            reading and writing. This value will always be used no matter 
            what other mapping configurations are specified.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.ConstantAttribute.Constant">
            <summary>
            Gets the constant.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.ConstantAttribute.#ctor(System.Object)">
            <summary>
            The constant value that will be used for every record when 
            reading and writing. This value will always be used no matter 
            what other mapping configurations are specified.
            </summary>
            <param name="constant">The constant.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.ConstantAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.ConstantAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.CountBytesAttribute">
            <summary>
            A value indicating whether the number of bytes should
            be counted while parsing. Default is false. This will slow down parsing
            because it needs to get the byte count of every char for the given encoding.
            The <see cref="T:System.Text.Encoding"/> needs to be set correctly for this to be accurate.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.CountBytesAttribute.CountBytes">
            <summary>
            A value indicating whether the number of bytes should
            be counted while parsing. Default is false. This will slow down parsing
            because it needs to get the byte count of every char for the given encoding.
            The <see cref="T:System.Text.Encoding"/> needs to be set correctly for this to be accurate.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.CountBytesAttribute.#ctor(System.Boolean)">
            <summary>
            A value indicating whether the number of bytes should
            be counted while parsing. Default is false. This will slow down parsing
            because it needs to get the byte count of every char for the given encoding.
            The <see cref="T:System.Text.Encoding"/> needs to be set correctly for this to be accurate.
            </summary>
            <param name="countBytes"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.CountBytesAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.CultureInfoAttribute">
            <summary>
            The <see cref="P:CsvHelper.Configuration.Attributes.CultureInfoAttribute.CultureInfo"/> used when type converting.
            This will override the global <see cref="P:CsvHelper.Configuration.CsvConfiguration.CultureInfo"/>
            setting. Or set the same if the attribute is specified on class level.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.CultureInfoAttribute.CultureInfo">
            <summary>
            Gets the culture info.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.CultureInfoAttribute.#ctor(System.String)">
            <summary>
            The <see cref="P:CsvHelper.Configuration.Attributes.CultureInfoAttribute.CultureInfo"/> used when type converting.
            This will override the global <see cref="P:CsvHelper.Configuration.CsvConfiguration.CultureInfo"/>
            setting. Or set the same if the attribute is specified on class level.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.CultureInfoAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.CultureInfoAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.DateTimeStylesAttribute">
            <summary>
            The <see cref="P:CsvHelper.Configuration.Attributes.DateTimeStylesAttribute.DateTimeStyles"/> to use when type converting.
            This is used when doing any <see cref="T:System.DateTime"/> conversions.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.DateTimeStylesAttribute.DateTimeStyles">
            <summary>
            Gets the date time styles.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DateTimeStylesAttribute.#ctor(System.Globalization.DateTimeStyles)">
            <summary>
            The <see cref="P:CsvHelper.Configuration.Attributes.DateTimeStylesAttribute.DateTimeStyles"/> to use when type converting.
            This is used when doing any <see cref="T:System.DateTime"/> conversions.
            </summary>
            <param name="dateTimeStyles">The date time styles.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DateTimeStylesAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DateTimeStylesAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.DefaultAttribute">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.DefaultAttribute.Default">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DefaultAttribute.#ctor(System.Object)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty.
            </summary>
            <param name="defaultValue">The default value</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DefaultAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DefaultAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.DelimiterAttribute">
            <summary>
            The delimiter used to separate fields.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.DelimiterAttribute.Delimiter">
            <summary>
            Gets the delimiter.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DelimiterAttribute.#ctor(System.String)">
            <summary>
            The delimiter used to separate fields.
            </summary>
            <param name="delimiter">The delimiter.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DelimiterAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.DetectColumnCountChangesAttribute">
            <summary>
            A value indicating whether changes in the column
            count should be detected. If true, a <see cref="T:CsvHelper.BadDataException"/>
            will be thrown if a different column count is detected.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.DetectColumnCountChangesAttribute.DetectColumnCountChanges">
            <summary>
            A value indicating whether changes in the column
            count should be detected. If true, a <see cref="T:CsvHelper.BadDataException"/>
            will be thrown if a different column count is detected.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DetectColumnCountChangesAttribute.#ctor(System.Boolean)">
            <summary>
            A value indicating whether changes in the column
            count should be detected. If true, a <see cref="T:CsvHelper.BadDataException"/>
            will be thrown if a different column count is detected.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DetectColumnCountChangesAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.DetectDelimiterAttribute">
            <summary>
            Detect the delimiter instead of using the delimiter from configuration.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.DetectDelimiterAttribute.DetectDelimiter">
            <summary>
            Detect the delimiter instead of using the delimiter from configuration.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DetectDelimiterAttribute.#ctor(System.Boolean)">
            <summary>
            Detect the delimiter instead of using the delimiter from configuration.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DetectDelimiterAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.DetectDelimiterValuesAttribute">
            <summary>
            The possible delimiter values used when detecting the delimiter.
            Default is [",", ";", "|", "\t"].
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.DetectDelimiterValuesAttribute.DetectDelimiterValues">
            <summary>
            The possible delimiter values used when detecting the delimiter.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DetectDelimiterValuesAttribute.#ctor(System.String)">
            <summary>
            The possible delimiter values used when detecting the delimiter.
            </summary>
            <param name="detectDelimiterValues">Whitespace separated list of values.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.DetectDelimiterValuesAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.EncodingAttribute">
            <summary>
            The encoding used when counting bytes.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.EncodingAttribute.Encoding">
            <summary>
            Gets the encoding used when counting bytes.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.EncodingAttribute.#ctor(System.String)">
            <summary>
            The encoding used when counting bytes.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.EncodingAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.EnumIgnoreCaseAttribute">
            <summary>
            Ignore case when parsing enums.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.EnumIgnoreCaseAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.EnumIgnoreCaseAttribute.ApplyTo(CsvHelper.Configuration.MemberReferenceMap)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.EnumIgnoreCaseAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc/>
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.EscapeAttribute">
            <summary>
            The escape character used to escape a quote inside a field.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.EscapeAttribute.Escape">
            <summary>
            Gets the escape character used to escape a quote inside a field.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.EscapeAttribute.#ctor(System.Char)">
            <summary>
            The escape character used to escape a quote inside a field.
            </summary>
            <param name="escape">The escape character.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.EscapeAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.ExceptionMessagesContainRawDataAttribute">
            <summary>
            A value indicating if exception messages contain raw CSV data.
            <c>true</c> if exception contain raw CSV data, otherwise <c>false</c>.
            Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.ExceptionMessagesContainRawDataAttribute.ExceptionMessagesContainRawData">
            <summary>
            A value indicating if exception messages contain raw CSV data.
            <c>true</c> if exception contain raw CSV data, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.ExceptionMessagesContainRawDataAttribute.#ctor(System.Boolean)">
            <summary>
            A value indicating if exception messages contain raw CSV data.
            <c>true</c> if exception contain raw CSV data, otherwise <c>false</c>.
            </summary>
            <param name="exceptionMessagesContainRawData"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.ExceptionMessagesContainRawDataAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.FormatAttribute">
            <summary>
            The string format to be used when type converting.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.FormatAttribute.Formats">
            <summary>
            Gets the formats.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.FormatAttribute.#ctor(System.String)">
            <summary>
            The string format to be used when type converting.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.FormatAttribute.#ctor(System.String[])">
            <summary>
            The string format to be used when type converting.
            </summary>
            <param name="formats">The formats.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.FormatAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.FormatAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.HasHeaderRecordAttribute">
            <summary>
            A value indicating if the CSV file has a header record.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.HasHeaderRecordAttribute.HasHeaderRecord">
            <summary>
            Gets a value indicating if the CSV file has a header record.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.HasHeaderRecordAttribute.#ctor(System.Boolean)">
            <summary>
            A value indicating if the CSV file has a header record.
            </summary>
            <param name="hasHeaderRecord">A value indicating if the CSV file has a header record.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.HasHeaderRecordAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.HeaderPrefixAttribute">
            <summary>
            Appends a prefix to the header of each field of the reference member.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.HeaderPrefixAttribute.Prefix">
            <summary>
            Gets the prefix.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.HeaderPrefixAttribute.Inherit">
            <summary>
            Gets a value indicating if the prefix should inherit parent prefixes.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.HeaderPrefixAttribute.#ctor">
            <summary>
            Appends a prefix to the header of each field of the reference member.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.HeaderPrefixAttribute.#ctor(System.String)">
            <summary>
            Appends a prefix to the header of each field of the reference member.
            </summary>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.HeaderPrefixAttribute.#ctor(System.Boolean)">
            <summary>
            Appends a prefix to the header of each field of the reference member.
            </summary>
            <param name="inherit">Inherits parent object prefixes.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.HeaderPrefixAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Appends a prefix to the header of each field of the reference member.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="inherit">Inherits parent object prefixes.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.HeaderPrefixAttribute.ApplyTo(CsvHelper.Configuration.MemberReferenceMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.HeaderPrefixAttribute.ApplyTo(CsvHelper.Configuration.ParameterReferenceMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.IClassMapper">
            <summary>
            Defines methods to enable pluggable configuration.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IClassMapper.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Applies configuration.
            </summary>
            <param name="configuration">The configuration to apply to.</param>
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.IgnoreAttribute">
            <summary>
            Ignore the member when reading and writing.
            If this member has already been mapped as a reference
            member, either by a class map, or by automapping, calling
            this method will not ignore all the child members down the
            tree that have already been mapped.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IgnoreAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IgnoreAttribute.ApplyTo(CsvHelper.Configuration.MemberReferenceMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IgnoreAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.IgnoreBaseAttribute">
            <summary>
            Ignores base classes when auto mapping.
            </summary>
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.IgnoreBlankLinesAttribute">
            <summary>
            A value indicating if blank lines should be ignored when reading.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.IgnoreBlankLinesAttribute.IgnoreBlankLines">
            <summary>
            Gets a value indicating if blank lines should be ignored when reading.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IgnoreBlankLinesAttribute.#ctor(System.Boolean)">
            <summary>
            A value indicating if blank lines should be ignored when reading.
            </summary>
            <param name="ignoreBlankLines">The Ignore Blank Lines Flag.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IgnoreBlankLinesAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.IgnoreReferencesAttribute">
            <summary>
            Gets a value indicating whether references
            should be ignored when auto mapping. <c>true</c> to ignore
            references, otherwise <c>false</c>. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.IgnoreReferencesAttribute.IgnoreReferences">
            <summary>
            Gets a value indicating whether references
            should be ignored when auto mapping. <c>true</c> to ignore
            references, otherwise <c>false</c>. Default is false.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IgnoreReferencesAttribute.#ctor(System.Boolean)">
            <summary>
            Gets a value indicating whether references
            should be ignored when auto mapping. <c>true</c> to ignore
            references, otherwise <c>false</c>. Default is false.
            </summary>
            <param name="ignoreReferences">Ignore references value.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IgnoreReferencesAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.IMemberMapper">
            <summary>
            Defines methods to enable pluggable configuration of member mapping.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IMemberMapper.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <summary>
            Applies configuration to the given <see cref="T:CsvHelper.Configuration.MemberMap"/>.
            </summary>
            <param name="memberMap">The member map.</param>
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.IMemberReferenceMapper">
            <summary>
            Defines methods to enable pluggable configuration of member reference mapping.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IMemberReferenceMapper.ApplyTo(CsvHelper.Configuration.MemberReferenceMap)">
            <summary>
            Applies configuration to the given <see cref="T:CsvHelper.Configuration.MemberReferenceMap" />.
            </summary>
            <param name="referenceMap">The reference map.</param>
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.IncludePrivateMembersAttribute">
            <summary>
            A value indicating if private member should be read from and written to.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.IncludePrivateMembersAttribute.IncludePrivateMembers">
            <summary>
            Gets a value indicating if private member should be read from and written to.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IncludePrivateMembersAttribute.#ctor(System.Boolean)">
            <summary>
            A value indicating if private member should be read from and written to.
            </summary>
            <param name="includePrivateMembers">The Include Private Members Flag.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IncludePrivateMembersAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.IndexAttribute">
            <summary>
            When reading, is used to get the field at
            the given index. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.IndexAttribute.Index">
            <summary>
            Gets the index.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.IndexAttribute.IndexEnd">
            <summary>
            Gets the index end.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IndexAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            When reading, is used to get the field at
            the given index. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
            <param name="index">The index.</param>
            <param name="indexEnd">The index end.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IndexAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IndexAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.InjectionCharactersAttribute">
            <summary>
            Gets the characters that are used for injection attacks.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.InjectionCharactersAttribute.InjectionCharacters">
            <summary>
            Gets the characters that are used for injection attacks.
            Default is '=', '@', '+', '-', '\t', '\r'.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.InjectionCharactersAttribute.#ctor(System.String)">
            <summary>
            Gets the characters that are used for injection attacks.
            </summary>
            <param name="injectionCharacters"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.InjectionCharactersAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.InjectionEscapeCharacterAttribute">
            <summary>
            The character used to escape a detected injection.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.InjectionEscapeCharacterAttribute.InjectionEscapeCharacter">
            <summary>
            The character used to escape a detected injection.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.InjectionEscapeCharacterAttribute.#ctor(System.Char)">
            <summary>
            The character used to escape a detected injection.
            </summary>
            <param name="injectionEscapeCharacter"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.InjectionEscapeCharacterAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.InjectionOptionsAttribute">
            <summary>
            The injection options.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.InjectionOptionsAttribute.InjectionOptions">
            <summary>
            The injection options.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.InjectionOptionsAttribute.#ctor(CsvHelper.Configuration.InjectionOptions)">
            <summary>
            The injection options.
            </summary>
            <param name="injectionOptions"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.InjectionOptionsAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.IParameterMapper">
            <summary>
            Defines methods to enable pluggable configuration of parameter mapping.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IParameterMapper.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <summary>
            Applies configuration to the given <see cref="T:CsvHelper.Configuration.ParameterMap"/>.
            </summary>
            <param name="parameterMap">The parameter map.</param>
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.IParameterReferenceMapper">
            <summary>
            Defines methods to enable pluggable configuration of parameter reference mapping.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.IParameterReferenceMapper.ApplyTo(CsvHelper.Configuration.ParameterReferenceMap)">
            <summary>
            Applies configuration to the given <see cref="T:CsvHelper.Configuration.ParameterReferenceMap" />.
            </summary>
            <param name="referenceMap">The reference map.</param>
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.LineBreakInQuotedFieldIsBadDataAttribute">
            <summary>
            A value indicating if a line break found in a quote field should
            be considered bad data. <c>true</c> to consider a line break bad data, otherwise <c>false</c>.
            Defaults to false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.LineBreakInQuotedFieldIsBadDataAttribute.LineBreakInQuotedFieldIsBadData">
            <summary>
            A value indicating if a line break found in a quote field should
            be considered bad data. <c>true</c> to consider a line break bad data, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.LineBreakInQuotedFieldIsBadDataAttribute.#ctor(System.Boolean)">
            <summary>
            A value indicating if a line break found in a quote field should
            be considered bad data. <c>true</c> to consider a line break bad data, otherwise <c>false</c>.
            </summary>
            <param name="lineBreakInQuotedFieldIsBadData"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.LineBreakInQuotedFieldIsBadDataAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.MaxFieldSizeAttribute">
            <summary>
            Gets or sets the maximum size of a field.
            Defaults to 0, indicating maximum field size is not checked.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.MaxFieldSizeAttribute.MaxFieldSize">
            <summary>
            Gets or sets the maximum size of a field.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.MaxFieldSizeAttribute.#ctor(System.Double)">
            <summary>
            Gets or sets the maximum size of a field.
            </summary>
            <param name="maxFieldSize"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.MaxFieldSizeAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.MemberTypesAttribute">
            <summary>
            The member types that are used when auto mapping.
            MemberTypes are flags, so you can choose more than one.
            Default is Properties.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.MemberTypesAttribute.MemberTypes">
            <summary>
            The member types that are used when auto mapping.
            MemberTypes are flags, so you can choose more than one.
            Default is Properties.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.MemberTypesAttribute.#ctor(CsvHelper.Configuration.MemberTypes)">
            <summary>
            The member types that are used when auto mapping.
            MemberTypes are flags, so you can choose more than one.
            Default is Properties.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.MemberTypesAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.ModeAttribute">
            <summary>
            The mode.
            See <see cref="T:CsvHelper.CsvMode"/> for more details.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.ModeAttribute.Mode">
            <summary>
            The mode.
            See <see cref="T:CsvHelper.CsvMode"/> for more details.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.ModeAttribute.#ctor(CsvHelper.CsvMode)">
            <summary>
            The mode.
            See <see cref="T:CsvHelper.CsvMode"/> for more details.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.ModeAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.NameAttribute">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.NameAttribute.Names">
            <summary>
            Gets the names.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NameAttribute.#ctor(System.String)">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
            <param name="name">The name</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NameAttribute.#ctor(System.String[])">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
            <param name="names">The names.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NameAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NameAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.NameIndexAttribute">
            <summary>
            When reading, is used to get the 
            index of the name used when there 
            are multiple names that are the same.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.NameIndexAttribute.NameIndex">
            <summary>
            The name index.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NameIndexAttribute.#ctor(System.Int32)">
            <summary>
            When reading, is used to get the 
            index of the name used when there 
            are multiple names that are the same.
            </summary>
            <param name="nameIndex">The name index.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NameIndexAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NameIndexAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.NewLineAttribute">
            <summary>
            The newline string to use. Default is \r\n (CRLF).
            When writing, this value is always used.
            When reading, this value is only used if explicitly set.
            If not set, the parser uses one of \r\n, \r, or \n.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.NewLineAttribute.NewLine">
            The newline string to use. Default is \r\n (CRLF).
            When writing, this value is always used.
            When reading, this value is only used if explicitly set.
            If not set, the parser uses one of \r\n, \r, or \n.
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NewLineAttribute.#ctor(System.String)">
            The newline string to use. Default is \r\n (CRLF).
            When writing, this value is always used.
            When reading, this value is only used if explicitly set.
            If not set, the parser uses one of \r\n, \r, or \n.
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NewLineAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.NullValuesAttribute">
            <summary>
            The string values used to represent null when converting.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.NullValuesAttribute.NullValues">
            <summary>
            Gets the null values.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NullValuesAttribute.#ctor(System.String)">
            <summary>
            The string values used to represent null when converting.
            </summary>
            <param name="nullValue">The null values.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NullValuesAttribute.#ctor(System.String[])">
            <summary>
            The string values used to represent null when converting.
            </summary>
            <param name="nullValues">The null values.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NullValuesAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NullValuesAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.NumberStylesAttribute">
            <summary>
            The <see cref="P:CsvHelper.Configuration.Attributes.NumberStylesAttribute.NumberStyles"/> to use when type converting.
            This is used when doing any number conversions.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.NumberStylesAttribute.NumberStyles">
            <summary>
            Gets the number styles.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NumberStylesAttribute.#ctor(System.Globalization.NumberStyles)">
            <summary>
            The <see cref="P:CsvHelper.Configuration.Attributes.NumberStylesAttribute.NumberStyles"/> to use when type converting.
            This is used when doing any number conversions.
            </summary>
            <param name="numberStyles">The number styles.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NumberStylesAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.NumberStylesAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.OptionalAttribute">
            <summary>
            Ignore the member when reading if no matching field name can be found.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.OptionalAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.OptionalAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.ProcessFieldBufferSizeAttribute">
            <summary>
            The size of the buffer used when processing fields.
            Default is 1024.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.ProcessFieldBufferSizeAttribute.ProcessFieldBufferSize">
            <summary>
            The size of the buffer used when processing fields.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.ProcessFieldBufferSizeAttribute.#ctor(System.Int32)">
            <summary>
            The size of the buffer used when processing fields.
            </summary>
            <param name="processFieldBufferSize"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.ProcessFieldBufferSizeAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.QuoteAttribute">
            <summary>
            The character used to quote fields.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.QuoteAttribute.Quote">
            <summary>
            Gets the character used to quote fields.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.QuoteAttribute.#ctor(System.Char)">
            <summary>
            The character used to quote fields.
            </summary>
            <param name="quote">The quote character.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.QuoteAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.TrimOptionsAttribute">
            <summary>
            The fields trimming options.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.TrimOptionsAttribute.TrimOptions">
            <summary>
            Gets the fields trimming options.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.TrimOptionsAttribute.#ctor(CsvHelper.Configuration.TrimOptions)">
            <summary>
            The fields trimming options.
            </summary>
            <param name="trimOptions">The TrimOptions.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.TrimOptionsAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.TypeConverterAttribute">
            <summary>
            Specifies the <see cref="P:CsvHelper.Configuration.Attributes.TypeConverterAttribute.TypeConverter"/> to use
            when converting the member to and from a CSV field.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.TypeConverterAttribute.TypeConverter">
            <summary>
            Gets the type converter.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.TypeConverterAttribute.#ctor(System.Type)">
            <summary>
            Specifies the <see cref="P:CsvHelper.Configuration.Attributes.TypeConverterAttribute.TypeConverter"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <param name="typeConverterType">The type of the <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.TypeConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Specifies the <see cref="P:CsvHelper.Configuration.Attributes.TypeConverterAttribute.TypeConverter"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <param name="typeConverterType">The type of the <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.</param>
            <param name="constructorArgs">Type constructor arguments for the type converter.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.TypeConverterAttribute.ApplyTo(CsvHelper.Configuration.MemberMap)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.TypeConverterAttribute.ApplyTo(CsvHelper.Configuration.ParameterMap)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.UseNewObjectForNullReferenceMembersAttribute">
            <summary>
            Gets a value indicating that during writing if a new 
            object should be created when a reference member is null.
            True to create a new object and use it's defaults for the
            fields, or false to leave the fields empty for all the
            reference member's member.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.UseNewObjectForNullReferenceMembersAttribute.UseNewObjectForNullReferenceMembers">
            <summary>
            Gets a value indicating that during writing if a new 
            object should be created when a reference member is null.
            True to create a new object and use it's defaults for the
            fields, or false to leave the fields empty for all the
            reference member's member.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.UseNewObjectForNullReferenceMembersAttribute.#ctor(System.Boolean)">
            <summary>
            Gets a value indicating that during writing if a new 
            object should be created when a reference member is null.
            True to create a new object and use it's defaults for the
            fields, or false to leave the fields empty for all the
            reference member's member.
            </summary>
            <param name="useNewObjectForNullReferenceMembers">The value.</param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.UseNewObjectForNullReferenceMembersAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.Attributes.WhiteSpaceCharsAttribute">
            <summary>
            Characters considered whitespace.
            Used when trimming fields.
            Default is [' '].
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.Attributes.WhiteSpaceCharsAttribute.WhiteSpaceChars">
            <summary>
            Characters considered whitespace.
            Used when trimming fields.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.WhiteSpaceCharsAttribute.#ctor(System.String)">
            <summary>
            Characters considered whitespace.
            Used when trimming fields.
            </summary>
            <param name="whiteSpaceChars"></param>
        </member>
        <member name="M:CsvHelper.Configuration.Attributes.WhiteSpaceCharsAttribute.ApplyTo(CsvHelper.Configuration.CsvConfiguration)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.Configuration.ClassMap">
            <summary>
             Maps class members to CSV fields.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ClassMap.ClassType">
            <summary>
            The type of the class this map is for.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ClassMap.ParameterMaps">
            <summary>
            The class constructor parameter mappings.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ClassMap.MemberMaps">
            <summary>
            The class member mappings.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ClassMap.ReferenceMaps">
            <summary>
            The class member reference mappings.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.#ctor(System.Type)">
            <summary>
            Allow only internal creation of CsvClassMap.
            </summary>
            <param name="classType">The type of the class this map is for.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.Map(System.Type,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Maps a member to a CSV field.
            </summary>
            <param name="classType">The type of the class this map is for. This may not be the same type
            as the member.DeclaringType or the current ClassType due to nested member mappings.</param>
            <param name="member">The member to map.</param>
            <param name="useExistingMap">If true, an existing map will be used if available.
            If false, a new map is created for the same member.</param>
            <returns>The member mapping.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.Map">
            <summary>
            Maps a non-member to a CSV field. This allows for writing
            data that isn't mapped to a class member.
            </summary>
            <returns>The member mapping.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.References(System.Type,System.Reflection.MemberInfo,System.Object[])">
            <summary>
            Maps a member to another class map.
            </summary>
            <param name="classMapType">The type of the class map.</param>
            <param name="member">The member.</param>
            <param name="constructorArgs">Constructor arguments used to create the reference map.</param>
            <returns>The reference mapping for the member.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.Parameter(System.String)">
            <summary>
            Maps a constructor parameter to a CSV field.
            </summary>
            <param name="name">The name of the constructor parameter.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.Parameter(System.Func{System.Reflection.ConstructorInfo},System.String)">
            <summary>
            Maps a constructor parameter to a CSV field.
            </summary>
            <param name="getConstructor">A function that returns the <see cref="T:System.Reflection.ConstructorInfo"/> for the constructor.</param>
            <param name="name">The name of the constructor parameter.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.Parameter(System.Reflection.ConstructorInfo,System.Reflection.ParameterInfo)">
            <summary>
            Maps a constructor parameter to a CSV field.
            </summary>
            <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo"/> for the constructor.</param>
            <param name="parameter">The <see cref="T:System.Reflection.ParameterInfo"/> for the constructor parameter.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.AutoMap(System.Globalization.CultureInfo)">
            <summary>
            Auto maps all members for the given type. If a member
            is mapped again it will override the existing map.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.AutoMap(CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Auto maps all members for the given type. If a member 
            is mapped again it will override the existing map.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.AutoMap(CsvHelper.CsvContext)">
            <summary>
            Auto maps all members for the given type. If a member 
            is mapped again it will override the existing map.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.GetMaxIndex(System.Boolean)">
            <summary>
            Get the largest index for the
            members and references.
            </summary>
            <returns>The max index.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.ReIndex(System.Int32)">
            <summary>
            Resets the indexes based on the given start index.
            </summary>
            <param name="indexStart">The index start.</param>
            <returns>The last index + 1.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.AutoMapMembers(CsvHelper.Configuration.ClassMap,CsvHelper.CsvContext,System.Collections.Generic.LinkedList{System.Type},System.Int32)">
            <summary>
            Auto maps the given map and checks for circular references as it goes.
            </summary>
            <param name="map">The map to auto map.</param>
            <param name="context">The context.</param>
            <param name="mapParents">The list of parents for the map.</param>
            <param name="indexStart">The index starting point.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.AutoMapConstructorParameters(CsvHelper.Configuration.ClassMap,CsvHelper.CsvContext,System.Collections.Generic.LinkedList{System.Type},System.Int32)">
            <summary>
            Auto maps the given map using constructor parameters.
            </summary>
            <param name="map">The map.</param>
            <param name="context">The context.</param>
            <param name="mapParents">The list of parents for the map.</param>
            <param name="indexStart">The index starting point.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.CheckForCircularReference(System.Type,System.Collections.Generic.LinkedList{System.Type})">
            <summary>
            Checks for circular references.
            </summary>
            <param name="type">The type to check for.</param>
            <param name="mapParents">The list of parents to check against.</param>
            <returns>A value indicating if a circular reference was found.
            True if a circular reference was found, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.GetGenericType">
            <summary>
            Gets the generic type for this class map.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.ApplyAttributes(CsvHelper.Configuration.ParameterMap)">
            <summary>
            Applies attribute configurations to the map.
            </summary>
            <param name="parameterMap">The parameter map.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.ApplyAttributes(CsvHelper.Configuration.ParameterReferenceMap)">
            <summary>
            Applies attribute configurations to the map.
            </summary>
            <param name="referenceMap">The parameter reference map.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.ApplyAttributes(CsvHelper.Configuration.MemberMap)">
            <summary>
            Applies attribute configurations to the map.
            </summary>
            <param name="memberMap">The member map.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap.ApplyAttributes(CsvHelper.Configuration.MemberReferenceMap)">
            <summary>
            Applies attribute configurations to the map.
            </summary>
            <param name="referenceMap">The member reference map.</param>
        </member>
        <member name="T:CsvHelper.Configuration.IHasMap`1">
            <summary>
            Has mapping capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.IHasMap`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Maps a member to a CSV field.
            </summary>
            <param name="expression">The member to map.</param>
            <param name="useExistingMap">If true, an existing map will be used if available.
            If false, a new map is created for the same member.</param>
            <returns>The member mapping.</returns>
        </member>
        <member name="T:CsvHelper.Configuration.IHasMapOptions`2">
            <summary>
            Options after a mapping call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper.Configuration.IHasTypeConverter`2">
            <summary>
            Has type converter capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.IHasTypeConverter`2.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Specifies the <see cref="M:CsvHelper.Configuration.IHasTypeConverter`2.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <param name="typeConverter">The TypeConverter to use.</param>
        </member>
        <member name="M:CsvHelper.Configuration.IHasTypeConverter`2.TypeConverter``1">
            <summary>
            Specifies the <see cref="M:CsvHelper.Configuration.IHasTypeConverter`2.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <typeparam name="TConverter">The <see cref="T:System.Type"/> of the 
            <see cref="M:CsvHelper.Configuration.IHasTypeConverter`2.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)"/> to use.</typeparam>
        </member>
        <member name="T:CsvHelper.Configuration.IHasTypeConverterOptions`2">
            <summary>
            Options after a type converter call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper.Configuration.IHasIndex`2">
            <summary>
            Has index capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.IHasIndex`2.Index(System.Int32,System.Int32)">
            <summary>
            When reading, is used to get the field at
            the given index. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
            <param name="index">The index of the CSV field.</param>
            <param name="indexEnd">The end index used when mapping to an <see cref="T:System.Collections.IEnumerable"/> member.</param>
        </member>
        <member name="T:CsvHelper.Configuration.IHasIndexOptions`2">
            <summary>
            Options after an index call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper.Configuration.IHasOptional`2">
            <summary>
            Has optional capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.IHasOptional`2.Optional">
            <summary>
            Ignore the member when reading if no matching field name can be found.
            </summary>
        </member>
        <member name="T:CsvHelper.Configuration.IHasOptionalOptions`2">
            <summary>
            Options after an optional call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper.Configuration.IHasName`2">
            <summary>
            Has name capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.IHasName`2.Name(System.String[])">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
            <param name="names">The possible names of the CSV field.</param>
        </member>
        <member name="T:CsvHelper.Configuration.IHasNameOptions`2">
            <summary>
            Options after a name call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper.Configuration.IHasNameIndex`2">
            <summary>
            Has name index capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.IHasNameIndex`2.NameIndex(System.Int32)">
            <summary>
            When reading, is used to get the 
            index of the name used when there 
            are multiple names that are the same.
            </summary>
            <param name="index">The index of the name.</param>
        </member>
        <member name="T:CsvHelper.Configuration.IHasNameIndexOptions`2">
            <summary>
            Options after a name index call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper.Configuration.IHasConvertUsing`2">
            <summary>
            Has convert using capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.IHasConvertUsing`2.ConvertUsing(CsvHelper.ConvertFromString{`1})">
            <summary>
            Specifies an expression to be used to convert data in the
            row to the member.
            </summary>
            <param name="convertExpression">The convert expression.</param>
        </member>
        <member name="M:CsvHelper.Configuration.IHasConvertUsing`2.ConvertUsing(CsvHelper.ConvertToString{`0})">
            <summary>
            Specifies an expression to be used to convert the object
            to a field.
            </summary>
            <param name="convertExpression">The convert expression.</param>
        </member>
        <member name="T:CsvHelper.Configuration.IHasDefault`2">
            <summary>
            Has default capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.IHasDefault`2.Default(`1)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:CsvHelper.Configuration.IHasDefault`2.Default(System.String)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty. This value is not type checked
            and will use a <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> to convert
            the field. This could potentially have runtime errors.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="T:CsvHelper.Configuration.IHasDefaultOptions`2">
            <summary>
            Options after a default call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper.Configuration.IHasConstant`2">
            <summary>
            Has constant capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.IHasConstant`2.Constant(`1)">
            <summary>
            The constant value that will be used for every record when 
            reading and writing. This value will always be used no matter 
            what other mapping configurations are specified.
            </summary>
            <param name="value">The constant value.</param>
        </member>
        <member name="T:CsvHelper.Configuration.IHasValidate`2">
            <summary>
            Has validate capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.IHasValidate`2.Validate(CsvHelper.Validate)">
            <summary>
            The validate expression that will be called on every field when reading.
            The expression should return true if the field is valid.
            If false is returned, a <see cref="T:CsvHelper.ValidationException"/>
            will be thrown.
            </summary>
            <param name="validateExpression">The validation expression.</param>
        </member>
        <member name="T:CsvHelper.Configuration.IBuildableClass`1">
            <summary>
            Has build capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.IBuildableClass`1.Build">
            <summary>
            Builds the <see cref="T:CsvHelper.Configuration.ClassMap`1"/>.
            </summary>
        </member>
        <member name="T:CsvHelper.Configuration.ClassMapCollection">
            <summary>
            Collection that holds CsvClassMaps for record types.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ClassMapCollection.Item(System.Type)">
            <summary>
            Gets the <see cref="T:CsvHelper.Configuration.ClassMap"/> for the specified record type.
            </summary>
            <value>
            The <see cref="T:CsvHelper.Configuration.ClassMap"/>.
            </value>
            <param name="type">The record type.</param>
            <returns>The <see cref="T:CsvHelper.Configuration.ClassMap"/> for the specified record type.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMapCollection.#ctor(CsvHelper.CsvContext)">
            <summary>
            Creates a new instance using the given configuration.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMapCollection.Find``1">
            <summary>
            Finds the <see cref="T:CsvHelper.Configuration.ClassMap"/> for the specified record type.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <returns>The <see cref="T:CsvHelper.Configuration.ClassMap"/> for the specified record type.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMapCollection.Add(CsvHelper.Configuration.ClassMap)">
            <summary>
            Adds the specified map for it's record type. If a map
            already exists for the record type, the specified
            map will replace it.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMapCollection.Remove(System.Type)">
            <summary>
            Removes the class map.
            </summary>
            <param name="classMapType">The class map type.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMapCollection.Clear">
            <summary>
            Removes all maps.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMapCollection.GetGenericCsvClassMapType(System.Type)">
            <summary>
            Goes up the inheritance tree to find the type instance of CsvClassMap{}.
            </summary>
            <param name="type">The type to traverse.</param>
            <returns>The type that is CsvClassMap{}.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMapCollection.SetMapDefaults(CsvHelper.Configuration.ClassMap)">
            <summary>
            Sets defaults for the mapping tree. The defaults used
            to be set inside the classes, but this didn't allow for
            the TypeConverter to be created from the Configuration's
            TypeConverterFactory.
            </summary>
            <param name="map">The map to set defaults on.</param>
        </member>
        <member name="T:CsvHelper.Configuration.ClassMap`1">
            <summary>
            Maps class members to CSV fields.
            </summary>
            <typeparam name="TClass">The <see cref="T:System.Type"/> of class to map.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap`1.#ctor">
            <summary>
            Creates an instance of <see cref="T:CsvHelper.Configuration.ClassMap`1"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Maps a member to a CSV field.
            </summary>
            <param name="expression">The member to map.</param>
            <param name="useExistingMap">If true, an existing map will be used if available.
            If false, a new map is created for the same member.</param>
            <returns>The member mapping.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap`1.Map``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Maps a member to a CSV field.
            </summary>
            <param name="expression">The member to map.</param>
            <param name="useExistingMap">If true, an existing map will be used if available.
            If false, a new map is created for the same member.</param>
            <returns>The member mapping.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.ClassMap`1.References``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object[])">
            <summary>
            Meant for internal use only. 
            Maps a member to another class map. When this is used, accessing a property through
            sub-property mapping later won't work. You can only use one or the other. When using
            this, ConvertUsing will also not work.
            </summary>
            <typeparam name="TClassMap">The type of the class map.</typeparam>
            <param name="expression">The expression.</param>
            <param name="constructorArgs">Constructor arguments used to create the reference map.</param>
            <returns>The reference mapping for the member.</returns>
        </member>
        <member name="T:CsvHelper.Configuration.ConfigurationException">
            <summary>
            Represents configuration errors that occur.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.ConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.ConfigurationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.ConfigurationException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper.Configuration.ConfigurationFunctions">
            <summary>Holds the default callback methods for delegate members of <c>CsvHelper.Configuration.Configuration</c>.</summary>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationFunctions.HeaderValidated(CsvHelper.HeaderValidatedArgs)">
            <summary>
            Throws a <see cref="T:CsvHelper.ValidationException"/> if <see name="HeaderValidatedArgs.InvalidHeaders"/> is not empty.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationFunctions.MissingFieldFound(CsvHelper.MissingFieldFoundArgs)">
            <summary>
            Throws a <c>MissingFieldException</c>.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationFunctions.BadDataFound(CsvHelper.BadDataFoundArgs)">
            <summary>
            Throws a <see cref="T:CsvHelper.BadDataException"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationFunctions.ReadingExceptionOccurred(CsvHelper.ReadingExceptionOccurredArgs)">
            <summary>
            Throws the given <see name="ReadingExceptionOccurredArgs.Exception"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationFunctions.ShouldQuote(CsvHelper.ShouldQuoteArgs)">
            <summary>
            Returns true if the field contains a <see cref="P:CsvHelper.Configuration.IWriterConfiguration.Quote"/>,
            starts with a space, ends with a space, contains \r or \n, or contains
            the <see cref="P:CsvHelper.Configuration.IWriterConfiguration.Delimiter"/>.
            </summary>
            <param name="args">The args.</param>
            <returns><c>true</c> if the field should be quoted, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationFunctions.PrepareHeaderForMatch(CsvHelper.PrepareHeaderForMatchArgs)">
            <summary>
            Returns the <see name="PrepareHeaderForMatchArgs.Header"/> as given.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationFunctions.ShouldUseConstructorParameters(CsvHelper.ShouldUseConstructorParametersArgs)">
            <summary>
            Returns <c>true</c> if <paramref name="args.ParameterType.ParameterType"/>:
            1. does not have a parameterless constructor
            2. has a constructor
            3. is not a value type
            4. is not a primitive
            5. is not an enum
            6. is not an interface
            7. TypeCode is an Object.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationFunctions.GetConstructor(CsvHelper.GetConstructorArgs)">
            <summary>
            Returns the type's constructor with the most parameters. 
            If two constructors have the same number of parameters, then
            there is no guarantee which one will be returned. If you have
            that situation, you should probably implement this function yourself.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationFunctions.GetDynamicPropertyName(CsvHelper.GetDynamicPropertyNameArgs)">
            <summary>
            Returns the header name ran through <see cref="M:CsvHelper.Configuration.ConfigurationFunctions.PrepareHeaderForMatch(CsvHelper.PrepareHeaderForMatchArgs)"/>.
            If no header exists, property names will be Field1, Field2, Field3, etc.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ConfigurationFunctions.GetDelimiter(CsvHelper.Delegates.GetDelimiterArgs)">
            <summary>
            Detects the delimiter based on the given text.
            Return the detected delimiter or null if one wasn't found.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:CsvHelper.Configuration.CsvConfiguration">
            <summary>
            Configuration used for reading and writing CSV data.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.AllowComments">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.BadDataFound">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.BufferSize">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.CacheFields">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Comment">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.CountBytes">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.CultureInfo">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Delimiter">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.DetectDelimiter">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.GetDelimiter">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.DetectDelimiterValues">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.DetectColumnCountChanges">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.DynamicPropertySort">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Encoding">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Escape">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.ExceptionMessagesContainRawData">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.GetConstructor">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.GetDynamicPropertyName">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.HasHeaderRecord">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.HeaderValidated">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.IgnoreBlankLines">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.IgnoreReferences">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.IncludePrivateMembers">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.InjectionCharacters">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.InjectionEscapeCharacter">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.InjectionOptions">
            <inheritdoc />
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.IsNewLineSet">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.LineBreakInQuotedFieldIsBadData">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.MaxFieldSize">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.MemberTypes">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.MissingFieldFound">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Mode">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.NewLine">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.PrepareHeaderForMatch">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.ProcessFieldBufferSize">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.Quote">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.ReadingExceptionOccurred">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.ReferenceHeaderPrefix">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.ShouldQuote">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.ShouldSkipRecord">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.ShouldUseConstructorParameters">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.TrimOptions">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.UseNewObjectForNullReferenceMembers">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.Configuration.CsvConfiguration.WhiteSpaceChars">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfiguration.#ctor(System.Globalization.CultureInfo,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.CsvConfiguration"/> class
            using the given <see cref="T:System.Globalization.CultureInfo"/>. Since <see cref="P:CsvHelper.Configuration.CsvConfiguration.Delimiter"/>
            uses <see cref="P:CsvHelper.Configuration.CsvConfiguration.CultureInfo"/> for it's default, the given <see cref="T:System.Globalization.CultureInfo"/>
            will be used instead.
            </summary>
            <param name="cultureInfo">The culture information.</param>
            <param name="attributesType">The type that contains the configuration attributes.
            This will call <see cref="M:CsvHelper.Configuration.CsvConfiguration.ApplyAttributes(System.Type)"/> automatically.</param>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfiguration.Validate">
            <summary>
            Validates the configuration.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfiguration.ApplyAttributes``1">
            <summary>
            Applies class level attribute to configuration.
            </summary>
            <typeparam name="T">Type with attributes.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.CsvConfiguration.ApplyAttributes(System.Type)">
            <summary>
            Applies class level attribute to configuration.
            </summary>
            <param name="type">Type with attributes.</param>
        </member>
        <member name="T:CsvHelper.Configuration.DefaultClassMap`1">
            <summary>
            A default <see cref="T:CsvHelper.Configuration.ClassMap`1"/> that can be used
            to create a class map dynamically.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CsvHelper.Configuration.InjectionOptions">
            <summary>
            Options for handling injection attacks.
            </summary>
        </member>
        <member name="F:CsvHelper.Configuration.InjectionOptions.None">
            <summary>
            No injection protection.
            </summary>
        </member>
        <member name="F:CsvHelper.Configuration.InjectionOptions.Escape">
            <summary>
            Escape injection characters.
            </summary>
        </member>
        <member name="F:CsvHelper.Configuration.InjectionOptions.Strip">
            <summary>
            Strip injection characters.
            </summary>
        </member>
        <member name="F:CsvHelper.Configuration.InjectionOptions.Exception">
            <summary>
            Throw an exception if injection characters are detected.
            </summary>
        </member>
        <member name="T:CsvHelper.Configuration.IParserConfiguration">
            <summary>
            Configuration used for the <see cref="T:CsvHelper.IParser"/>.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.CultureInfo">
            <summary>
            Gets the culture info used to read an write CSV files.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.CacheFields">
            <summary>
            Cache fields that are created when parsing.
            Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.NewLine">
            <summary>
            The newline string to use. Default is \r\n (CRLF).
            When writing, this value is always used.
            When reading, this value is only used if explicitly set.
            If not set, the parser uses one of \r\n, \r, or \n.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.IsNewLineSet">
            <summary>
            A value indicating if <see cref="P:CsvHelper.Configuration.IParserConfiguration.NewLine"/> was set.
            </summary>
            <value>
              <c>true</c> if <see cref="P:CsvHelper.Configuration.IParserConfiguration.NewLine"/> was set. <c>false</c> if <see cref="P:CsvHelper.Configuration.IParserConfiguration.NewLine"/> is the default.
            </value>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.Mode">
            <summary>
            The mode.
            See <see cref="T:CsvHelper.CsvMode"/> for more details.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.BufferSize">
            <summary>
            Gets the size of the buffer
            used for parsing and writing CSV files.
            Default is 0x1000.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.ProcessFieldBufferSize">
            <summary>
            The size of the buffer used when processing fields.
            Default is 1024.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.CountBytes">
            <summary>
            Gets a value indicating whether the number of bytes should
            be counted while parsing. Default is false. This will slow down parsing
            because it needs to get the byte count of every char for the given encoding.
            The <see cref="P:CsvHelper.Configuration.IParserConfiguration.Encoding"/> needs to be set correctly for this to be accurate.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.Encoding">
            <summary>
            Gets the encoding used when counting bytes.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.BadDataFound">
            <summary>
            Gets the function that is called when bad field data is found. A field
            has bad data if it contains a quote and the field is not quoted (escaped).
            You can supply your own function to do other things like logging the issue
            instead of throwing an exception.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.MaxFieldSize">
            <summary>
            Gets or sets the maximum size of a field.
            Defaults to 0, indicating maximum field size is not checked.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.LineBreakInQuotedFieldIsBadData">
            <summary>
            Gets a value indicating if a line break found in a quote field should
            be considered bad data. <c>true</c> to consider a line break bad data, otherwise <c>false</c>.
            Defaults to false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.Comment">
            <summary>
            Gets the character used to denote
            a line that is commented out. Default is '#'.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.AllowComments">
            <summary>
            Gets a value indicating if comments are allowed.
            <c>true</c> to allow commented out lines, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.IgnoreBlankLines">
            <summary>
            Gets a value indicating if blank lines
            should be ignored when reading.
            <c>true</c> to ignore, otherwise <c>false</c>. Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.Quote">
            <summary>
            Gets the character used to quote fields.
            Default is '"'.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.Delimiter">
            <summary>
            The delimiter used to separate fields.
            Default is <see cref="P:System.Globalization.TextInfo.ListSeparator"/>.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.DetectDelimiter">
            <summary>
            Detect the delimiter instead of using the delimiter from configuration.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.GetDelimiter">
            <summary>
            Gets the function that is called when <see cref="P:CsvHelper.Configuration.IParserConfiguration.DetectDelimiter"/> is enabled.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.DetectDelimiterValues">
            <summary>
            The possible delimiter values used when detecting the delimiter.
            Default is [",", ";", "|", "\t"].
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.Escape">
            <summary>
            The character used to escape characters.
            Default is '"'.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.TrimOptions">
            <summary>
            Gets the field trimming options.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.WhiteSpaceChars">
            <summary>
            Characters considered whitespace.
            Used when trimming fields.
            Default is [' '].
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IParserConfiguration.ExceptionMessagesContainRawData">
            <summary>
            A value indicating if exception messages contain raw CSV data.
            <c>true</c> if exception contain raw CSV data, otherwise <c>false</c>.
            Default is <c>true</c>.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.IParserConfiguration.Validate">
            <summary>
            Validates the configuration.
            </summary>
        </member>
        <member name="T:CsvHelper.Configuration.IReaderConfiguration">
            <summary>
            Configuration used for the <see cref="T:CsvHelper.IReader"/>.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.HasHeaderRecord">
            <summary>
            Gets a value indicating if the
            CSV file has a header record.
            Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.HeaderValidated">
            <summary>
            Gets the function that is called when a header validation check is ran. The default function
            will throw a <see cref="T:CsvHelper.ValidationException"/> if there is no header for a given member mapping.
            You can supply your own function to do other things like logging the issue instead of throwing an exception.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.MissingFieldFound">
            <summary>
            Gets the function that is called when a missing field is found. The default function will
            throw a <see cref="T:CsvHelper.MissingFieldException"/>. You can supply your own function to do other things
            like logging the issue instead of throwing an exception.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.ReadingExceptionOccurred">
            <summary>
            Gets the function that is called when a reading exception occurs.
            The default function will re-throw the given exception. If you want to ignore
            reading exceptions, you can supply your own function to do other things like
            logging the issue.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.PrepareHeaderForMatch">
            <summary>
            Prepares the header field for matching against a member name.
            The header field and the member name are both ran through this function.
            You should do things like trimming, removing whitespace, removing underscores,
            and making casing changes to ignore case.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.ShouldUseConstructorParameters">
            <summary>
            Determines if constructor parameters should be used to create
            the class instead of the default constructor and members.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.GetConstructor">
            <summary>
            Chooses the constructor to use for constructor mapping.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.GetDynamicPropertyName">
            <summary>
            Gets the name to use for the property of the dynamic object.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.IgnoreReferences">
            <summary>
            Gets a value indicating whether references
            should be ignored when auto mapping. <c>true</c> to ignore
            references, otherwise <c>false</c>. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.ShouldSkipRecord">
            <summary>
            Gets the callback that will be called to
            determine whether to skip the given record or not.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.IncludePrivateMembers">
            <summary>
            Gets a value indicating if private
            member should be read from and written to.
            <c>true</c> to include private member, otherwise <c>false</c>. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.ReferenceHeaderPrefix">
            <summary>
            Gets a callback that will return the prefix for a reference header.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.DetectColumnCountChanges">
            <summary>
            Gets a value indicating whether changes in the column
            count should be detected. If true, a <see cref="T:CsvHelper.BadDataException"/>
            will be thrown if a different column count is detected.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IReaderConfiguration.MemberTypes">
            <summary>
            Gets the member types that are used when auto mapping.
            MemberTypes are flags, so you can choose more than one.
            Default is Properties.
            </summary>
        </member>
        <member name="T:CsvHelper.Configuration.IWriterConfiguration">
            <summary>
            Configuration used for the <see cref="T:CsvHelper.IWriter"/>.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.BufferSize">
            <summary>
            Gets the size of the buffer
            used for parsing and writing CSV files.
            Default is 0x1000.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.Mode">
            <summary>
            The mode.
            See <see cref="T:CsvHelper.CsvMode"/> for more details.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.Delimiter">
            <summary>
            Gets the delimiter used to separate fields.
            Default is ',';
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.Quote">
            <summary>
            Gets the character used to quote fields.
            Default is '"'.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.Escape">
            <summary>
            The character used to escape characters.
            Default is '"'.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.TrimOptions">
            <summary>
            Gets the field trimming options.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.InjectionOptions">
            <summary>
            Gets the injection options.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.InjectionCharacters">
            <summary>
            Gets the characters that are used for injection attacks.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.InjectionEscapeCharacter">
            <summary>
            Gets the character used to escape a detected injection.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.NewLine">
            <summary>
            The newline string to use. Default is \r\n (CRLF).
            When writing, this value is always used.
            When reading, this value is only used if explicitly set. If not set,
            the parser uses one of \r\n, \r, or \n.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.IsNewLineSet">
            <summary>
            A value indicating if <see cref="P:CsvHelper.Configuration.IWriterConfiguration.NewLine"/> was set.
            </summary>
            <value>
              <c>true</c> if <see cref="P:CsvHelper.Configuration.IWriterConfiguration.NewLine"/> was set. <c>false</c> if <see cref="P:CsvHelper.Configuration.IWriterConfiguration.NewLine"/> is the default.
            </value>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.ShouldQuote">
            <summary>
            Gets a function that is used to determine if a field should get quoted 
            when writing.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.CultureInfo">
            <summary>
            Gets the culture info used to read and write CSV files.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.AllowComments">
            <summary>
            Gets a value indicating if comments are allowed.
            True to allow commented out lines, otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.Comment">
            <summary>
            Gets the character used to denote
            a line that is commented out. Default is '#'.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.HasHeaderRecord">
            <summary>
            Gets a value indicating if the
            CSV file has a header record.
            Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.IgnoreReferences">
            <summary>
            Gets a value indicating whether references
            should be ignored when auto mapping. True to ignore
            references, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.IncludePrivateMembers">
            <summary>
            Gets a value indicating if private
            member should be read from and written to.
            True to include private member, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.ReferenceHeaderPrefix">
            <summary>
            Gets a callback that will return the prefix for a reference header.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.MemberTypes">
            <summary>
            Gets the member types that are used when auto mapping.
            MemberTypes are flags, so you can choose more than one.
            Default is Properties.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.UseNewObjectForNullReferenceMembers">
            <summary>
            Gets a value indicating that during writing if a new 
            object should be created when a reference member is null.
            True to create a new object and use it's defaults for the
            fields, or false to leave the fields empty for all the
            reference member's member.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.DynamicPropertySort">
            <summary>
            Gets the comparer used to order the properties
            of dynamic objects when writing. The default is null,
            which will preserve the order the object properties
            were created with.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.IWriterConfiguration.ExceptionMessagesContainRawData">
            <summary>
            A value indicating if exception messages contain raw CSV data.
            <c>true</c> if exception contain raw CSV data, otherwise <c>false</c>.
            Default is <c>true</c>.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.IWriterConfiguration.Validate">
            <summary>
            Validates the configuration.
            </summary>
        </member>
        <member name="T:CsvHelper.Configuration.MemberMap">
            <summary>
            Mapping info for a member to a CSV field.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMap.Data">
            <summary>
            Gets the member map data.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMap.TypeConverterOption">
            <summary>
            Type converter options.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.CreateGeneric(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Creates an instance of <see cref="T:CsvHelper.Configuration.MemberMap"/> using the given Type and <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="classType">Type of the class the member being mapped belongs to.</param>
            <param name="member">The member being mapped.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.Name(System.String[])">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
            <param name="names">The possible names of the CSV field.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.NameIndex(System.Int32)">
            <summary>
            When reading, is used to get the 
            index of the name used when there 
            are multiple names that are the same.
            </summary>
            <param name="index">The index of the name.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.Index(System.Int32,System.Int32)">
            <summary>
            When reading, is used to get the field at
            the given index. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
            <param name="index">The index of the CSV field.</param>
            <param name="indexEnd">The end index used when mapping to an <see cref="T:System.Collections.IEnumerable"/> member.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.Ignore">
            <summary>
            Ignore the member when reading and writing.
            If this member has already been mapped as a reference
            member, either by a class map, or by automapping, calling
            this method will not ignore all the child members down the
            tree that have already been mapped.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.Ignore(System.Boolean)">
            <summary>
            Ignore the member when reading and writing.
            If this member has already been mapped as a reference
            member, either by a class map, or by automapping, calling
            this method will not ignore all the child members down the
            tree that have already been mapped.
            </summary>
            <param name="ignore">True to ignore, otherwise false.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.Default(System.Object,System.Boolean)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty.
            </summary>
            <param name="defaultValue">The default value.</param>
            <param name="useOnConversionFailure">Use default on conversion failure.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.Constant(System.Object)">
            <summary>
            The constant value that will be used for every record when 
            reading and writing. This value will always be used no matter 
            what other mapping configurations are specified.
            </summary>
            <param name="constantValue">The constant value.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Specifies the <see cref="M:CsvHelper.Configuration.MemberMap.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <param name="typeConverter">The TypeConverter to use.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.TypeConverter``1">
            <summary>
            Specifies the <see cref="M:CsvHelper.Configuration.MemberMap.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <typeparam name="TConverter">The <see cref="T:System.Type"/> of the 
            <see cref="M:CsvHelper.Configuration.MemberMap.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)"/> to use.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.Optional">
            <summary>
            Ignore the member when reading if no matching field name can be found.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.Validate(CsvHelper.Validate)">
            <summary>
            Specifies an expression to be used to validate a field when reading.
            </summary>
            <param name="validateExpression"></param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap.Validate(CsvHelper.Validate,CsvHelper.ValidateMessage)">
            <summary>
            Specifies an expression to be used to validate a field when reading along with specified exception message.
            </summary>
            <param name="validateExpression"></param>
            <param name="validateMessageExpression"></param>
        </member>
        <member name="T:CsvHelper.Configuration.MemberMapCollection">
            <summary>
            A collection that holds <see cref="T:CsvHelper.Configuration.MemberMap"/>'s.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.MemberMapCollection"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.#ctor(System.Collections.Generic.IComparer{CsvHelper.Configuration.MemberMap})">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.MemberMapCollection"/> class.
            </summary>
            <param name="comparer">The comparer to use when sorting the member maps.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.Add(CsvHelper.Configuration.MemberMap)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.AddRange(System.Collections.Generic.ICollection{CsvHelper.Configuration.MemberMap})">
            <summary>
            Adds a range of items to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. 
                            </exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.Contains(CsvHelper.Configuration.MemberMap)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.CopyTo(CsvHelper.Configuration.MemberMap[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.Remove(CsvHelper.Configuration.MemberMap)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.IndexOf(CsvHelper.Configuration.MemberMap)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.Insert(System.Int32,CsvHelper.Configuration.MemberMap)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.
                            </param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The member is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Finds the <see cref="T:CsvHelper.Configuration.MemberMap"/> using the given member expression.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> the member is on.</typeparam>
            <param name="expression">The member expression.</param>
            <returns>The <see cref="T:CsvHelper.Configuration.MemberMap"/> for the given expression, or null if not found.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.Find(System.Reflection.MemberInfo)">
            <summary>
            Finds the <see cref="T:CsvHelper.Configuration.MemberMap"/> using the given member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:CsvHelper.Configuration.MemberMap"/> for the given expression, or null if not found.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapCollection.AddMembers(CsvHelper.Configuration.ClassMap)">
            <summary>
            Adds the members from the mapping. This will recursively
            traverse the mapping tree and add all members for
            reference maps.
            </summary>
            <param name="mapping">The mapping where the members are added from.</param>
        </member>
        <member name="T:CsvHelper.Configuration.MemberMapComparer">
            <summary>
            Used to compare <see cref="T:CsvHelper.Configuration.MemberMap"/>s.
            The order is by field index ascending. Any
            fields that don't have an index are pushed
            to the bottom.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            Value 
                                Condition 
                                Less than zero 
                            <paramref name="x"/> is less than <paramref name="y"/>. 
                                Zero 
                            <paramref name="x"/> equals <paramref name="y"/>. 
                                Greater than zero 
                            <paramref name="x"/> is greater than <paramref name="y"/>. 
            </returns>
            <param name="x">The first object to compare. 
                            </param><param name="y">The second object to compare. 
                            </param><exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.
                                -or- 
                            <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapComparer.Compare(CsvHelper.Configuration.MemberMap,CsvHelper.Configuration.MemberMap)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            Value 
                                Condition 
                                Less than zero
                            <paramref name="x"/> is less than <paramref name="y"/>.
                                Zero
                            <paramref name="x"/> equals <paramref name="y"/>.
                                Greater than zero
                            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare.
                            </param><param name="y">The second object to compare.
                            </param>
        </member>
        <member name="T:CsvHelper.Configuration.MemberMapData">
            <summary>
            The configured data for the member map.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.Type">
            <summary>
            Gets the member type.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.Member">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> that the data
            is associated with.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.Names">
            <summary>
            Gets the list of column names.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.NameIndex">
            <summary>
            Gets or sets the index of the name.
            This is used if there are multiple
            columns with the same names.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.IsNameSet">
            <summary>
            Gets or sets a value indicating if the name was
            explicitly set. True if it was explicitly set,
            otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.Index">
            <summary>
            Gets or sets the column index.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.IndexEnd">
            <summary>
            Gets or sets the index end. The Index end is used to specify a range for use
            with a collection member. Index is used as the start of the range, and IndexEnd
            is the end of the range.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.IsIndexSet">
            <summary>
            Gets or sets a value indicating if the index was
            explicitly set. True if it was explicitly set,
            otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.TypeConverter">
            <summary>
            Gets or sets the type converter.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.TypeConverterOptions">
            <summary>
            Gets or sets the type converter options.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.Ignore">
            <summary>
            Gets or sets a value indicating whether the field should be ignored.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.Default">
            <summary>
            Gets or sets the default value used when a CSV field is empty.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.IsDefaultSet">
            <summary>
            Gets or sets a value indicating whether this instance is default value set.
            the default value was explicitly set. True if it was
            explicitly set, otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.UseDefaultOnConversionFailure">
            <summary>
            Gets or setse a value indicating if the default value should be used when
            a type conversion failure happens. <c>true</c> to use the default, otherwise
            <c>false</c>.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.Constant">
            <summary>
            Gets or sets the constant value used for every record.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.IsConstantSet">
            <summary>
            Gets or sets a value indicating if a constant was explicitly set.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.ReadingConvertExpression">
            <summary>
            Gets or sets the expression used to convert data in the
            row to the member.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.WritingConvertExpression">
            <summary>
            Gets or sets the expression to be used to convert the object
            to a field.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.ValidateExpression">
            <summary>
            Gets or sets the expression use to validate a field.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.ValidateMessageExpression">
            <summary>
            Gets or sets the expression used to get the validation message when validation fails.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberMapData.IsOptional">
            <summary>
            Gets or sets a value indicating if a field is optional.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapData.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.MemberMapData"/> class.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="T:CsvHelper.Configuration.MemberMapTypeConverterOption">
            <summary>
            Sets type converter options on a member map.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapTypeConverterOption.#ctor(CsvHelper.Configuration.MemberMap)">
            <summary>
            Creates a new instance using the given <see cref="T:CsvHelper.Configuration.MemberMap"/>.
            </summary>
            <param name="memberMap">The member map the options are being applied to.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapTypeConverterOption.CultureInfo(System.Globalization.CultureInfo)">
            <summary>
            The <see cref="M:CsvHelper.Configuration.MemberMapTypeConverterOption.CultureInfo(System.Globalization.CultureInfo)"/> used when type converting.
            This will override the global <see cref="P:CsvHelper.Configuration.CsvConfiguration.CultureInfo"/>
            setting.
            </summary>
            <param name="cultureInfo">The culture info.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapTypeConverterOption.DateTimeStyles(System.Globalization.DateTimeStyles)">
            <summary>
            The <see cref="M:CsvHelper.Configuration.MemberMapTypeConverterOption.DateTimeStyles(System.Globalization.DateTimeStyles)"/> to use when type converting.
            This is used when doing any <see cref="T:System.DateTime"/> conversions.
            </summary>
            <param name="dateTimeStyle">The date time style.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapTypeConverterOption.TimespanStyles(System.Globalization.TimeSpanStyles)">
            <summary>
            The <see cref="T:System.Globalization.TimeSpanStyles"/> to use when type converting.
            This is used when doing <see cref="T:System.TimeSpan"/> converting.
            </summary>
            <param name="timeSpanStyles">The time span styles.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapTypeConverterOption.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            The <see cref="M:CsvHelper.Configuration.MemberMapTypeConverterOption.NumberStyles(System.Globalization.NumberStyles)"/> to use when type converting.
            This is used when doing any number conversions.
            </summary>
            <param name="numberStyle"></param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapTypeConverterOption.Format(System.String[])">
            <summary>
            The string format to be used when type converting.
            </summary>
            <param name="formats">The format.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapTypeConverterOption.UriKind(System.UriKind)">
            <summary>
            The <see cref="M:CsvHelper.Configuration.MemberMapTypeConverterOption.UriKind(System.UriKind)"/> to use when converting.
            This is used when doing <see cref="T:System.Uri"/> conversions.
            </summary>
            <param name="uriKind">Kind of the URI.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapTypeConverterOption.BooleanValues(System.Boolean,System.Boolean,System.String[])">
            <summary>
            The string values used to represent a boolean when converting.
            </summary>
            <param name="isTrue">A value indicating whether true values or false values are being set.</param>
            <param name="clearValues">A value indication if the current values should be cleared before adding the new ones.</param>
            <param name="booleanValues">The string boolean values.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapTypeConverterOption.NullValues(System.String[])">
            <summary>
            The string values used to represent null when converting.
            </summary>
            <param name="nullValues">The values that represent null.</param>
            <returns></returns>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapTypeConverterOption.NullValues(System.Boolean,System.String[])">
            <summary>
            The string values used to represent null when converting.
            </summary>
            <param name="clearValues">A value indication if the current values should be cleared before adding the new ones.</param>
            <param name="nullValues">The values that represent null.</param>
            <returns></returns>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMapTypeConverterOption.EnumIgnoreCase(System.Boolean)">
            <summary>
            Ignore case when parsing enums.
            </summary>
            <param name="ignoreCase"><c>true</c> to ignore case, otherwise <c>false</c>.</param>
        </member>
        <member name="T:CsvHelper.Configuration.MemberMap`2">
            <summary>
            Mapping info for a member to a CSV field.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Creates a new <see cref="T:CsvHelper.Configuration.MemberMap"/> instance using the specified member.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.Name(System.String[])">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
            <param name="names">The possible names of the CSV field.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.NameIndex(System.Int32)">
            <summary>
            When reading, is used to get the 
            index of the name used when there 
            are multiple names that are the same.
            </summary>
            <param name="index">The index of the name.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.Index(System.Int32,System.Int32)">
            <summary>
            When reading, is used to get the field at
            the given index. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
            <param name="index">The index of the CSV field.</param>
            <param name="indexEnd">The end index used when mapping to an <see cref="T:System.Collections.IEnumerable"/> member.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.Ignore">
            <summary>
            Ignore the member when reading and writing.
            If this member has already been mapped as a reference
            member, either by a class map, or by automapping, calling
            this method will not ignore all the child members down the
            tree that have already been mapped.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.Ignore(System.Boolean)">
            <summary>
            Ignore the member when reading and writing.
            If this member has already been mapped as a reference
            member, either by a class map, or by automapping, calling
            this method will not ignore all the child members down the
            tree that have already been mapped.
            </summary>
            <param name="ignore">True to ignore, otherwise false.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.Default(`1,System.Boolean)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty.
            </summary>
            <param name="defaultValue">The default value.</param>
            <param name="useOnConversionFailure">Use default on conversion failure.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.Default(System.String,System.Boolean)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty. This value is not type checked
            and will use a <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> to convert
            the field. This could potentially have runtime errors.
            </summary>
            <param name="defaultValue">The default value.</param>
            <param name="useOnConversionFailure">Use default on conversion failure.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.Constant(`1)">
            <summary>
            The constant value that will be used for every record when 
            reading and writing. This value will always be used no matter 
            what other mapping configurations are specified.
            </summary>
            <param name="constantValue">The constant value.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Specifies the <see cref="M:CsvHelper.Configuration.MemberMap`2.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <param name="typeConverter">The TypeConverter to use.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.TypeConverter``1">
            <summary>
            Specifies the <see cref="M:CsvHelper.Configuration.MemberMap`2.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <typeparam name="TConverter">The <see cref="T:System.Type"/> of the 
            <see cref="M:CsvHelper.Configuration.MemberMap`2.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)"/> to use.</typeparam>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.Convert(CsvHelper.ConvertFromString{`1})">
            <summary>
            Specifies an expression to be used to convert data in the
            row to the member.
            </summary>
            <param name="convertFromStringFunction">The convert expression.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.Convert(CsvHelper.ConvertToString{`0})">
            <summary>
            Specifies an expression to be used to convert the object
            to a field.
            </summary>
            <param name="convertToStringFunction">The convert expression.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.Optional">
            <summary>
            Ignore the member when reading if no matching field name can be found.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.Validate(CsvHelper.Validate)">
            <summary>
            Specifies an expression to be used to validate a field when reading.
            </summary>
            <param name="validateExpression"></param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberMap`2.Validate(CsvHelper.Validate,CsvHelper.ValidateMessage)">
            <summary>
            Specifies an expression to be used to validate a field when reading along with specified exception message.
            </summary>
            <param name="validateExpression"></param>
            <param name="validateMessageExpression"></param>
        </member>
        <member name="T:CsvHelper.Configuration.MemberNameCollection">
            <summary>
            A collection that holds member names.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberNameCollection.Item(System.Int32)">
            <summary>
            Gets the name at the given index. If a prefix is set,
            it will be prepended to the name.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:CsvHelper.Configuration.MemberNameCollection.Prefix">
            <summary>
            Gets the prefix to use for each name.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberNameCollection.Names">
            <summary>
            Gets the raw list of names without
            the prefix being prepended.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberNameCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberNameCollection.Add(System.String)">
            <summary>
            Adds the given name to the collection.
            </summary>
            <param name="name">The name to add.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberNameCollection.Clear">
            <summary>
            Clears all names from the collection.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberNameCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a range of names to the collection.
            </summary>
            <param name="names">The range to add.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberNameCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CsvHelper.Configuration.MemberNameCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:CsvHelper.Configuration.MemberReferenceMap">
            <summary>
            Mapping info for a reference member mapping to a class.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberReferenceMap.Data">
            <summary>
            Gets the member reference map data.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMap.#ctor(System.Reflection.MemberInfo,CsvHelper.Configuration.ClassMap)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.MemberReferenceMap"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="mapping">The <see cref="T:CsvHelper.Configuration.ClassMap"/> to use for the reference map.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMap.Prefix(System.String,System.Boolean)">
            <summary>
            Appends a prefix to the header of each field of the reference member.
            </summary>
            <param name="prefix">The prefix to be prepended to headers of each reference member.</param>
            <param name="inherit">Inherit parent prefixes.</param>
            <returns>The current <see cref="T:CsvHelper.Configuration.MemberReferenceMap" /></returns>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMap.GetMaxIndex">
            <summary>
            Get the largest index for the
            members and references.
            </summary>
            <returns>The max index.</returns>
        </member>
        <member name="T:CsvHelper.Configuration.MemberReferenceMapCollection">
            <summary>
            A collection that holds <see cref="T:CsvHelper.Configuration.MemberReferenceMap"/>'s.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberReferenceMapCollection.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:CsvHelper.Configuration.MemberReferenceMapCollection.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:CsvHelper.Configuration.MemberReferenceMapCollection.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <returns>The element at the specified index.</returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The member is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapCollection.Add(CsvHelper.Configuration.MemberReferenceMap)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapCollection.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapCollection.Contains(CsvHelper.Configuration.MemberReferenceMap)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapCollection.CopyTo(CsvHelper.Configuration.MemberReferenceMap[],System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapCollection.Remove(CsvHelper.Configuration.MemberReferenceMap)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapCollection.IndexOf(CsvHelper.Configuration.MemberReferenceMap)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapCollection.Insert(System.Int32,CsvHelper.Configuration.MemberReferenceMap)">
            <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapCollection.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapCollection.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Finds the <see cref="T:CsvHelper.Configuration.MemberReferenceMap"/> using the given member expression.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> the member is on.</typeparam>
            <param name="expression">The member expression.</param>
            <returns>The <see cref="T:CsvHelper.Configuration.MemberReferenceMap"/> for the given expression, or null if not found.</returns>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapCollection.Find(System.Reflection.MemberInfo)">
            <summary>
            Finds the <see cref="T:CsvHelper.Configuration.MemberReferenceMap"/> using the given member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:CsvHelper.Configuration.MemberReferenceMap"/> for the given expression, or null if not found.</returns>
        </member>
        <member name="T:CsvHelper.Configuration.MemberReferenceMapData">
            <summary>
            The configuration data for the reference map.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberReferenceMapData.Prefix">
            <summary>
            Gets or sets the header prefix to use.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberReferenceMapData.Inherit">
            <summary>
            Gets or sets a value indicating if a prefix should inherit its parent.
            <c>true</c> to inherit, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberReferenceMapData.Member">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> that the data
            is associated with.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.MemberReferenceMapData.Mapping">
            <summary>
            Gets the mapping this is a reference for.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.MemberReferenceMapData.#ctor(System.Reflection.MemberInfo,CsvHelper.Configuration.ClassMap)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.MemberReferenceMapData"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="mapping">The mapping this is a reference for.</param>
        </member>
        <member name="T:CsvHelper.Configuration.MemberTypes">
            <summary>
            Flags for the type of members that 
            can be used for auto mapping.
            </summary>
        </member>
        <member name="F:CsvHelper.Configuration.MemberTypes.None">
            <summary>
            No members. This is not a valid value
            and will cause an exception if used.
            </summary>
        </member>
        <member name="F:CsvHelper.Configuration.MemberTypes.Properties">
            <summary>
            Properties on a class.
            </summary>
        </member>
        <member name="F:CsvHelper.Configuration.MemberTypes.Fields">
            <summary>
            Fields on a class.
            </summary>
        </member>
        <member name="T:CsvHelper.Configuration.ParameterMap">
            <summary>
            Mapping for a constructor parameter.
            This may contain value type data, a constructor type map,
            or a reference map, depending on the type of the parameter.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMap.Data">
            <summary>
            Gets the parameter map data.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMap.TypeConverterOption">
            <summary>
            Type converter options.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMap.ConstructorTypeMap">
            <summary>
            Gets or sets the map for a constructor type.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMap.ReferenceMap">
            <summary>
            Gets or sets the map for a reference type.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMap.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Creates an instance of <see cref="T:CsvHelper.Configuration.ParameterMap"/> using
            the given information.
            </summary>
            <param name="parameter">The parameter being mapped.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMap.Name(System.String[])">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
            <param name="names">The possible names of the CSV field.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMap.NameIndex(System.Int32)">
            <summary>
            When reading, is used to get the 
            index of the name used when there 
            are multiple names that are the same.
            </summary>
            <param name="index">The index of the name.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMap.Index(System.Int32)">
            <summary>
            When reading, is used to get the field at
            the given index. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
            <param name="index">The index of the CSV field.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMap.Ignore">
            <summary>
            Ignore the parameter when reading and writing.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMap.Ignore(System.Boolean)">
            <summary>
            Ignore the parameter when reading and writing.
            </summary>
            <param name="ignore">True to ignore, otherwise false.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMap.Default(System.Object)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMap.Constant(System.Object)">
            <summary>
            The constant value that will be used for every record when 
            reading and writing. This value will always be used no matter 
            what other mapping configurations are specified.
            </summary>
            <param name="constantValue">The constant value.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMap.Optional">
            <summary>
            The field is optional.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMap.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Specifies the <see cref="M:CsvHelper.Configuration.ParameterMap.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)"/> to use
            when converting the parameter to and from a CSV field.
            </summary>
            <param name="typeConverter">The TypeConverter to use.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMap.TypeConverter``1">
            <summary>
            Specifies the <see cref="M:CsvHelper.Configuration.ParameterMap.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)"/> to use
            when converting the parameter to and from a CSV field.
            </summary>
            <typeparam name="TConverter">The <see cref="T:System.Type"/> of the 
            <see cref="M:CsvHelper.Configuration.ParameterMap.TypeConverter(CsvHelper.TypeConversion.ITypeConverter)"/> to use.</typeparam>
        </member>
        <member name="T:CsvHelper.Configuration.ParameterMapData">
            <summary>
            The constructor parameter data for the map.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.Parameter">
            <summary>
            Gets the <see cref="T:System.Reflection.ParameterInfo"/> that the data
            is associated with.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.Names">
            <summary>
            Gets the list of column names.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.NameIndex">
            <summary>
            Gets or sets the index of the name.
            This is used if there are multiple
            columns with the same names.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.IsNameSet">
            <summary>
            Gets or sets a value indicating if the name was
            explicitly set. True if it was explicitly set,
            otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.Index">
            <summary>
            Gets or sets the column index.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.IsIndexSet">
            <summary>
            Gets or sets a value indicating if the index was
            explicitly set. True if it was explicitly set,
            otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.TypeConverter">
            <summary>
            Gets or sets the type converter.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.TypeConverterOptions">
            <summary>
            Gets or sets the type converter options.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.Ignore">
            <summary>
            Gets or sets a value indicating whether the field should be ignored.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.Default">
            <summary>
            Gets or sets the default value used when a CSV field is empty.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.IsDefaultSet">
            <summary>
            Gets or sets a value indicating whether this instance is default value set.
            the default value was explicitly set. True if it was
            explicitly set, otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.Constant">
            <summary>
            Gets or sets the constant value used for every record.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.IsConstantSet">
            <summary>
            Gets or sets a value indicating if a constant was explicitly set.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterMapData.IsOptional">
            <summary>
            Gets or sets a value indicating if a field is optional.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMapData.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.ParameterMapData"/> class.
            </summary>
            <param name="parameter">The constructor parameter.</param>
        </member>
        <member name="T:CsvHelper.Configuration.ParameterMapTypeConverterOption">
            <summary>
            Sets type converter options on a parameter map.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.#ctor(CsvHelper.Configuration.ParameterMap)">
            <summary>
            Creates a new instance using the given <see cref="T:CsvHelper.Configuration.ParameterMap"/>.
            </summary>
            <param name="parameterMap">The member map the options are being applied to.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.CultureInfo(System.Globalization.CultureInfo)">
            <summary>
            The <see cref="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.CultureInfo(System.Globalization.CultureInfo)"/> used when type converting.
            This will override the global <see cref="P:CsvHelper.Configuration.CsvConfiguration.CultureInfo"/>
            setting.
            </summary>
            <param name="cultureInfo">The culture info.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.DateTimeStyles(System.Globalization.DateTimeStyles)">
            <summary>
            The <see cref="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.DateTimeStyles(System.Globalization.DateTimeStyles)"/> to use when type converting.
            This is used when doing any <see cref="T:System.DateTime"/> conversions.
            </summary>
            <param name="dateTimeStyle">The date time style.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.TimespanStyles(System.Globalization.TimeSpanStyles)">
            <summary>
            The <see cref="T:System.Globalization.TimeSpanStyles"/> to use when type converting.
            This is used when doing <see cref="T:System.TimeSpan"/> converting.
            </summary>
            <param name="timeSpanStyles">The time span styles.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            The <see cref="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.NumberStyles(System.Globalization.NumberStyles)"/> to use when type converting.
            This is used when doing any number conversions.
            </summary>
            <param name="numberStyle"></param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.Format(System.String[])">
            <summary>
            The string format to be used when type converting.
            </summary>
            <param name="formats">The format.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.UriKind(System.UriKind)">
            <summary>
            The <see cref="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.UriKind(System.UriKind)"/> to use when converting.
            This is used when doing <see cref="T:System.Uri"/> conversions.
            </summary>
            <param name="uriKind">Kind of the URI.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.BooleanValues(System.Boolean,System.Boolean,System.String[])">
            <summary>
            The string values used to represent a boolean when converting.
            </summary>
            <param name="isTrue">A value indicating whether true values or false values are being set.</param>
            <param name="clearValues">A value indication if the current values should be cleared before adding the new ones.</param>
            <param name="booleanValues">The string boolean values.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.NullValues(System.String[])">
            <summary>
            The string values used to represent null when converting.
            </summary>
            <param name="nullValues">The values that represent null.</param>
            <returns></returns>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterMapTypeConverterOption.NullValues(System.Boolean,System.String[])">
            <summary>
            The string values used to represent null when converting.
            </summary>
            <param name="clearValues">A value indication if the current values should be cleared before adding the new ones.</param>
            <param name="nullValues">The values that represent null.</param>
            <returns></returns>
        </member>
        <member name="T:CsvHelper.Configuration.ParameterReferenceMap">
            <summary>
            Mapping info for a reference parameter mapping to a class.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterReferenceMap.Data">
            <summary>
            Gets the parameter reference map data.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterReferenceMap.#ctor(System.Reflection.ParameterInfo,CsvHelper.Configuration.ClassMap)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.ParameterReferenceMap"/> class.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="mapping">The <see cref="T:CsvHelper.Configuration.ClassMap"/> to use for the reference map.</param>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterReferenceMap.Prefix(System.String,System.Boolean)">
            <summary>
            Appends a prefix to the header of each field of the reference parameter.
            </summary>
            <param name="prefix">The prefix to be prepended to headers of each reference parameter.</param>
            <param name="inherit">Inherit parent prefixes.</param>
            <returns>The current <see cref="T:CsvHelper.Configuration.ParameterReferenceMap" /></returns>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterReferenceMap.GetMaxIndex">
            <summary>
            Get the largest index for the
            members and references.
            </summary>
            <returns>The max index.</returns>
        </member>
        <member name="T:CsvHelper.Configuration.ParameterReferenceMapData">
            <summary>
            The configuration data for the reference map.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterReferenceMapData.Prefix">
            <summary>
            Gets or sets the header prefix to use.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterReferenceMapData.Inherit">
            <summary>
            Gets or sets a value indicating if a prefix should inherit its parent.
            <c>true</c> to inherit, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterReferenceMapData.Parameter">
            <summary>
            Gets the <see cref="T:System.Reflection.ParameterInfo"/> that the data
            is associated with.
            </summary>
        </member>
        <member name="P:CsvHelper.Configuration.ParameterReferenceMapData.Mapping">
            <summary>
            Gets the mapping this is a reference for.
            </summary>
        </member>
        <member name="M:CsvHelper.Configuration.ParameterReferenceMapData.#ctor(System.Reflection.ParameterInfo,CsvHelper.Configuration.ClassMap)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.Configuration.ParameterReferenceMapData"/> class.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="mapping">The mapping this is a reference for.</param>
        </member>
        <member name="T:CsvHelper.Configuration.TrimOptions">
            <summary>
            Options for trimming of fields.
            </summary>
        </member>
        <member name="F:CsvHelper.Configuration.TrimOptions.None">
            <summary>
            No trimming.
            </summary>
        </member>
        <member name="F:CsvHelper.Configuration.TrimOptions.Trim">
            <summary>
            Trims the whitespace around a field.
            </summary>
        </member>
        <member name="F:CsvHelper.Configuration.TrimOptions.InsideQuotes">
            <summary>
            Trims the whitespace inside of quotes around a field.
            </summary>
        </member>
        <member name="T:CsvHelper.CsvContext">
            <summary>
            Share state for CsvHelper.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvContext.TypeConverterOptionsCache">
            <summary>
            Gets or sets the <see cref="P:CsvHelper.CsvContext.TypeConverterOptionsCache"/>.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvContext.TypeConverterCache">
            <summary>
            Gets or sets the <see cref="P:CsvHelper.CsvContext.TypeConverterOptionsCache"/>.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvContext.Maps">
            <summary>
            The configured <see cref="T:CsvHelper.Configuration.ClassMap"/>s.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvContext.Parser">
            <summary>
            Gets the parser.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvContext.Reader">
            <summary>
            Gets the reader.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvContext.Writer">
            <summary>
            Gets the writer.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvContext.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvContext.#ctor(CsvHelper.IReader)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvContext"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper.CsvContext.#ctor(CsvHelper.IParser)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvContext"/> class.
            </summary>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:CsvHelper.CsvContext.#ctor(CsvHelper.IWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvContext"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper.CsvContext.#ctor(CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvContext"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper.CsvContext.RegisterClassMap``1">
            <summary>
            Use a <see cref="T:CsvHelper.Configuration.ClassMap`1" /> to configure mappings.
            When using a class map, no members are mapped by default.
            Only member specified in the mapping are used.
            </summary>
            <typeparam name="TMap">The type of mapping class to use.</typeparam>
        </member>
        <member name="M:CsvHelper.CsvContext.RegisterClassMap(System.Type)">
            <summary>
            Use a <see cref="T:CsvHelper.Configuration.ClassMap`1" /> to configure mappings.
            When using a class map, no members are mapped by default.
            Only members specified in the mapping are used.
            </summary>
            <param name="classMapType">The type of mapping class to use.</param>
        </member>
        <member name="M:CsvHelper.CsvContext.RegisterClassMap(CsvHelper.Configuration.ClassMap)">
            <summary>
            Registers the class map.
            </summary>
            <param name="map">The class map to register.</param>
        </member>
        <member name="M:CsvHelper.CsvContext.UnregisterClassMap``1">
            <summary>
            Unregisters the class map.
            </summary>
            <typeparam name="TMap">The map type to unregister.</typeparam>
        </member>
        <member name="M:CsvHelper.CsvContext.UnregisterClassMap(System.Type)">
            <summary>
            Unregisters the class map.
            </summary>
            <param name="classMapType">The map type to unregister.</param>
        </member>
        <member name="M:CsvHelper.CsvContext.UnregisterClassMap">
            <summary>
            Unregisters all class maps.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvContext.AutoMap``1">
            <summary>
            Generates a <see cref="T:CsvHelper.Configuration.ClassMap"/> for the type.
            </summary>
            <typeparam name="T">The type to generate the map for.</typeparam>
            <returns>The generate map.</returns>
        </member>
        <member name="M:CsvHelper.CsvContext.AutoMap(System.Type)">
            <summary>
            Generates a <see cref="T:CsvHelper.Configuration.ClassMap"/> for the type.
            </summary>
            <param name="type">The type to generate for the map.</param>
            <returns>The generate map.</returns>
        </member>
        <member name="T:CsvHelper.CsvDataReader">
            <summary>
            Provides a means of reading a CSV file forward-only by using CsvReader.
            </summary>
            <seealso cref="T:System.Data.IDataReader" />
        </member>
        <member name="P:CsvHelper.CsvDataReader.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:CsvHelper.CsvDataReader.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:CsvHelper.CsvDataReader.Depth">
            <inheritdoc />
        </member>
        <member name="P:CsvHelper.CsvDataReader.IsClosed">
            <inheritdoc />
        </member>
        <member name="P:CsvHelper.CsvDataReader.RecordsAffected">
            <inheritdoc />
        </member>
        <member name="P:CsvHelper.CsvDataReader.FieldCount">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.#ctor(CsvHelper.CsvReader,System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvDataReader"/> class.
            </summary>
            <param name="csv">The CSV.</param>
            <param name="schemaTable">The DataTable representing the file schema.</param>
        </member>
        <member name="M:CsvHelper.CsvDataReader.Close">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.Dispose">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetBoolean(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetChar(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetData(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetDataTypeName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetDateTime(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetDecimal(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetDouble(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetFieldType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetFloat(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetGuid(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetOrdinal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetSchemaTable">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetString(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetValue(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.GetValues(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.IsDBNull(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.NextResult">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.CsvDataReader.Read">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.CsvHelperException">
            <summary>
            Represents errors that occur in CsvHelper.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvHelperException.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor">
            <summary>
            Initializes a new instance of the CsvHelperException class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CsvHelperException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CsvHelperException class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor(CsvHelper.CsvContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvHelperException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor(CsvHelper.CsvContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvHelperException"/> class
            with a specified error message.
            </summary>
            <param name="context">The context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.CsvHelperException.#ctor(CsvHelper.CsvContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvHelperException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper.CsvMode">
            <summary>
            Mode to use when parsing and writing.
            </summary>
        </member>
        <member name="F:CsvHelper.CsvMode.RFC4180">
            <summary>
            Uses RFC 4180 format (default).
            If a field contains a <see cref="P:CsvHelper.Configuration.CsvConfiguration.Delimiter"/> or <see cref="P:CsvHelper.Configuration.CsvConfiguration.NewLine"/>,
            it is wrapped in <see cref="P:CsvHelper.Configuration.CsvConfiguration.Quote"/>s.
            If quoted field contains a <see cref="P:CsvHelper.Configuration.CsvConfiguration.Quote"/>, it is preceded by <see cref="P:CsvHelper.Configuration.CsvConfiguration.Escape"/>.
            </summary>
        </member>
        <member name="F:CsvHelper.CsvMode.Escape">
            <summary>
            Uses escapes.
            If a field contains a <see cref="P:CsvHelper.Configuration.CsvConfiguration.Delimiter"/>, <see cref="P:CsvHelper.Configuration.CsvConfiguration.NewLine"/>,
            or <see cref="P:CsvHelper.Configuration.CsvConfiguration.Escape"/>, it is preceded by <see cref="P:CsvHelper.Configuration.CsvConfiguration.Escape"/>.
            Newline defaults to \n.
            </summary>
        </member>
        <member name="F:CsvHelper.CsvMode.NoEscape">
            <summary>
            Doesn't use quotes or escapes.
            This will ignore quoting and escape characters. This means a field cannot contain a
            <see cref="P:CsvHelper.Configuration.CsvConfiguration.Delimiter"/>, <see cref="P:CsvHelper.Configuration.CsvConfiguration.Quote"/>, or
            <see cref="P:CsvHelper.Configuration.CsvConfiguration.NewLine"/>, as they cannot be escaped.
            </summary>
        </member>
        <member name="T:CsvHelper.CsvParser">
            <summary>
            Parses a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParser.CharCount">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvParser.ByteCount">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvParser.Row">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvParser.Record">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvParser.RawRecord">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvParser.Count">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvParser.RawRow">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvParser.Delimiter">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvParser.Context">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvParser.Configuration">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvParser.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvParser.#ctor(System.IO.TextReader,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvParser"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="culture">The culture.</param>
            <param name="leaveOpen">if set to <c>true</c> [leave open].</param>
        </member>
        <member name="M:CsvHelper.CsvParser.#ctor(System.IO.TextReader,CsvHelper.Configuration.IParserConfiguration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvParser"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="configuration">The configuration.</param>
            <param name="leaveOpen">if set to <c>true</c> [leave open].</param>
        </member>
        <member name="M:CsvHelper.CsvParser.Read">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvParser.ReadAsync">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvParser.ProcessRFC4180Field(System.Int32,System.Int32,System.Int32)">
            <summary>
            Processes a field that complies with RFC4180.
            </summary>
            <param name="start">The start index of the field.</param>
            <param name="length">The length of the field.</param>
            <param name="quoteCount">The number of counted quotes.</param>
            <returns>The processed field.</returns>
        </member>
        <member name="M:CsvHelper.CsvParser.ProcessRFC4180BadField(System.Int32,System.Int32)">
            <summary>
            Processes a field that does not comply with RFC4180.
            </summary>
            <param name="start">The start index of the field.</param>
            <param name="length">The length of the field.</param>
            <returns>The processed field.</returns>
        </member>
        <member name="M:CsvHelper.CsvParser.ProcessEscapeField(System.Int32,System.Int32)">
            <summary>
            Processes an escaped field.
            </summary>
            <param name="start">The start index of the field.</param>
            <param name="length">The length of the field.</param>
            <returns>The processed field.</returns>
        </member>
        <member name="M:CsvHelper.CsvParser.ProcessNoEscapeField(System.Int32,System.Int32)">
            <inheritdoc/>
            <summary>
            Processes an non-escaped field.
            </summary>
            <param name="start">The start index of the field.</param>
            <param name="length">The length of the field.</param>
            <returns>The processed field.</returns>
        </member>
        <member name="M:CsvHelper.CsvParser.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvParser.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">Indicates if the object is being disposed.</param>
        </member>
        <member name="T:CsvHelper.CsvParser.ProcessedField">
            <summary>
            Processes a raw field based on configuration.
            This will remove quotes, remove escapes, and trim if configured to.
            </summary>
        </member>
        <member name="F:CsvHelper.CsvParser.ProcessedField.Start">
            <summary>
            The start of the field in the buffer.
            </summary>
        </member>
        <member name="F:CsvHelper.CsvParser.ProcessedField.Length">
            <summary>
            The length of the field in the buffer.
            </summary>
        </member>
        <member name="F:CsvHelper.CsvParser.ProcessedField.Buffer">
            <summary>
            The buffer that contains the field.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvParser.ProcessedField.#ctor(System.Int32,System.Int32,System.Char[])">
            <summary>
            Creates a new instance of ProcessedField.
            </summary>
            <param name="start">The start of the field in the buffer.</param>
            <param name="length">The length of the field in the buffer.</param>
            <param name="buffer">The buffer that contains the field.</param>
        </member>
        <member name="F:CsvHelper.CsvParser.Field.Start">
            <summary>
            Starting position of the field.
            This is an offset from <see cref="F:CsvHelper.CsvParser.rowStartPosition"/>.
            </summary>
        </member>
        <member name="T:CsvHelper.CsvReader">
            <summary>
            Reads data that was parsed from <see cref="T:CsvHelper.IParser" />.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.ColumnCount">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvReader.CurrentIndex">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvReader.HeaderRecord">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvReader.Context">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvReader.Configuration">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvReader.Parser">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.#ctor(System.IO.TextReader,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:System.IO.TextReader" />.
            </summary>
            <param name="reader">The reader.</param>
            <param name="culture">The culture.</param>
            <param name="leaveOpen"><c>true</c> to leave the <see cref="T:System.IO.TextReader"/> open after the <see cref="T:CsvHelper.CsvReader"/> object is disposed, otherwise <c>false</c>.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.#ctor(System.IO.TextReader,CsvHelper.Configuration.IReaderConfiguration,System.Boolean)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:System.IO.TextReader" /> and
            <see cref="T:CsvHelper.Configuration.CsvConfiguration" /> and <see cref="T:CsvHelper.CsvParser" /> as the default parser.
            </summary>
            <param name="reader">The reader.</param>
            <param name="configuration">The configuration.</param>
            <param name="leaveOpen"><c>true</c> to leave the <see cref="T:System.IO.TextReader"/> open after the <see cref="T:CsvHelper.CsvReader"/> object is disposed, otherwise <c>false</c>.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.#ctor(CsvHelper.IParser)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:CsvHelper.IParser" />.
            </summary>
            <param name="parser">The <see cref="T:CsvHelper.IParser" /> used to parse the CSV file.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.ReadHeader">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.ValidateHeader``1">
            <summary>
            Validates the header to be of the given type.
            </summary>
            <typeparam name="T">The expected type of the header</typeparam>
        </member>
        <member name="M:CsvHelper.CsvReader.ValidateHeader(System.Type)">
            <summary>
            Validates the header to be of the given type.
            </summary>
            <param name="type">The expected type of the header.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.ValidateHeader(CsvHelper.Configuration.ClassMap,System.Collections.Generic.List{CsvHelper.InvalidHeader})">
            <summary>
            Validates the header to be of the given type.
            </summary>
            <param name="map">The mapped classes.</param>
            <param name="invalidHeaders">The invalid headers.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.Read">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.ReadAsync">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvReader.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvReader.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvReader.Item(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Type,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Type,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Type,System.String,CsvHelper.TypeConversion.ITypeConverter)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Type,System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.String,CsvHelper.TypeConversion.ITypeConverter)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``2(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``2(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``2(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField(System.Type,System.Int32,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField(System.Type,System.String,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField(System.Type,System.String,System.Int32,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField(System.Type,System.Int32,CsvHelper.TypeConversion.ITypeConverter,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField(System.Type,System.String,CsvHelper.TypeConversion.ITypeConverter,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField(System.Type,System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.String,System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.Int32,CsvHelper.TypeConversion.ITypeConverter,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.String,CsvHelper.TypeConversion.ITypeConverter,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``2(System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``2(System.String,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``2(System.String,System.Int32,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecord``1">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecord``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecord(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecords``1">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecords``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecords(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.EnumerateRecords``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecordsAsync``1(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecordsAsync``1(``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecordsAsync(System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.EnumerateRecordsAsync``1(``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetFieldIndex(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the index of the field with the given name.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="index">The index of the field.</param>
            <param name="isTryGet">Indicates if a TryGet is executed.</param>
            <returns>The index of the field.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetFieldIndex(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the index of the field with the given name.
            </summary>
            <param name="names">The names of the field.</param>
            <param name="index">The index of the field.</param>
            <param name="isTryGet">Indicates if a TryGet is executed.</param>
            <param name="isOptional">Indicates if the field is optional.</param>
            <returns>The index of the field.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.CanRead(CsvHelper.Configuration.MemberMap)">
            <summary>
            Indicates if values can be read.
            </summary>
            <param name="memberMap">The member map.</param>
            <returns>True if values can be read.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.CanRead(CsvHelper.Configuration.MemberReferenceMap)">
            <summary>
            Indicates if values can be read.
            </summary>
            <param name="memberReferenceMap">The member reference map.</param>
            <returns>True if values can be read.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvReader.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">Indicates if the object is being disposed.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.CheckHasBeenRead">
            <summary>
            Checks if the file has been read.
            </summary>
            <exception cref="T:CsvHelper.ReaderException">Thrown when the file has not yet been read.</exception>
        </member>
        <member name="M:CsvHelper.CsvReader.ParseNamedIndexes">
            <summary>
            Parses the named indexes.
            </summary>
            <exception cref="T:CsvHelper.ReaderException">Thrown when no header record was found.</exception>
        </member>
        <member name="T:CsvHelper.CsvWriter">
            <summary>
            Used to write CSV files.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvWriter.HeaderRecord">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvWriter.Row">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvWriter.Index">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvWriter.Context">
            <inheritdoc/>
        </member>
        <member name="P:CsvHelper.CsvWriter.Configuration">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.#ctor(System.IO.TextWriter,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
            <param name="culture">The culture.</param>
            <param name="leaveOpen"><c>true</c> to leave the <see cref="T:System.IO.TextWriter"/> open after the <see cref="T:CsvHelper.CsvWriter"/> object is disposed, otherwise <c>false</c>.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.#ctor(System.IO.TextWriter,CsvHelper.Configuration.IWriterConfiguration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.CsvWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
            <param name="configuration">The configuration.</param>
            <param name="leaveOpen"><c>true</c> to leave the <see cref="T:System.IO.TextWriter"/> open after the <see cref="T:CsvHelper.CsvWriter"/> object is disposed, otherwise <c>false</c>.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteConvertedField(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField``1(``0,CsvHelper.TypeConversion.ITypeConverter)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField``2(``0)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteComment(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteHeader``1">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteHeader(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteDynamicHeader(System.Dynamic.IDynamicMetaObjectProvider)">
            <summary>
            Writes a dynamic header record.
            </summary>
            <param name="record">The header record to write.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when no record is passed.</exception>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteRecord``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteRecords(System.Collections.IEnumerable)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteRecords``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteRecordsAsync(System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteRecordsAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteRecordsAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.NextRecord">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.NextRecordAsync">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.Flush">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.FlushAsync">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.FlushBuffer">
            <summary>
            Flushes the buffer.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriter.FlushBufferAsync">
            <summary>
            Asynchronously flushes the buffer.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriter.CanWrite(CsvHelper.Configuration.MemberMap)">
            <summary>
            Indicates if values can be written.
            </summary>
            <param name="memberMap">The member map.</param>
            <returns>True if values can be written.</returns>
        </member>
        <member name="M:CsvHelper.CsvWriter.GetTypeForRecord``1(``0)">
            <summary>
            Determines the type for the given record.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to determine the type of.</param>
            <returns>The System.Type for the record.</returns>
        </member>
        <member name="M:CsvHelper.CsvWriter.SanitizeForInjection(System.String)">
            <summary>
            Sanitizes the given field, before it is injected.
            </summary>
            <param name="field">The field to sanitize.</param>
            <returns>The sanitized field.</returns>
            <exception cref="T:CsvHelper.WriterException">Thrown when an injection character is found in the field.</exception>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteToBuffer(System.String)">
            <summary>
            Writes the given value to the buffer.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.CsvWriter.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">Indicates if the object is being disposed.</param>
        </member>
        <member name="T:CsvHelper.BadDataFound">
            <summary>
            Function that gets called when bad data is found.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:CsvHelper.BadDataFoundArgs">
            <summary>
            Information about the field that caused <see cref="T:CsvHelper.BadDataFound"/> to be called.
            </summary>
        </member>
        <member name="F:CsvHelper.BadDataFoundArgs.Field">
            <summary>
            The full field unedited.
            </summary>
        </member>
        <member name="F:CsvHelper.BadDataFoundArgs.RawRecord">
            <summary>
            The full row unedited.
            </summary>
        </member>
        <member name="F:CsvHelper.BadDataFoundArgs.Context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="M:CsvHelper.BadDataFoundArgs.#ctor(System.String,System.String,CsvHelper.CsvContext)">
            <summary>
            Creates a new instance of BadDataFoundArgs.
            </summary>
            <param name="field">The full field unedited.</param>
            <param name="rawRecord">The full row unedited.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:CsvHelper.ConvertFromString`1">
            <summary>
            Function that converts a string into an object.
            </summary>
            <typeparam name="TMember">The type of the member.</typeparam>
            <param name="args">The args.</param>
            <returns>The class object.</returns>
        </member>
        <member name="T:CsvHelper.ConvertFromStringArgs">
            <summary>
            <see cref="T:CsvHelper.ConvertFromString`1"/> args.
            </summary>
        </member>
        <member name="F:CsvHelper.ConvertFromStringArgs.Row">
            <summary>
            The row.
            </summary>
        </member>
        <member name="M:CsvHelper.ConvertFromStringArgs.#ctor(CsvHelper.IReaderRow)">
            <summary>
            Creates a new instance of ConvertFromStringArgs.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="T:CsvHelper.ConvertToString`1">
            <summary>
            Function that converts an object into a string.
            </summary>
            <typeparam name="TClass">The type of the class.</typeparam>
            <param name="args">The args.</param>
            <returns>The string.</returns>
        </member>
        <member name="T:CsvHelper.ConvertToStringArgs`1">
            <summary>
            <see cref="T:CsvHelper.ConvertToString`1"/> args.
            </summary>
            <typeparam name="TClass">The value to convert.</typeparam>
        </member>
        <member name="F:CsvHelper.ConvertToStringArgs`1.Value">
            <summary>
            The value to convert.
            </summary>
        </member>
        <member name="M:CsvHelper.ConvertToStringArgs`1.#ctor(`0)">
            <summary>
            Creates a new instance of ConvertToStringArgs{TClass}.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="T:CsvHelper.GetConstructor">
            <summary>
            Function that chooses the constructor to use for constructor mapping.
            </summary>
        </member>
        <member name="T:CsvHelper.GetConstructorArgs">
            <summary>
            GetConstructor args.
            </summary>
        </member>
        <member name="F:CsvHelper.GetConstructorArgs.ClassType">
            <summary>
            The class type.
            </summary>
        </member>
        <member name="M:CsvHelper.GetConstructorArgs.#ctor(System.Type)">
            <summary>
            Creates a new instance of GetConstructorArgs.
            </summary>
            <param name="classType">The class type.</param>
        </member>
        <member name="T:CsvHelper.Delegates.GetDelimiter">
            <summary>
            Function that resolves the delimiter from the given text.
            Returns null if no delimiter is found.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:CsvHelper.Delegates.GetDelimiterArgs">
            <summary>
            GetDelimiter args.
            </summary>
        </member>
        <member name="F:CsvHelper.Delegates.GetDelimiterArgs.Text">
            <summary>
            The text to resolve the delimiter from.
            </summary>
        </member>
        <member name="F:CsvHelper.Delegates.GetDelimiterArgs.Configuration">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="M:CsvHelper.Delegates.GetDelimiterArgs.#ctor(System.String,CsvHelper.Configuration.IParserConfiguration)">
            <summary>
            Creates an instance of GetDelimiterArgs.
            </summary>
            <param name="text">The text to resolve the delimiter from.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:CsvHelper.GetDynamicPropertyName">
            <summary>
            Function that gets the name to use for the property of the dynamic object.
            </summary>
        </member>
        <member name="T:CsvHelper.GetDynamicPropertyNameArgs">
            <summary>
            GetDynamicPropertyName args.
            </summary>
        </member>
        <member name="F:CsvHelper.GetDynamicPropertyNameArgs.FieldIndex">
            <summary>
            The field index.
            </summary>
        </member>
        <member name="F:CsvHelper.GetDynamicPropertyNameArgs.Context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="M:CsvHelper.GetDynamicPropertyNameArgs.#ctor(System.Int32,CsvHelper.CsvContext)">
            <summary>
            Creates a new instance of GetDynamicPropertyNameArgs.
            </summary>
            <param name="fieldIndex">The field index.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:CsvHelper.HeaderValidated">
            <summary>
            Function that is called when a header validation check is ran. The default function
            will throw a <see cref="T:CsvHelper.ValidationException"/> if there is no header for a given member mapping.
            You can supply your own function to do other things like logging the issue instead of throwing an exception.
            </summary>
        </member>
        <member name="T:CsvHelper.HeaderValidatedArgs">
            <summary>
            HeaderValidated args.
            </summary>
        </member>
        <member name="F:CsvHelper.HeaderValidatedArgs.InvalidHeaders">
            <summary>
            The invalid headers.
            </summary>
        </member>
        <member name="F:CsvHelper.HeaderValidatedArgs.Context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="M:CsvHelper.HeaderValidatedArgs.#ctor(CsvHelper.InvalidHeader[],CsvHelper.CsvContext)">
            <summary>
            Creates a new instance of HeaderValidatedArgs.
            </summary>
            <param name="invalidHeaders">The invalid headers.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:CsvHelper.MissingFieldFound">
            <summary>
            Function that is called when a missing field is found. The default function will
            throw a <see cref="T:CsvHelper.MissingFieldException"/>. You can supply your own function to do other things
            like logging the issue instead of throwing an exception.
            </summary>
        </member>
        <member name="T:CsvHelper.MissingFieldFoundArgs">
            <summary>
            MissingFieldFound args.
            </summary>
        </member>
        <member name="F:CsvHelper.MissingFieldFoundArgs.HeaderNames">
            <summary>
            The header names.
            </summary>
        </member>
        <member name="F:CsvHelper.MissingFieldFoundArgs.Index">
            <summary>
            The index.
            </summary>
        </member>
        <member name="F:CsvHelper.MissingFieldFoundArgs.Context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="M:CsvHelper.MissingFieldFoundArgs.#ctor(System.String[],System.Int32,CsvHelper.CsvContext)">
            <summary>
            Creates a new instance of MissingFieldFoundArgs.
            </summary>
            <param name="headerNames">The header names.</param>
            <param name="index">The index.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:CsvHelper.PrepareHeaderForMatch">
            <summary>
            Function that prepares the header field for matching against a member name.
            The header field and the member name are both ran through this function.
            You should do things like trimming, removing whitespace, removing underscores,
            and making casing changes to ignore case.
            </summary>
        </member>
        <member name="T:CsvHelper.PrepareHeaderForMatchArgs">
            <summary>
            PrepareHeaderForMatch args.
            </summary>
        </member>
        <member name="F:CsvHelper.PrepareHeaderForMatchArgs.Header">
            <summary>
            The header.
            </summary>
        </member>
        <member name="F:CsvHelper.PrepareHeaderForMatchArgs.FieldIndex">
            <summary>
            The field index.
            </summary>
        </member>
        <member name="M:CsvHelper.PrepareHeaderForMatchArgs.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of PrepareHeaderForMatchArgs.
            </summary>
            <param name="header">The header.</param>
            <param name="fieldIndex">The field index.</param>
        </member>
        <member name="T:CsvHelper.ReadingExceptionOccurred">
            <summary>
            Function that is called when a reading exception occurs.
            The default function will re-throw the given exception. If you want to ignore
            reading exceptions, you can supply your own function to do other things like
            logging the issue.
            </summary>
        </member>
        <member name="T:CsvHelper.ReadingExceptionOccurredArgs">
            <summary>
            ReadingExceptionOccurred args.
            </summary>
        </member>
        <member name="F:CsvHelper.ReadingExceptionOccurredArgs.Exception">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="M:CsvHelper.ReadingExceptionOccurredArgs.#ctor(CsvHelper.CsvHelperException)">
            <summary>
            Creates a new instance of ReadingExceptionOccurredArgs.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:CsvHelper.ReferenceHeaderPrefix">
            <summary>
            Function that will return the prefix for a reference header.
            </summary>
        </member>
        <member name="T:CsvHelper.ReferenceHeaderPrefixArgs">
            <summary>
            ReferenceHeaderPrefix args.
            </summary>
        </member>
        <member name="F:CsvHelper.ReferenceHeaderPrefixArgs.MemberType">
            <summary>
            The member type.
            </summary>
        </member>
        <member name="F:CsvHelper.ReferenceHeaderPrefixArgs.MemberName">
            <summary>
            The member name.
            </summary>
        </member>
        <member name="M:CsvHelper.ReferenceHeaderPrefixArgs.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of ReferenceHeaderPrefixArgs.
            </summary>
            <param name="memberType">The member type.</param>
            <param name="memberName">The member name.</param>
        </member>
        <member name="T:CsvHelper.ShouldQuote">
            <summary>
            Function that is used to determine if a field should get quoted when writing.
            </summary>
        </member>
        <member name="T:CsvHelper.ShouldQuoteArgs">
            <summary>
            ShouldQuote args.
            </summary>
        </member>
        <member name="F:CsvHelper.ShouldQuoteArgs.Field">
            <summary>
            The field.
            </summary>
        </member>
        <member name="F:CsvHelper.ShouldQuoteArgs.FieldType">
            <summary>
            The field type.
            </summary>
        </member>
        <member name="F:CsvHelper.ShouldQuoteArgs.Row">
            <summary>
            The row.
            </summary>
        </member>
        <member name="M:CsvHelper.ShouldQuoteArgs.#ctor(System.String,System.Type,CsvHelper.IWriterRow)">
            <summary>
            Creates a new instance of ShouldQuoteArgs.
            </summary>
            <param name="field">The field.</param>
            <param name="fieldType">The field type.</param>
            <param name="row">The row.</param>
        </member>
        <member name="T:CsvHelper.ShouldSkipRecord">
            <summary>
            Function that determines whether to skip the given record or not.
            </summary>
        </member>
        <member name="T:CsvHelper.ShouldSkipRecordArgs">
            <summary>
            ShouldSkipRecord args.
            </summary>
        </member>
        <member name="F:CsvHelper.ShouldSkipRecordArgs.Row">
            <summary>
            The record.
            </summary>
        </member>
        <member name="M:CsvHelper.ShouldSkipRecordArgs.#ctor(CsvHelper.IReaderRow)">
            <summary>
            Creates a new instance of ShouldSkipRecordArgs.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="T:CsvHelper.ShouldUseConstructorParameters">
            <summary>
            Function that determines if constructor parameters should be used to create
            the class instead of the default constructor and members.
            </summary>
        </member>
        <member name="T:CsvHelper.ShouldUseConstructorParametersArgs">
            <summary>
            ShouldUseConstructorParameters args.
            </summary>
        </member>
        <member name="F:CsvHelper.ShouldUseConstructorParametersArgs.ParameterType">
            <summary>
            The parameter type.
            </summary>
        </member>
        <member name="M:CsvHelper.ShouldUseConstructorParametersArgs.#ctor(System.Type)">
            <summary>
            Creates a new instance of ShouldUseConstructorParametersArgs.
            </summary>
            <param name="parameterType">The parameter type.</param>
        </member>
        <member name="T:CsvHelper.Validate">
            <summary>
            Function that validates a field.
            </summary>
            <param name="args">The args.</param>
            <returns><c>true</c> if the field is valid, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:CsvHelper.ValidateMessage">
            <summary>
            Function that gets the exception message when validation fails.
            </summary>
            <param name="args">The args.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="T:CsvHelper.ValidateArgs">
            <summary>
            Validate args.
            </summary>
        </member>
        <member name="F:CsvHelper.ValidateArgs.Field">
            <summary>
            The field.
            </summary>
        </member>
        <member name="F:CsvHelper.ValidateArgs.Row">
            <summary>
            The row.
            </summary>
        </member>
        <member name="M:CsvHelper.ValidateArgs.#ctor(System.String,CsvHelper.IReaderRow)">
            <summary>
            Creates a new instance of ValidateArgs.
            </summary>
            <param name="field">The field.</param>
            <param name="row">The row.</param>
        </member>
        <member name="T:CsvHelper.Expressions.DynamicRecordCreator">
            <summary>
            Creates dynamic records.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.DynamicRecordCreator.#ctor(CsvHelper.CsvReader)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper.Expressions.DynamicRecordCreator.CreateCreateRecordDelegate(System.Type)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Func`1"/>
            that will create a record of the given type using the current
            reader row.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="M:CsvHelper.Expressions.DynamicRecordCreator.CreateDynamicRecord">
            <summary>
            Creates a dynamic record of the current reader row.
            </summary>
        </member>
        <member name="T:CsvHelper.Expressions.DynamicRecordWriter">
            <summary>
            Write dynamic records.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.DynamicRecordWriter.#ctor(CsvHelper.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper.Expressions.DynamicRecordWriter.CreateWriteDelegate``1(``0)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Action`1"/>
            that will write the given record using the current writer row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="T:CsvHelper.Expressions.ExpandoObjectRecordWriter">
            <summary>
            Writes expando objects.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.ExpandoObjectRecordWriter.#ctor(CsvHelper.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper.Expressions.ExpandoObjectRecordWriter.CreateWriteDelegate``1(``0)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Action`1"/>
            that will write the given record using the current writer row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="T:CsvHelper.Expressions.ExpressionManager">
            <summary>
            Manages expression creation.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.ExpressionManager.#ctor(CsvHelper.CsvReader)">
            <summary>
            Initializes a new instance using the given reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper.Expressions.ExpressionManager.#ctor(CsvHelper.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper.Expressions.ExpressionManager.CreateConstructorArgumentExpressionsForMapping(CsvHelper.Configuration.ClassMap,System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>
            Creates the constructor arguments used to create a type.
            </summary>
            <param name="map">The mapping to create the arguments for.</param>
            <param name="argumentExpressions">The arguments that will be added to the mapping.</param>
        </member>
        <member name="M:CsvHelper.Expressions.ExpressionManager.CreateMemberAssignmentsForMapping(CsvHelper.Configuration.ClassMap,System.Collections.Generic.List{System.Linq.Expressions.MemberAssignment})">
            <summary>
            Creates the member assignments for the given <see cref="T:CsvHelper.Configuration.ClassMap"/>.
            </summary>
            <param name="mapping">The mapping to create the assignments for.</param>
            <param name="assignments">The assignments that will be added to from the mapping.</param>
        </member>
        <member name="M:CsvHelper.Expressions.ExpressionManager.CreateGetFieldExpression(CsvHelper.Configuration.MemberMap)">
            <summary>
            Creates an expression the represents getting the field for the given
            member and converting it to the member's type.
            </summary>
            <param name="memberMap">The mapping for the member.</param>
        </member>
        <member name="M:CsvHelper.Expressions.ExpressionManager.CreateGetMemberExpression(System.Linq.Expressions.Expression,CsvHelper.Configuration.ClassMap,CsvHelper.Configuration.MemberMap)">
            <summary>
            Creates a member expression for the given member on the record.
            This will recursively traverse the mapping to find the member
            and create a safe member accessor for each level as it goes.
            </summary>
            <param name="recordExpression">The current member expression.</param>
            <param name="mapping">The mapping to look for the member to map on.</param>
            <param name="memberMap">The member map to look for on the mapping.</param>
            <returns>An Expression to access the given member.</returns>
        </member>
        <member name="M:CsvHelper.Expressions.ExpressionManager.CreateInstanceAndAssignMembers(System.Type,System.Collections.Generic.List{System.Linq.Expressions.MemberAssignment})">
            <summary>
            Creates an instance of the given type using <see cref="T:CsvHelper.IObjectResolver"/>, then assigns
            the given member assignments to that instance.
            </summary>
            <param name="recordType">The type of the record we're creating.</param>
            <param name="assignments">The member assignments that will be assigned to the created instance.</param>
            <returns>A <see cref="T:System.Linq.Expressions.BlockExpression"/> representing the instance creation and assignments.</returns>
        </member>
        <member name="M:CsvHelper.Expressions.ExpressionManager.CreateTypeConverterExpression(CsvHelper.Configuration.MemberMap,System.Linq.Expressions.Expression)">
            <summary>
            Creates an expression that converts the field expression using a type converter.
            </summary>
            <param name="memberMap">The mapping for the member.</param>
            <param name="fieldExpression">The field expression.</param>
        </member>
        <member name="M:CsvHelper.Expressions.ExpressionManager.CreateTypeConverterExpression(CsvHelper.Configuration.ParameterMap,System.Linq.Expressions.Expression)">
            <summary>
            Creates an expression that converts the field expression using a type converter.
            </summary>
            <param name="parameterMap">The mapping for the parameter.</param>
            <param name="fieldExpression">The field expression.</param>
        </member>
        <member name="M:CsvHelper.Expressions.ExpressionManager.CreateDefaultExpression(CsvHelper.Configuration.MemberMap,System.Linq.Expressions.Expression)">
            <summary>
            Creates a default expression if field expression is empty.
            </summary>
            <param name="memberMap">The mapping for the member.</param>
            <param name="fieldExpression">The field expression.</param>
        </member>
        <member name="M:CsvHelper.Expressions.ExpressionManager.CreateDefaultExpression(CsvHelper.Configuration.ParameterMap,System.Linq.Expressions.Expression)">
            <summary>
            Creates a default expression if field expression is empty.
            </summary>
            <param name="parameterMap">The mapping for the parameter.</param>
            <param name="fieldExpression">The field expression.</param>
        </member>
        <member name="T:CsvHelper.Expressions.ObjectRecordCreator">
            <summary>
            Creates objects.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.ObjectRecordCreator.#ctor(CsvHelper.CsvReader)">
            <summary>
            Initializes a new instance using the given reader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:CsvHelper.Expressions.ObjectRecordCreator.CreateCreateRecordDelegate(System.Type)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Func`1"/>
            that will create a record of the given type using the current
            reader row.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="T:CsvHelper.Expressions.ObjectRecordWriter">
            <summary>
            Writes objects.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.ObjectRecordWriter.#ctor(CsvHelper.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper.Expressions.ObjectRecordWriter.CreateWriteDelegate``1(``0)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Action`1"/>
            that will write the given record using the current writer row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="T:CsvHelper.Expressions.PrimitiveRecordCreator">
            <summary>
            Creates primitive records.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.PrimitiveRecordCreator.#ctor(CsvHelper.CsvReader)">
            <summary>
            Initializes a new instance using the given reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper.Expressions.PrimitiveRecordCreator.CreateCreateRecordDelegate(System.Type)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Func`1"/>
            that will create a record of the given type using the current
            reader row.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="T:CsvHelper.Expressions.PrimitiveRecordWriter">
            <summary>
            Writes primitives.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.PrimitiveRecordWriter.#ctor(CsvHelper.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper.Expressions.PrimitiveRecordWriter.CreateWriteDelegate``1(``0)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Action`1"/>
            that will write the given record using the current writer row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="T:CsvHelper.Expressions.RecordCreator">
            <summary>
            Base implementation for classes that create records.
            </summary>
        </member>
        <member name="P:CsvHelper.Expressions.RecordCreator.Reader">
            <summary>
            The reader.
            </summary>
        </member>
        <member name="P:CsvHelper.Expressions.RecordCreator.ExpressionManager">
            <summary>
            The expression manager.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.RecordCreator.#ctor(CsvHelper.CsvReader)">
            <summary>
            Initializes a new instance using the given reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordCreator.Create``1">
            <summary>
            Create a record of the given type using the current row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
        </member>
        <member name="M:CsvHelper.Expressions.RecordCreator.Create(System.Type)">
            <summary>
            Create a record of the given type using the current row.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordCreator.GetCreateRecordDelegate(System.Type)">
            <summary>
            Gets the delegate to create a record for the given record type. 
            If the delegate doesn't exist, one will be created and cached.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordCreator.CreateCreateRecordDelegate(System.Type)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Func`1"/>
            that will create a record of the given type using the current
            reader row.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="T:CsvHelper.Expressions.RecordCreatorFactory">
            <summary>
            Factory to create record creators.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.RecordCreatorFactory.#ctor(CsvHelper.CsvReader)">
            <summary>
            Initializes a new instance using the given reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordCreatorFactory.MakeRecordCreator(System.Type)">
            <summary>
            Creates a record creator for the given record type.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="T:CsvHelper.Expressions.RecordHydrator">
            <summary>
            Hydrates members of an existing record.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.RecordHydrator.#ctor(CsvHelper.CsvReader)">
            <summary>
            Creates a new instance using the given reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordHydrator.Hydrate``1(``0)">
            <summary>
            Hydrates members of the given record using the current reader row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordHydrator.GetHydrateRecordAction``1">
            <summary>
            Gets the action delegate used to hydrate a custom class object's members with data from the reader.
            </summary>
            <typeparam name="T">The record type.</typeparam>
        </member>
        <member name="M:CsvHelper.Expressions.RecordHydrator.CreateHydrateRecordAction``1">
            <summary>
            Creates the action delegate used to hydrate a record's members with data from the reader.
            </summary>
            <typeparam name="T">The record type.</typeparam>
        </member>
        <member name="T:CsvHelper.Expressions.RecordManager">
            <summary>
            Manages record manipulation.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.RecordManager.#ctor(CsvHelper.CsvReader)">
            <summary>
            Initializes a new instance using the given reader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordManager.#ctor(CsvHelper.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordManager.Create``1">
            <summary>
            Creates a record of the given type using the current reader row.
            </summary>
            <typeparam name="T">The type of record to create.</typeparam>
        </member>
        <member name="M:CsvHelper.Expressions.RecordManager.Create(System.Type)">
            <summary>
            Creates a record of the given type using the current reader row.
            </summary>
            <param name="recordType">The type of record to create.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordManager.Hydrate``1(``0)">
            <summary>
            Hydrates the given record using the current reader row.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to hydrate.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordManager.Write``1(``0)">
            <summary>
            Writes the given record to the current writer row.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="T:CsvHelper.Expressions.RecordWriter">
            <summary>
            Base implementation for classes that write records.
            </summary>
        </member>
        <member name="P:CsvHelper.Expressions.RecordWriter.Writer">
            <summary>
            Gets the writer.
            </summary>
        </member>
        <member name="P:CsvHelper.Expressions.RecordWriter.ExpressionManager">
            <summary>
            The expression manager.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.RecordWriter.#ctor(CsvHelper.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordWriter.Write``1(``0)">
            <summary>
            Writes the record to the current row.
            </summary>
            <typeparam name="T">Type of the record.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordWriter.GetWriteDelegate``1(``0)">
            <summary>
            Gets the delegate to write the given record. 
            If the delegate doesn't exist, one will be created and cached.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordWriter.CreateWriteDelegate``1(``0)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Action`1"/>
            that will write the given record using the current writer row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordWriter.CombineDelegates``1(System.Collections.Generic.IEnumerable{System.Action{``0}})">
            <summary>
            Combines the delegates into a single multicast delegate.
            This is needed because Silverlight doesn't have the
            Delegate.Combine( params Delegate[] ) overload.
            </summary>
            <param name="delegates">The delegates to combine.</param>
            <returns>A multicast delegate combined from the given delegates.</returns>
        </member>
        <member name="T:CsvHelper.Expressions.RecordWriterFactory">
            <summary>
            Factory to create record writers.
            </summary>
        </member>
        <member name="M:CsvHelper.Expressions.RecordWriterFactory.#ctor(CsvHelper.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper.Expressions.RecordWriterFactory.MakeRecordWriter``1(``0)">
            <summary>
            Creates a new record writer for the given record.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="T:CsvHelper.Factory">
            <summary>
            Creates CsvHelper classes.
            </summary>
        </member>
        <member name="M:CsvHelper.Factory.CreateParser(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates an <see cref="T:CsvHelper.IParser"/>.
            </summary>
            <param name="reader">The text reader to use for the csv parser.</param>
            <param name="configuration">The configuration to use for the csv parser.</param>
            <returns>The created parser.</returns>
        </member>
        <member name="M:CsvHelper.Factory.CreateParser(System.IO.TextReader,System.Globalization.CultureInfo)">
            <summary>
            Creates an <see cref="T:CsvHelper.IParser" />.
            </summary>
            <param name="reader">The text reader to use for the csv parser.</param>
            <param name="cultureInfo">The culture information.</param>
            <returns>
            The created parser.
            </returns>
        </member>
        <member name="M:CsvHelper.Factory.CreateReader(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates an <see cref="T:CsvHelper.IReader"/>.
            </summary>
            <param name="reader">The text reader to use for the csv reader.</param>
            <param name="configuration">The configuration to use for the reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper.Factory.CreateReader(System.IO.TextReader,System.Globalization.CultureInfo)">
            <summary>
            Creates an <see cref="T:CsvHelper.IReader" />.
            </summary>
            <param name="reader">The text reader to use for the csv reader.</param>
            <param name="cultureInfo">The culture information.</param>
            <returns>
            The created reader.
            </returns>
        </member>
        <member name="M:CsvHelper.Factory.CreateReader(CsvHelper.IParser)">
            <summary>
            Creates an <see cref="T:CsvHelper.IReader"/>.
            </summary>
            <param name="parser">The parser used to create the reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper.Factory.CreateWriter(System.IO.TextWriter,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates an <see cref="T:CsvHelper.IWriter"/>.
            </summary>
            <param name="writer">The text writer to use for the csv writer.</param>
            <param name="configuration">The configuration to use for the writer.</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:CsvHelper.Factory.CreateWriter(System.IO.TextWriter,System.Globalization.CultureInfo)">
            <summary>
            Creates an <see cref="T:CsvHelper.IWriter" />.
            </summary>
            <param name="writer">The text writer to use for the csv writer.</param>
            <param name="cultureInfo">The culture information.</param>
            <returns>
            The created writer.
            </returns>
        </member>
        <member name="M:CsvHelper.Factory.CreateClassMapBuilder``1">
            <summary>
            Access point for fluent interface to dynamically build a <see cref="T:CsvHelper.Configuration.ClassMap`1"/>
            </summary>
            <typeparam name="T">Type you will be making a class map for</typeparam>
            <returns>Options to further configure the <see cref="T:CsvHelper.Configuration.ClassMap`1"/></returns>
        </member>
        <member name="T:CsvHelper.FieldCache">
            <summary>
            Caches fields.
            Based on C#'s <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="T:CsvHelper.FieldValidationException">
            <summary>
            Represents a user supplied field validation failure.
            </summary>
        </member>
        <member name="P:CsvHelper.FieldValidationException.Field">
            <summary>
            Gets the field that failed validation.
            </summary>
        </member>
        <member name="M:CsvHelper.FieldValidationException.#ctor(CsvHelper.CsvContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ValidationException"/> class.
            </summary>
            <param name="context">The reading context.</param>
            <param name="field">The field that failed validation.</param>
        </member>
        <member name="M:CsvHelper.FieldValidationException.#ctor(CsvHelper.CsvContext,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ValidationException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="field">The field that failed validation.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.FieldValidationException.#ctor(CsvHelper.CsvContext,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ValidationException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="field">The field that failed validation.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper.HeaderValidationException">
            <summary>
            Represents a header validation failure.
            </summary>
        </member>
        <member name="P:CsvHelper.HeaderValidationException.InvalidHeaders">
            <summary>
            Gets the invalid headers.
            </summary>
        </member>
        <member name="M:CsvHelper.HeaderValidationException.#ctor(CsvHelper.CsvContext,CsvHelper.InvalidHeader[])">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ValidationException"/> class.
            </summary>
            <param name="context">The reading context.</param>
            <param name="invalidHeaders">The invalid headers.</param>
        </member>
        <member name="M:CsvHelper.HeaderValidationException.#ctor(CsvHelper.CsvContext,CsvHelper.InvalidHeader[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ValidationException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="invalidHeaders">The invalid headers.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.HeaderValidationException.#ctor(CsvHelper.CsvContext,CsvHelper.InvalidHeader[],System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ValidationException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="invalidHeaders">The invalid headers.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper.IFactory">
            <summary>
            Defines methods used to create
            CsvHelper classes.
            </summary>
        </member>
        <member name="M:CsvHelper.IFactory.CreateParser(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates an <see cref="T:CsvHelper.IParser"/>.
            </summary>
            <param name="reader">The text reader to use for the csv parser.</param>
            <param name="configuration">The configuration to use for the csv parser.</param>
            <returns>The created parser.</returns>
        </member>
        <member name="M:CsvHelper.IFactory.CreateParser(System.IO.TextReader,System.Globalization.CultureInfo)">
            <summary>
            Creates an <see cref="T:CsvHelper.IParser" />.
            </summary>
            <param name="reader">The text reader to use for the csv parser.</param>
            <param name="cultureInfo">The culture information.</param>
            <returns>
            The created parser.
            </returns>
        </member>
        <member name="M:CsvHelper.IFactory.CreateReader(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates an <see cref="T:CsvHelper.IReader"/>.
            </summary>
            <param name="reader">The text reader to use for the csv reader.</param>
            <param name="configuration">The configuration to use for the reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper.IFactory.CreateReader(System.IO.TextReader,System.Globalization.CultureInfo)">
            <summary>
            Creates an <see cref="T:CsvHelper.IReader" />.
            </summary>
            <param name="reader">The text reader to use for the csv reader.</param>
            <param name="cultureInfo">The culture information.</param>
            <returns>
            The created reader.
            </returns>
        </member>
        <member name="M:CsvHelper.IFactory.CreateReader(CsvHelper.IParser)">
            <summary>
            Creates an <see cref="T:CsvHelper.IReader"/>.
            </summary>
            <param name="parser">The parser used to create the reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper.IFactory.CreateWriter(System.IO.TextWriter,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            Creates an <see cref="T:CsvHelper.IWriter"/>.
            </summary>
            <param name="writer">The text writer to use for the csv writer.</param>
            <param name="configuration">The configuration to use for the writer.</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:CsvHelper.IFactory.CreateWriter(System.IO.TextWriter,System.Globalization.CultureInfo)">
            <summary>
            Creates an <see cref="T:CsvHelper.IWriter" />.
            </summary>
            <param name="writer">The text writer to use for the csv writer.</param>
            <param name="cultureInfo">The culture information.</param>
            <returns>
            The created writer.
            </returns>
        </member>
        <member name="M:CsvHelper.IFactory.CreateClassMapBuilder``1">
            <summary>
            Provides a fluent interface for dynamically creating <see cref="T:CsvHelper.Configuration.ClassMap`1"/>s 
            </summary>
            <typeparam name="T">Type of class to map</typeparam>
            <returns>Next available options</returns>
        </member>
        <member name="T:CsvHelper.InvalidHeader">
            <summary>
            Invalid header information.
            </summary>
        </member>
        <member name="P:CsvHelper.InvalidHeader.Names">
            <summary>
            Header names mapped to a CSV field that couldn't be found.
            </summary>
        </member>
        <member name="P:CsvHelper.InvalidHeader.Index">
            <summary>
            Header name index maped to a CSV field that couldn't be found.
            </summary>
        </member>
        <member name="T:CsvHelper.IObjectResolver">
            <summary>
            Defines the functionality of a class that creates objects
            from a given type.
            </summary>
        </member>
        <member name="P:CsvHelper.IObjectResolver.UseFallback">
            <summary>
            A value indicating if the resolver's <see cref="P:CsvHelper.IObjectResolver.CanResolve"/>
            returns false that an object will still be created using
            CsvHelper's object creation. True to fallback, otherwise false.
            Default value is true.
            </summary>
        </member>
        <member name="P:CsvHelper.IObjectResolver.CanResolve">
            <summary>
            A value indicating if the resolver is able to resolve
            the given type. True if the type can be resolved,
            otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper.IObjectResolver.ResolveFunction">
            <summary>
            The function that creates an object from a given type.
            </summary>
        </member>
        <member name="M:CsvHelper.IObjectResolver.Resolve(System.Type,System.Object[])">
            <summary>
            Creates an object from the given type using the <see cref="P:CsvHelper.IObjectResolver.ResolveFunction"/>
            function. If <see cref="P:CsvHelper.IObjectResolver.CanResolve"/> is false, the object will be
            created using CsvHelper's default object creation. If <see cref="P:CsvHelper.IObjectResolver.UseFallback"/>
            is false, an exception is thrown.
            </summary>
            <param name="type">The type to create an instance from. The created object
            may not be the same type as the given type.</param>
            <param name="constructorArgs">Constructor arguments used to create the type.</param>
        </member>
        <member name="M:CsvHelper.IObjectResolver.Resolve``1(System.Object[])">
            <summary>
            Creates an object from the given type using the <see cref="P:CsvHelper.IObjectResolver.ResolveFunction"/>
            function. If <see cref="P:CsvHelper.IObjectResolver.CanResolve"/> is false, the object will be
            created using CsvHelper's default object creation. If <see cref="P:CsvHelper.IObjectResolver.UseFallback"/>
            is false, an exception is thrown.
            </summary>
            <typeparam name="T">The type to create an instance from. The created object
            may not be the same type as the given type.</typeparam>
            <param name="constructorArgs">Constructor arguments used to create the type.</param>
        </member>
        <member name="T:CsvHelper.IParser">
            <summary>
            Defines methods used the parse a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.IParser.ByteCount">
            <summary>
            Gets the count of how many bytes have been read.
            <see cref="P:CsvHelper.Configuration.IParserConfiguration.CountBytes"/> needs
            to be enabled for this value to be populated.
            </summary>
        </member>
        <member name="P:CsvHelper.IParser.CharCount">
            <summary>
            Gets the count of how many characters have been read.
            </summary>
        </member>
        <member name="P:CsvHelper.IParser.Count">
            <summary>
            Gets the number of fields for the current row.
            </summary>
        </member>
        <member name="P:CsvHelper.IParser.Item(System.Int32)">
            <summary>
            Gets the field at the specified index for the current row.
            </summary>
            <param name="index">The index.</param>
            <returns>The field.</returns>
        </member>
        <member name="P:CsvHelper.IParser.Record">
            <summary>
            Gets the record for the current row. Note:
            It is much more efficient to only get the fields you need. If
            you need all fields, then use this.
            </summary>
        </member>
        <member name="P:CsvHelper.IParser.RawRecord">
            <summary>
            Gets the raw record for the current row.
            </summary>
        </member>
        <member name="P:CsvHelper.IParser.Row">
            <summary>
            Gets the CSV row the parser is currently on.
            </summary>
        </member>
        <member name="P:CsvHelper.IParser.RawRow">
            <summary>
            Gets the raw row the parser is currently on.
            </summary>
        </member>
        <member name="P:CsvHelper.IParser.Delimiter">
            <summary>
            The delimiter the parser is using.
            </summary>
        </member>
        <member name="P:CsvHelper.IParser.Context">
            <summary>
            Gets the reading context.
            </summary>
        </member>
        <member name="P:CsvHelper.IParser.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="M:CsvHelper.IParser.Read">
            <summary>
            Reads a record from the CSV file.
            </summary>
            <returns>True if there are more records to read, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.IParser.ReadAsync">
            <summary>
            Reads a record from the CSV file asynchronously.
            </summary>
            <returns>True if there are more records to read, otherwise false.</returns>
        </member>
        <member name="T:CsvHelper.IReader">
            <summary>
            Defines methods used to read parsed data
            from a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.IReader.ReadHeader">
            <summary>
            Reads the header record without reading the first row.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.IReader.Read">
            <summary>
            Advances the reader to the next record. This will not read headers.
            You need to call <see cref="M:CsvHelper.IReader.Read"/> then <see cref="M:CsvHelper.IReader.ReadHeader"/> 
            for the headers to be read.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.IReader.ReadAsync">
            <summary>
            Advances the reader to the next record. This will not read headers.
            You need to call <see cref="M:CsvHelper.IReader.ReadAsync"/> then <see cref="M:CsvHelper.IReader.ReadHeader"/> 
            for the headers to be read.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.IReader.GetRecords``1">
            <summary>
            Gets all the records in the CSV file and
            converts each to <see cref="T:System.Type"/> T. The Read method
            should not be used when using this.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of records.</returns>
        </member>
        <member name="M:CsvHelper.IReader.GetRecords``1(``0)">
            <summary>
            Gets all the records in the CSV file and converts
            each to <see cref="T:System.Type"/> T. The read method
            should not be used when using this.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <param name="anonymousTypeDefinition">The anonymous type definition to use for the records.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of records.</returns>
        </member>
        <member name="M:CsvHelper.IReader.GetRecords(System.Type)">
            <summary>
            Gets all the records in the CSV file and
            converts each to <see cref="T:System.Type"/> T. The Read method
            should not be used when using this.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the record.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of records.</returns>
        </member>
        <member name="M:CsvHelper.IReader.EnumerateRecords``1(``0)">
            <summary>
            Enumerates the records hydrating the given record instance with row data.
            The record instance is re-used and not cleared on each enumeration. 
            This only works for streaming rows. If any methods are called on the projection
            that force the evaluation of the IEnumerable, such as ToList(), the entire list
            will contain the same instance of the record, which is the last row.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to fill each enumeration.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of records.</returns>
        </member>
        <member name="M:CsvHelper.IReader.GetRecordsAsync``1(System.Threading.CancellationToken)">
            <summary>
            Gets all the records in the CSV file and
            converts each to <see cref="T:System.Type"/> T. The Read method
            should not be used when using this.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <param name="cancellationToken">The cancellation token to stop the writing.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of records.</returns>
        </member>
        <member name="M:CsvHelper.IReader.GetRecordsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Gets all the records in the CSV file and converts
            each to <see cref="T:System.Type"/> T. The read method
            should not be used when using this.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <param name="anonymousTypeDefinition">The anonymous type definition to use for the records.</param>
            <param name="cancellationToken">The cancellation token to stop the writing.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> of records.</returns>
        </member>
        <member name="M:CsvHelper.IReader.GetRecordsAsync(System.Type,System.Threading.CancellationToken)">
            <summary>
            Gets all the records in the CSV file and
            converts each to <see cref="T:System.Type"/> T. The Read method
            should not be used when using this.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the record.</param>
            <param name="cancellationToken">The cancellation token to stop the writing.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> of records.</returns>
        </member>
        <member name="M:CsvHelper.IReader.EnumerateRecordsAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Enumerates the records hydrating the given record instance with row data.
            The record instance is re-used and not cleared on each enumeration. 
            This only works for streaming rows. If any methods are called on the projection
            that force the evaluation of the IEnumerable, such as ToList(), the entire list
            will contain the same instance of the record, which is the last row.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to fill each enumeration.</param>
            /// <param name="cancellationToken">The cancellation token to stop the writing.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> of records.</returns>
        </member>
        <member name="T:CsvHelper.IReaderRow">
            <summary>
            Defines methods used to read parsed data
            from a CSV file row.
            </summary>
        </member>
        <member name="P:CsvHelper.IReaderRow.ColumnCount">
            <summary>
            Gets the column count of the current row.
            This should match <see cref="P:CsvHelper.IParser.Count"/>.
            </summary>
        </member>
        <member name="P:CsvHelper.IReaderRow.CurrentIndex">
            <summary>
            Gets the field index the reader is currently on.
            </summary>
        </member>
        <member name="P:CsvHelper.IReaderRow.HeaderRecord">
            <summary>
            Gets the header record.
            </summary>
        </member>
        <member name="P:CsvHelper.IReaderRow.Parser">
            <summary>
            Gets the parser.
            </summary>
        </member>
        <member name="P:CsvHelper.IReaderRow.Context">
            <summary>
            Gets the reading context.
            </summary>
        </member>
        <member name="P:CsvHelper.IReaderRow.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="P:CsvHelper.IReaderRow.Item(System.Int32)">
            <summary>
            Gets the raw field at position (column) index.
            </summary>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper.IReaderRow.Item(System.String)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper.IReaderRow.Item(System.String,System.Int32)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField(System.Int32)">
            <summary>
            Gets the raw field at position (column) index.
            </summary>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField(System.String)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField(System.String,System.Int32)">
            <summary>
            Gets the raw field at position (column) name and the index
            instance of that field. The index is used when there are
            multiple columns with the same header name.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField(System.Type,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="index">The index of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField(System.Type,System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField(System.Type,System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField(System.Type,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField(System.Type,System.String,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField(System.Type,System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField``1(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField``1(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField``1(System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns></returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField``1(System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index using
            the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField``1(System.String,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name using
            the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField``1(System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField``2(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index using
            the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField``2(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name using
            the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetField``2(System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField(System.Type,System.Int32,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to type T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField(System.Type,System.String,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField(System.Type,System.String,System.Int32,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField(System.Type,System.Int32,CsvHelper.TypeConversion.ITypeConverter,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField(System.Type,System.String,CsvHelper.TypeConversion.ITypeConverter,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField(System.Type,System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField``1(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to type T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField``1(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField``1(System.String,System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField``1(System.Int32,CsvHelper.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField``1(System.String,CsvHelper.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField``1(System.String,System.Int32,CsvHelper.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField``2(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField``2(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.TryGetField``2(System.String,System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetRecord``1">
            <summary>
            Gets the record converted into <see cref="T:System.Type"/> T.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>The record converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetRecord``1(``0)">
            <summary>
            Get the record converted into <see cref="T:System.Type"/> T.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <param name="anonymousTypeDefinition">The anonymous type definition to use for the record.</param>
            <returns>The record converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.IReaderRow.GetRecord(System.Type)">
            <summary>
            Gets the record.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the record.</param>
            <returns>The record.</returns>
        </member>
        <member name="T:CsvHelper.IWriter">
            <summary>
            Defines methods used to write to a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.IWriter.Flush">
            <summary>
            Flushes the internal buffer to the <see cref="T:System.IO.TextWriter"/> then
            flushes the <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.IWriter.FlushAsync">
            <summary>
            Flushes the internal buffer to the <see cref="T:System.IO.TextWriter"/> then
            flushes the <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.IWriter.NextRecord">
            <summary>
            Ends writing of the current record and starts a new record.
            This flushes the buffer to the <see cref="T:System.IO.TextWriter"/> but
            does not flush the <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.IWriter.NextRecordAsync">
            <summary>
            Ends writing of the current record and starts a new record.
            This flushes the buffer to the <see cref="T:System.IO.TextWriter"/> but
            does not flush the <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.IWriter.WriteRecords(System.Collections.IEnumerable)">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <param name="records">The records to write.</param>
        </member>
        <member name="M:CsvHelper.IWriter.WriteRecords``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <typeparam name="T">Record type.</typeparam>
            <param name="records">The records to write.</param>
        </member>
        <member name="M:CsvHelper.IWriter.WriteRecordsAsync(System.Collections.IEnumerable,System.Threading.CancellationToken)">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <param name="records">The records to write.</param>
            <param name="cancellationToken">The cancellation token to stop the writing.</param>
        </member>
        <member name="M:CsvHelper.IWriter.WriteRecordsAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <typeparam name="T">Record type.</typeparam>
            <param name="records">The records to write.</param>
            <param name="cancellationToken">The cancellation token to stop the writing.</param>
        </member>
        <member name="M:CsvHelper.IWriter.WriteRecordsAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <typeparam name="T">Record type.</typeparam>
            <param name="records">The records to write.</param>
            <param name="cancellationToken">The cancellation token to stop the writing.</param>
        </member>
        <member name="T:CsvHelper.IWriterRow">
            <summary>
            Defines methods used to write a CSV row.
            </summary>
        </member>
        <member name="P:CsvHelper.IWriterRow.HeaderRecord">
            <summary>
            The header record.
            </summary>
        </member>
        <member name="P:CsvHelper.IWriterRow.Row">
            <summary>
            The current row.
            </summary>
        </member>
        <member name="P:CsvHelper.IWriterRow.Index">
            <summary>
            The current field index.
            </summary>
        </member>
        <member name="P:CsvHelper.IWriterRow.Context">
            <summary>
            Gets the writing context.
            </summary>
        </member>
        <member name="P:CsvHelper.IWriterRow.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="M:CsvHelper.IWriterRow.WriteConvertedField(System.String,System.Type)">
            <summary>
            Writes a field that has already been converted to a
            <see cref="T:System.String"/> from an <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            If the field is null, it won't get written. A type converter 
            will always return a string, even if field is null. If the 
            converter returns a null, it means that the converter has already
            written data, and the returned value should not be written.
            </summary>
            <param name="field">The converted field to write.</param>
            <param name="fieldType">The type of the field before it was converted into a string.</param>
        </member>
        <member name="M:CsvHelper.IWriterRow.WriteField(System.String)">
            <summary>
            Writes the field to the CSV file. The field
            may get quotes added to it.
            When all fields are written for a record,
            <see cref="M:CsvHelper.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.IWriterRow.WriteField(System.String,System.Boolean)">
            <summary>
            Writes the field to the CSV file. This will
            ignore any need to quote and ignore
            <see cref="P:CsvHelper.Configuration.CsvConfiguration.ShouldQuote"/>
            and just quote based on the shouldQuote
            parameter.
            When all fields are written for a record,
            <see cref="M:CsvHelper.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
            <param name="shouldQuote">True to quote the field, otherwise false.</param>
        </member>
        <member name="M:CsvHelper.IWriterRow.WriteField``1(``0)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.IWriterRow.WriteField``1(``0,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
            <param name="converter">The converter used to convert the field into a string.</param>
        </member>
        <member name="M:CsvHelper.IWriterRow.WriteField``2(``0)">
            <summary>
            Writes the field to the CSV file
            using the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            When all fields are written for a record,
            <see cref="M:CsvHelper.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <typeparam name="TConverter">The type of the converter.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.IWriterRow.WriteComment(System.String)">
            <summary>
            Writes a comment.
            </summary>
            <param name="comment">The comment to write.</param>
        </member>
        <member name="M:CsvHelper.IWriterRow.WriteHeader``1">
            <summary>
            Writes the header record from the given members.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
        </member>
        <member name="M:CsvHelper.IWriterRow.WriteHeader(System.Type)">
            <summary>
            Writes the header record from the given members.
            </summary>
            <param name="type">The type of the record.</param>
        </member>
        <member name="M:CsvHelper.IWriterRow.WriteRecord``1(``0)">
            <summary>
            Writes the record to the CSV file.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to write.</param>
        </member>
        <member name="T:CsvHelper.MaxFieldSizeException">
            <summary>
            Represents an error due to a field that is too large.
            </summary>
        </member>
        <member name="M:CsvHelper.MaxFieldSizeException.#ctor(CsvHelper.CsvContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.MaxFieldSizeException"/> class.
            </summary>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper.MaxFieldSizeException.#ctor(CsvHelper.CsvContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.MaxFieldSizeException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.MaxFieldSizeException.#ctor(CsvHelper.CsvContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.MaxFieldSizeException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper.MissingFieldException">
            <summary>
            Represents an error caused because a field is missing
            in the header while reading a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.MissingFieldException.#ctor(CsvHelper.CsvContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.MissingFieldException"/> class.
            </summary>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper.MissingFieldException.#ctor(CsvHelper.CsvContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.MissingFieldException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.MissingFieldException.#ctor(CsvHelper.CsvContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.MissingFieldException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper.ObjectCreator">
            <summary>
            Efficiently creates instances of object types.
            </summary>
        </member>
        <member name="M:CsvHelper.ObjectCreator.CreateInstance``1(System.Object[])">
            <summary>
            Creates an instance of type T using the given arguments.
            </summary>
            <typeparam name="T">The type to create an instance of.</typeparam>
            <param name="args">The constrcutor arguments.</param>
        </member>
        <member name="M:CsvHelper.ObjectCreator.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the given type using the given arguments.
            </summary>
            <param name="type">The type to create an instance of.</param>
            <param name="args">The constructor arguments.</param>
        </member>
        <member name="T:CsvHelper.ObjectResolver">
            <summary>
            Creates objects from a given type.
            </summary>
        </member>
        <member name="P:CsvHelper.ObjectResolver.Current">
            <summary>
            Gets or sets the current resolver.
            Use an instance of this instead if at all possible.
            </summary>
        </member>
        <member name="P:CsvHelper.ObjectResolver.UseFallback">
            <summary>
            A value indicating if the resolver's <see cref="P:CsvHelper.ObjectResolver.CanResolve"/>
            returns false that an object will still be created using
            CsvHelper's object creation. True to fallback, otherwise false.
            Default value is true.
            </summary>
        </member>
        <member name="P:CsvHelper.ObjectResolver.CanResolve">
            <summary>
            A function that returns a value indicating if the resolver 
            is able to resolve the given type. True if the type can be 
            resolved, otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper.ObjectResolver.ResolveFunction">
            <summary>
            The function that creates an object from a given type.
            </summary>
        </member>
        <member name="M:CsvHelper.ObjectResolver.#ctor">
            <summary>
            Creates an instance of the object resolver using default values.
            </summary>
        </member>
        <member name="M:CsvHelper.ObjectResolver.#ctor(System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Object[],System.Object},System.Boolean)">
            <summary>
            Creates an instance of the object resolver using the given can create function
            and create function.
            </summary>
            <param name="canResolve">A function that returns a value indicating if the resolver
            is able to resolve the given type. True if the type can be
            resolved, otherwise false.</param>
            <param name="resolveFunction">The function that creates an object from a given type.</param>
            <param name="useFallback">A value indicating if the resolver's <see cref="P:CsvHelper.ObjectResolver.CanResolve"/>
            returns false that an object will still be created using
            CsvHelper's object creation. True to fallback, otherwise false.
            Default value is true.</param>
        </member>
        <member name="M:CsvHelper.ObjectResolver.Resolve(System.Type,System.Object[])">
            <summary>
            Creates an object from the given type using the <see cref="P:CsvHelper.ObjectResolver.ResolveFunction"/>
            function. If <see cref="P:CsvHelper.ObjectResolver.CanResolve"/> is false, the object will be
            created using CsvHelper's default object creation. If <see cref="P:CsvHelper.ObjectResolver.UseFallback"/>
            is false, an exception is thrown.
            </summary>
            <param name="type">The type to create an instance from. The created object
            may not be the same type as the given type.</param>
            <param name="constructorArgs">Constructor arguments used to create the type.</param>
        </member>
        <member name="M:CsvHelper.ObjectResolver.Resolve``1(System.Object[])">
            <summary>
            Creates an object from the given type using the <see cref="P:CsvHelper.ObjectResolver.ResolveFunction"/>
            function. If <see cref="P:CsvHelper.ObjectResolver.CanResolve"/> is false, the object will be
            created using CsvHelper's default object creation. If <see cref="P:CsvHelper.ObjectResolver.UseFallback"/>
            is false, an exception is thrown.
            </summary>
            <typeparam name="T">The type to create an instance from. The created object
            may not be the same type as the given type.</typeparam>
            <param name="constructorArgs">Constructor arguments used to create the type.</param>
        </member>
        <member name="T:CsvHelper.ParserException">
            <summary>
            Represents errors that occur while parsing a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.ParserException.#ctor(CsvHelper.CsvContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ParserException"/> class.
            </summary>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper.ParserException.#ctor(CsvHelper.CsvContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ParserException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.ParserException.#ctor(CsvHelper.CsvContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ParserException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper.ReaderException">
            <summary>
            Represents errors that occur while reading a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.ReaderException.#ctor(CsvHelper.CsvContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ReaderException"/> class.
            </summary>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper.ReaderException.#ctor(CsvHelper.CsvContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ReaderException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.ReaderException.#ctor(CsvHelper.CsvContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ReaderException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper.ReflectionExtensions">
            <summary>
            Extensions to help with reflection.
            </summary>
        </member>
        <member name="M:CsvHelper.ReflectionExtensions.MemberType(System.Reflection.MemberInfo)">
            <summary>
            Gets the type from the member.
            </summary>
            <param name="member">The member to get the type from.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:CsvHelper.ReflectionExtensions.GetMemberExpression(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
            <summary>
            Gets a member expression for the member.
            </summary>
            <param name="member">The member to get the expression for.</param>
            <param name="expression">The member expression.</param>
            <returns>The member expression.</returns>
        </member>
        <member name="M:CsvHelper.ReflectionExtensions.IsAnonymous(System.Type)">
            <summary>
            Gets a value indicating if the given type is anonymous.
            True for anonymous, otherwise false.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:CsvHelper.ReflectionExtensions.HasParameterlessConstructor(System.Type)">
            <summary>
            Gets a value indicating if the given type has a parameterless constructor.
            True if it has a parameterless constructor, otherwise false.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:CsvHelper.ReflectionExtensions.HasConstructor(System.Type)">
            <summary>
            Gets a value indicating if the given type has any constructors.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:CsvHelper.ReflectionExtensions.GetConstructorWithMostParameters(System.Type)">
            <summary>
            Gets the constructor that contains the most parameters.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:CsvHelper.ReflectionExtensions.IsUserDefinedStruct(System.Type)">
            <summary>
            Gets a value indicating if the type is a user defined struct.
            True if it is a user defined struct, otherwise false.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:CsvHelper.ReflectionExtensions.GetDefinition(System.Reflection.ConstructorInfo)">
            <summary>
            Gets a string representation of the constructor.
            </summary>
            <param name="constructor">The constructor.</param>
        </member>
        <member name="M:CsvHelper.ReflectionExtensions.GetDefinition(System.Reflection.ParameterInfo)">
            <summary>
            Gets a string representation of the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="T:CsvHelper.ReflectionHelper">
            <summary>
            Common reflection tasks.
            </summary>
        </member>
        <member name="M:CsvHelper.ReflectionHelper.GetDeclaringProperty(System.Type,System.Reflection.PropertyInfo,System.Reflection.BindingFlags)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> from the type where the property was declared.
            </summary>
            <param name="type">The type the property belongs to.</param>
            <param name="property">The property to search.</param>
            <param name="flags">Flags for how the property is retrieved.</param>
        </member>
        <member name="M:CsvHelper.ReflectionHelper.GetDeclaringField(System.Type,System.Reflection.FieldInfo,System.Reflection.BindingFlags)">
            <summary>
            Gets the <see cref="T:System.Reflection.FieldInfo"/> from the type where the field was declared.
            </summary>
            <param name="type">The type the field belongs to.</param>
            <param name="field">The field to search.</param>
            <param name="flags">Flags for how the field is retrieved.</param>
        </member>
        <member name="M:CsvHelper.ReflectionHelper.GetUniqueProperties(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Walk up the inheritance tree collecting properties. This will get a unique set of properties in the
            case where parents have the same property names as children.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get properties for.</param>
            <param name="flags">The flags for getting the properties.</param>
            <param name="overwrite">If true, parent class properties that are hidden by `new` child properties will be overwritten.</param>
        </member>
        <member name="M:CsvHelper.ReflectionHelper.GetUniqueFields(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Walk up the inheritance tree collecting fields. This will get a unique set of fields in the
            case where parents have the same field names as children.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get fields for.</param>
            <param name="flags">The flags for getting the fields.</param>
            <param name="overwrite">If true, parent class fields that are hidden by `new` child fields will be overwritten.</param>
        </member>
        <member name="M:CsvHelper.ReflectionHelper.GetMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property from the expression.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> for the expression.</returns>
        </member>
        <member name="M:CsvHelper.ReflectionHelper.GetMembers``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the member inheritance chain as a stack.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The member expression.</param>
            <returns>The inheritance chain for the given member expression as a stack.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.ArrayConverter">
            <summary>
            Converts an <see cref="T:System.Array"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.ArrayConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.BigIntegerConverter">
            <summary>
            Converts a <see cref="T:System.Numerics.BigInteger"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.BigIntegerConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.BigIntegerConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.BooleanConverter">
            <summary>
            Converts a <see cref="T:System.Boolean"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.BooleanConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.TypeConversion.BooleanConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <inheritdoc/>
        </member>
        <member name="T:CsvHelper.TypeConversion.ByteArrayConverter">
            <summary>
            Converts a <see cref="T:Byte[]"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.ByteArrayConverter.#ctor(CsvHelper.TypeConversion.ByteArrayConverterOptions)">
            <summary>
            Creates a new ByteArrayConverter using the given <see cref="T:CsvHelper.TypeConversion.ByteArrayConverterOptions"/>.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.ByteArrayConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.ByteArrayConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.ByteArrayConverterOptions">
            <summary>
            Options for converting byte arrays.
            </summary>
        </member>
        <member name="F:CsvHelper.TypeConversion.ByteArrayConverterOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:CsvHelper.TypeConversion.ByteArrayConverterOptions.Hexadecimal">
            <summary>
            Hexadecimal encoding.
            </summary>
        </member>
        <member name="F:CsvHelper.TypeConversion.ByteArrayConverterOptions.Base64">
            <summary>
            Base64 encoding.
            </summary>
        </member>
        <member name="F:CsvHelper.TypeConversion.ByteArrayConverterOptions.HexDashes">
            <summary>
            Use dashes in between hex values.
            </summary>
        </member>
        <member name="F:CsvHelper.TypeConversion.ByteArrayConverterOptions.HexInclude0x">
            <summary>
            Prefix hex number with 0x.
            </summary>
        </member>
        <member name="T:CsvHelper.TypeConversion.ByteConverter">
            <summary>
            Converts a <see cref="T:System.Byte"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.ByteConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.CharConverter">
            <summary>
            Converts a <see cref="T:System.Char"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.CharConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.CollectionConverterFactory">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.TypeConversion.CollectionConverterFactory.CanCreate(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.TypeConversion.CollectionConverterFactory.Create(System.Type,CsvHelper.TypeConversion.TypeConverterCache,CsvHelper.TypeConversion.ITypeConverter@)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.TypeConversion.CollectionGenericConverter">
            <summary>
            Converts a <see cref="T:System.Collections.ObjectModel.Collection`1"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.CollectionGenericConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.DateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.DateTimeConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.DateTimeOffsetConverter">
            <summary>
            Converts a <see cref="T:System.DateTimeOffset"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.DateTimeOffsetConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.DecimalConverter">
            <summary>
            Converts a <see cref="T:System.Decimal"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.DecimalConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.DefaultTypeConverter">
            <summary>
            Converts an <see cref="T:System.Object"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.DefaultTypeConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.TypeConversion.DefaultTypeConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <inheritdoc/>
        </member>
        <member name="T:CsvHelper.TypeConversion.DoubleConverter">
            <summary>
            Converts a <see cref="T:System.Double"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.DoubleConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.DoubleConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.EnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumConverter.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:CsvHelper.TypeConversion.EnumConverter"/> for the given <see cref="T:System.Enum"/> <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type of the Enum.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <inheritdoc/>
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <inheritdoc/>
        </member>
        <member name="T:CsvHelper.TypeConversion.EnumConverterFactory">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumConverterFactory.CanCreate(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumConverterFactory.Create(System.Type,CsvHelper.TypeConversion.TypeConverterCache,CsvHelper.TypeConversion.ITypeConverter@)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.TypeConversion.EnumerableConverter">
            <summary>
            Throws an exception when used. This is here so that it's apparent
            that there is no support for <see cref="T:System.Collections.IEnumerable"/> type conversion. A custom
            converter will need to be created to have a field convert to and
            from an IEnumerable.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumerableConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Throws an exception.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.EnumerableConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Throws an exception.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.GuidConverter">
            <summary>
            Converts a <see cref="T:System.Guid"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.GuidConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.IDictionaryConverter">
            <summary>
            Converts an <see cref="T:System.Collections.IDictionary"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.IDictionaryConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.IDictionaryConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.IDictionaryGenericConverter">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IDictionary`2"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.IDictionaryGenericConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.IEnumerableConverter">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerable"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.IEnumerableConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row"></param>
            <param name="memberMapData"></param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.IEnumerableConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.IEnumerableGenericConverter">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.IEnumerableGenericConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.Int16Converter">
            <summary>
            Converts a <see cref="T:System.Int16"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.Int16Converter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.Int32Converter">
            <summary>
            Converts an <see cref="T:System.Int32"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.Int32Converter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.Int64Converter">
            <summary>
            Converts an <see cref="T:System.Int64"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.Int64Converter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.ITypeConverter">
            <summary>
            Converts objects to and from strings.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.ITypeConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.ITypeConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.ITypeConverterFactory">
            <summary>
            Produces <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the specified <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.ITypeConverterFactory.CanCreate(System.Type)">
            <summary>
            Determines if the factory can create a type converter for the given type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to be checked</param>
            <returns><c>true</c> if the factory can create the type, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.ITypeConverterFactory.Create(System.Type,CsvHelper.TypeConversion.TypeConverterCache,CsvHelper.TypeConversion.ITypeConverter@)">
            <summary>
            Creates a type converter for the given type and assigns it to the given out typeConverter parameter.
            </summary>
            <param name="type">The type to create the converter for.</param>
            <param name="cache">The type converter cache.</param>
            <param name="typeConverter">The parameter to set the converter to.</param>
            <returns><c>true</c> if the converter should be added to the cache, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.NullableConverter">
            <summary>
            Converts a <see cref="T:System.Nullable`1"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.NullableConverter.NullableType">
            <summary>
            Gets the type of the nullable.
            </summary>
            <value>
            The type of the nullable.
            </value>
        </member>
        <member name="P:CsvHelper.TypeConversion.NullableConverter.UnderlyingType">
            <summary>
            Gets the underlying type of the nullable.
            </summary>
            <value>
            The underlying type.
            </value>
        </member>
        <member name="P:CsvHelper.TypeConversion.NullableConverter.UnderlyingTypeConverter">
            <summary>
            Gets the type converter for the underlying type.
            </summary>
            <value>
            The type converter.
            </value>
        </member>
        <member name="M:CsvHelper.TypeConversion.NullableConverter.#ctor(System.Type,CsvHelper.TypeConversion.TypeConverterCache)">
            <summary>
            Creates a new <see cref="T:CsvHelper.TypeConversion.NullableConverter"/> for the given <see cref="T:System.Nullable`1"/> <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The nullable type.</param>
            <param name="typeConverterFactory">The type converter factory.</param>
            <exception cref="T:System.ArgumentException">type is not a nullable type.</exception>
        </member>
        <member name="M:CsvHelper.TypeConversion.NullableConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.NullableConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row"></param>
            <param name="memberMapData"></param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.NullableConverterFactory">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.TypeConversion.NullableConverterFactory.CanCreate(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:CsvHelper.TypeConversion.NullableConverterFactory.Create(System.Type,CsvHelper.TypeConversion.TypeConverterCache,CsvHelper.TypeConversion.ITypeConverter@)">
            <inheritdoc />
        </member>
        <member name="T:CsvHelper.TypeConversion.SByteConverter">
            <summary>
            Converts a <see cref="T:System.SByte"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.SByteConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.SingleConverter">
            <summary>
            Converts a <see cref="T:System.Single"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.SingleConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.SingleConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.StringConverter">
            <summary>
            Converts a <see cref="T:System.String"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.StringConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.TimeSpanConverter">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.TimeSpanConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.TypeConverter">
            <summary>
            Throws an exception when used. This is here so that it's apparent
            that there is no support for <see cref="T:System.Type"/> type conversion. A custom
            converter will need to be created to have a field convert to and
            from <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Throws an exception.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverter.ConvertToString(System.Object,CsvHelper.IWriterRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Throws an exception.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.TypeConverterCache">
            <summary>
            Caches <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>s for a given type.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterCache.#ctor">
            <summary>
            Initializes the <see cref="T:CsvHelper.TypeConversion.TypeConverterCache" /> class.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterCache.Contains(System.Type)">
            <summary>
            Determines if there is a converter registered for the given type.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if the converter is registered, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterCache.AddConverterFactory(CsvHelper.TypeConversion.ITypeConverterFactory)">
            <summary>
            Adds the <see cref="T:CsvHelper.TypeConversion.ITypeConverterFactory"/>.
            Factories are queried in order of being added and first factory that handles the type is used for creating the <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="typeConverterFactory">Type converter factory</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterCache.AddConverter(System.Type,CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Adds the <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type the converter converts.</param>
            <param name="typeConverter">The type converter that converts the type.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterCache.AddConverter``1(CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Adds the <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type the converter converts.</typeparam>
            <param name="typeConverter">The type converter that converts the type.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterCache.AddConverter(CsvHelper.TypeConversion.ITypeConverter)">
            <summary>
            Adds the given <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> to all registered types.
            </summary>
            <param name="typeConverter">The type converter.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterCache.RemoveConverter(System.Type)">
            <summary>
            Removes the <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to remove the converter for.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterCache.RemoveConverter``1">
            <summary>
            Removes the <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type to remove the converter for.</typeparam>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterCache.RemoveConverterFactory(CsvHelper.TypeConversion.ITypeConverterFactory)">
            <summary>
            Removes the ITypeConverterFactory.
            </summary>
            <param name="typeConverterFactory">The ITypeConverterFactory to remove.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterCache.GetConverter(System.Type)">
            <summary>
            Gets the converter for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to get the converter for.</param>
            <returns>The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterCache.GetConverter(System.Reflection.MemberInfo)">
            <summary>
            Gets the converter for the given member. If an attribute is
            found on the member, that will be used, otherwise the cache
            will be used.
            </summary>
            <param name="member">The member to get the converter for.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterCache.GetConverter``1">
            <summary>
            Gets the converter for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type to get the converter for.</typeparam>
            <returns>The <see cref="T:CsvHelper.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.TypeConverterException">
            <summary>
            Represents errors that occur while reading a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterException.Text">
            <summary>
            The text used in ConvertFromString.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterException.Value">
            <summary>
            The value used in ConvertToString.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterException.TypeConverter">
            <summary>
            The type converter.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterException.MemberMapData">
            <summary>
            The member map data used in ConvertFromString and ConvertToString.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterException.#ctor(CsvHelper.TypeConversion.ITypeConverter,CsvHelper.Configuration.MemberMapData,System.String,CsvHelper.CsvContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.TypeConversion.TypeConverterException"/> class.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="memberMapData">The member map data.</param>
            <param name="text">The text.</param>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterException.#ctor(CsvHelper.TypeConversion.ITypeConverter,CsvHelper.Configuration.MemberMapData,System.Object,CsvHelper.CsvContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.TypeConversion.TypeConverterException"/> class.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="memberMapData">The member map data.</param>
            <param name="value">The value.</param>
            <param name="context">The writing context.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterException.#ctor(CsvHelper.TypeConversion.ITypeConverter,CsvHelper.Configuration.MemberMapData,System.String,CsvHelper.CsvContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.TypeConversion.TypeConverterException"/> class
            with a specified error message.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="memberMapData">The member map data.</param>
            <param name="text">The text.</param>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterException.#ctor(CsvHelper.TypeConversion.ITypeConverter,CsvHelper.Configuration.MemberMapData,System.Object,CsvHelper.CsvContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.TypeConversion.TypeConverterException"/> class
            with a specified error message.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="memberMapData">The member map data.</param>
            <param name="value">The value.</param>
            <param name="context">The writing context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterException.#ctor(CsvHelper.TypeConversion.ITypeConverter,CsvHelper.Configuration.MemberMapData,System.String,CsvHelper.CsvContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.TypeConversion.TypeConverterException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="memberMapData">The member map data.</param>
            <param name="text">The text.</param>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterException.#ctor(CsvHelper.TypeConversion.ITypeConverter,CsvHelper.Configuration.MemberMapData,System.Object,CsvHelper.CsvContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.TypeConversion.TypeConverterException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="memberMapData">The member map data.</param>
            <param name="value">The value.</param>
            <param name="context">The writing context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper.TypeConversion.TypeConverterOptions">
            <summary>
            Options used when doing type conversion.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.CultureInfo">
            <summary>
            Gets or sets the culture info.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.DateTimeStyle">
            <summary>
            Gets or sets the date time style.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.TimeSpanStyle">
            <summary>
            Gets or sets the time span style.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.NumberStyles">
            <summary>
            Gets or sets the number style.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.Formats">
            <summary>
            Gets or sets the string format.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.UriKind">
            <summary>
            Gets or sets the <see cref="P:CsvHelper.TypeConversion.TypeConverterOptions.UriKind"/>.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.EnumIgnoreCase">
            <summary>
            Ingore case when parsing enums. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.BooleanTrueValues">
            <summary>
            Gets the list of values that can be
            used to represent a boolean of true.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.BooleanFalseValues">
            <summary>
            Gets the list of values that can be
            used to represent a boolean of false.
            </summary>
        </member>
        <member name="P:CsvHelper.TypeConversion.TypeConverterOptions.NullValues">
            <summary>
            Gets the list of values that can be used to represent a null value.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptions.Merge(CsvHelper.TypeConversion.TypeConverterOptions[])">
            <summary>
            Merges TypeConverterOptions by applying the values of sources in order on to each other.
            The first object is the source object.
            </summary>
            <param name="sources">The sources that will be applied.</param>
            <returns>The updated source object.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.TypeConverterOptionsCache">
            <summary>
            Caches <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for a given type.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsCache.AddOptions(System.Type,CsvHelper.TypeConversion.TypeConverterOptions)">
            <summary>
            Adds the <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type the options are for.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsCache.AddOptions``1(CsvHelper.TypeConversion.TypeConverterOptions)">
            <summary>
            Adds the <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type the options are for.</typeparam>
            <param name="options">The options.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsCache.AddOptions(CsvHelper.TypeConversion.TypeConverterOptions)">
            <summary>
            Adds the given <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> to all registered types.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsCache.RemoveOptions(System.Type)">
            <summary>
            Removes the <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for the given type.
            </summary>
            <param name="type">The type to remove the options for.</param>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsCache.RemoveOptions``1">
            <summary>
            Removes the <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for the given type.
            </summary>
            <typeparam name="T">The type to remove the options for.</typeparam>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsCache.GetOptions(System.Type)">
            <summary>
            Get the <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type the options are for.</param>
            <returns>The options for the given type.</returns>
        </member>
        <member name="M:CsvHelper.TypeConversion.TypeConverterOptionsCache.GetOptions``1">
            <summary>
            Get the <see cref="T:CsvHelper.TypeConversion.TypeConverterOptions"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type the options are for.</typeparam>
            <returns>The options for the given type.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.UInt16Converter">
            <summary>
            Converts a <see cref="T:System.UInt16"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.UInt16Converter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.UInt32Converter">
            <summary>
            Converts a <see cref="T:System.UInt32"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.UInt32Converter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.UInt64Converter">
            <summary>
            Converts a <see cref="T:System.UInt64"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.UInt64Converter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper.TypeConversion.UriConverter">
            <summary>
            Converts a <see cref="T:System.Uri"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.TypeConversion.UriConverter.ConvertFromString(System.String,CsvHelper.IReaderRow,CsvHelper.Configuration.MemberMapData)">
            <summary>
            Converts the <see cref="T:System.String"/>  to a <see cref="T:System.Uri"/>.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper.IReaderRow" /> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper.Configuration.MemberMapData" /> for the member being created.</param>
            <returns>
            The <see cref="T:System.Uri"/> created from the string.
            </returns>
        </member>
        <member name="T:CsvHelper.ValidationException">
            <summary>
            Represents a user supplied validation failure.
            </summary>
        </member>
        <member name="M:CsvHelper.ValidationException.#ctor(CsvHelper.CsvContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ValidationException"/> class.
            </summary>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper.ValidationException.#ctor(CsvHelper.CsvContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ValidationException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.ValidationException.#ctor(CsvHelper.CsvContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.ValidationException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper.WriterException">
            <summary>
            Represents errors that occur while writing a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.WriterException.#ctor(CsvHelper.CsvContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.WriterException"/> class.
            </summary>
            <param name="context">The writing context.</param>
        </member>
        <member name="M:CsvHelper.WriterException.#ctor(CsvHelper.CsvContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.WriterException"/> class
            with a specified error message.
            </summary>
            <param name="context">The writing context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper.WriterException.#ctor(CsvHelper.CsvContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper.WriterException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The writing context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
    </members>
</doc>
